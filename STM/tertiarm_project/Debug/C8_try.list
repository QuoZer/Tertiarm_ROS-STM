
C8_try.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008dfc  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000004d4  08008f0c  08008f0c  00018f0c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080093e0  080093e0  00020078  2**0
                  CONTENTS
  4 .ARM          00000000  080093e0  080093e0  00020078  2**0
                  CONTENTS
  5 .preinit_array 00000000  080093e0  080093e0  00020078  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  080093e0  080093e0  000193e0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080093e8  080093e8  000193e8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000078  20000000  080093ec  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000023d8  20000078  08009464  00020078  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  20002450  08009464  00022450  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020078  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001814d  00000000  00000000  000200a1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000033b6  00000000  00000000  000381ee  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001240  00000000  00000000  0003b5a8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000010d8  00000000  00000000  0003c7e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_line   0000f901  00000000  00000000  0003d8c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_str    00008d15  00000000  00000000  0004d1c1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .comment      00000053  00000000  00000000  00055ed6  2**0
                  CONTENTS, READONLY
 19 .debug_frame  000052f4  00000000  00000000  00055f2c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000078 	.word	0x20000078
 800012c:	00000000 	.word	0x00000000
 8000130:	08008ef4 	.word	0x08008ef4

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	2000007c 	.word	0x2000007c
 800014c:	08008ef4 	.word	0x08008ef4

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_fmul>:
 8000160:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000164:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000168:	bf1e      	ittt	ne
 800016a:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 800016e:	ea92 0f0c 	teqne	r2, ip
 8000172:	ea93 0f0c 	teqne	r3, ip
 8000176:	d06f      	beq.n	8000258 <__aeabi_fmul+0xf8>
 8000178:	441a      	add	r2, r3
 800017a:	ea80 0c01 	eor.w	ip, r0, r1
 800017e:	0240      	lsls	r0, r0, #9
 8000180:	bf18      	it	ne
 8000182:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000186:	d01e      	beq.n	80001c6 <__aeabi_fmul+0x66>
 8000188:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800018c:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000190:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000194:	fba0 3101 	umull	r3, r1, r0, r1
 8000198:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 800019c:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 80001a0:	bf3e      	ittt	cc
 80001a2:	0049      	lslcc	r1, r1, #1
 80001a4:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 80001a8:	005b      	lslcc	r3, r3, #1
 80001aa:	ea40 0001 	orr.w	r0, r0, r1
 80001ae:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 80001b2:	2afd      	cmp	r2, #253	; 0xfd
 80001b4:	d81d      	bhi.n	80001f2 <__aeabi_fmul+0x92>
 80001b6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80001ba:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80001be:	bf08      	it	eq
 80001c0:	f020 0001 	biceq.w	r0, r0, #1
 80001c4:	4770      	bx	lr
 80001c6:	f090 0f00 	teq	r0, #0
 80001ca:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 80001ce:	bf08      	it	eq
 80001d0:	0249      	lsleq	r1, r1, #9
 80001d2:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 80001d6:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 80001da:	3a7f      	subs	r2, #127	; 0x7f
 80001dc:	bfc2      	ittt	gt
 80001de:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 80001e2:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 80001e6:	4770      	bxgt	lr
 80001e8:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80001ec:	f04f 0300 	mov.w	r3, #0
 80001f0:	3a01      	subs	r2, #1
 80001f2:	dc5d      	bgt.n	80002b0 <__aeabi_fmul+0x150>
 80001f4:	f112 0f19 	cmn.w	r2, #25
 80001f8:	bfdc      	itt	le
 80001fa:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 80001fe:	4770      	bxle	lr
 8000200:	f1c2 0200 	rsb	r2, r2, #0
 8000204:	0041      	lsls	r1, r0, #1
 8000206:	fa21 f102 	lsr.w	r1, r1, r2
 800020a:	f1c2 0220 	rsb	r2, r2, #32
 800020e:	fa00 fc02 	lsl.w	ip, r0, r2
 8000212:	ea5f 0031 	movs.w	r0, r1, rrx
 8000216:	f140 0000 	adc.w	r0, r0, #0
 800021a:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 800021e:	bf08      	it	eq
 8000220:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000224:	4770      	bx	lr
 8000226:	f092 0f00 	teq	r2, #0
 800022a:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 800022e:	bf02      	ittt	eq
 8000230:	0040      	lsleq	r0, r0, #1
 8000232:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000236:	3a01      	subeq	r2, #1
 8000238:	d0f9      	beq.n	800022e <__aeabi_fmul+0xce>
 800023a:	ea40 000c 	orr.w	r0, r0, ip
 800023e:	f093 0f00 	teq	r3, #0
 8000242:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000246:	bf02      	ittt	eq
 8000248:	0049      	lsleq	r1, r1, #1
 800024a:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 800024e:	3b01      	subeq	r3, #1
 8000250:	d0f9      	beq.n	8000246 <__aeabi_fmul+0xe6>
 8000252:	ea41 010c 	orr.w	r1, r1, ip
 8000256:	e78f      	b.n	8000178 <__aeabi_fmul+0x18>
 8000258:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 800025c:	ea92 0f0c 	teq	r2, ip
 8000260:	bf18      	it	ne
 8000262:	ea93 0f0c 	teqne	r3, ip
 8000266:	d00a      	beq.n	800027e <__aeabi_fmul+0x11e>
 8000268:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 800026c:	bf18      	it	ne
 800026e:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000272:	d1d8      	bne.n	8000226 <__aeabi_fmul+0xc6>
 8000274:	ea80 0001 	eor.w	r0, r0, r1
 8000278:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 800027c:	4770      	bx	lr
 800027e:	f090 0f00 	teq	r0, #0
 8000282:	bf17      	itett	ne
 8000284:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000288:	4608      	moveq	r0, r1
 800028a:	f091 0f00 	teqne	r1, #0
 800028e:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000292:	d014      	beq.n	80002be <__aeabi_fmul+0x15e>
 8000294:	ea92 0f0c 	teq	r2, ip
 8000298:	d101      	bne.n	800029e <__aeabi_fmul+0x13e>
 800029a:	0242      	lsls	r2, r0, #9
 800029c:	d10f      	bne.n	80002be <__aeabi_fmul+0x15e>
 800029e:	ea93 0f0c 	teq	r3, ip
 80002a2:	d103      	bne.n	80002ac <__aeabi_fmul+0x14c>
 80002a4:	024b      	lsls	r3, r1, #9
 80002a6:	bf18      	it	ne
 80002a8:	4608      	movne	r0, r1
 80002aa:	d108      	bne.n	80002be <__aeabi_fmul+0x15e>
 80002ac:	ea80 0001 	eor.w	r0, r0, r1
 80002b0:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 80002b4:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80002b8:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80002bc:	4770      	bx	lr
 80002be:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80002c2:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 80002c6:	4770      	bx	lr

080002c8 <__aeabi_drsub>:
 80002c8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002cc:	e002      	b.n	80002d4 <__adddf3>
 80002ce:	bf00      	nop

080002d0 <__aeabi_dsub>:
 80002d0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002d4 <__adddf3>:
 80002d4:	b530      	push	{r4, r5, lr}
 80002d6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002da:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002de:	ea94 0f05 	teq	r4, r5
 80002e2:	bf08      	it	eq
 80002e4:	ea90 0f02 	teqeq	r0, r2
 80002e8:	bf1f      	itttt	ne
 80002ea:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002ee:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002f2:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002f6:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002fa:	f000 80e2 	beq.w	80004c2 <__adddf3+0x1ee>
 80002fe:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000302:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000306:	bfb8      	it	lt
 8000308:	426d      	neglt	r5, r5
 800030a:	dd0c      	ble.n	8000326 <__adddf3+0x52>
 800030c:	442c      	add	r4, r5
 800030e:	ea80 0202 	eor.w	r2, r0, r2
 8000312:	ea81 0303 	eor.w	r3, r1, r3
 8000316:	ea82 0000 	eor.w	r0, r2, r0
 800031a:	ea83 0101 	eor.w	r1, r3, r1
 800031e:	ea80 0202 	eor.w	r2, r0, r2
 8000322:	ea81 0303 	eor.w	r3, r1, r3
 8000326:	2d36      	cmp	r5, #54	; 0x36
 8000328:	bf88      	it	hi
 800032a:	bd30      	pophi	{r4, r5, pc}
 800032c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000330:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000334:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000338:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800033c:	d002      	beq.n	8000344 <__adddf3+0x70>
 800033e:	4240      	negs	r0, r0
 8000340:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000344:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000348:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800034c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000350:	d002      	beq.n	8000358 <__adddf3+0x84>
 8000352:	4252      	negs	r2, r2
 8000354:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000358:	ea94 0f05 	teq	r4, r5
 800035c:	f000 80a7 	beq.w	80004ae <__adddf3+0x1da>
 8000360:	f1a4 0401 	sub.w	r4, r4, #1
 8000364:	f1d5 0e20 	rsbs	lr, r5, #32
 8000368:	db0d      	blt.n	8000386 <__adddf3+0xb2>
 800036a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800036e:	fa22 f205 	lsr.w	r2, r2, r5
 8000372:	1880      	adds	r0, r0, r2
 8000374:	f141 0100 	adc.w	r1, r1, #0
 8000378:	fa03 f20e 	lsl.w	r2, r3, lr
 800037c:	1880      	adds	r0, r0, r2
 800037e:	fa43 f305 	asr.w	r3, r3, r5
 8000382:	4159      	adcs	r1, r3
 8000384:	e00e      	b.n	80003a4 <__adddf3+0xd0>
 8000386:	f1a5 0520 	sub.w	r5, r5, #32
 800038a:	f10e 0e20 	add.w	lr, lr, #32
 800038e:	2a01      	cmp	r2, #1
 8000390:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000394:	bf28      	it	cs
 8000396:	f04c 0c02 	orrcs.w	ip, ip, #2
 800039a:	fa43 f305 	asr.w	r3, r3, r5
 800039e:	18c0      	adds	r0, r0, r3
 80003a0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003a4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003a8:	d507      	bpl.n	80003ba <__adddf3+0xe6>
 80003aa:	f04f 0e00 	mov.w	lr, #0
 80003ae:	f1dc 0c00 	rsbs	ip, ip, #0
 80003b2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003b6:	eb6e 0101 	sbc.w	r1, lr, r1
 80003ba:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003be:	d31b      	bcc.n	80003f8 <__adddf3+0x124>
 80003c0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003c4:	d30c      	bcc.n	80003e0 <__adddf3+0x10c>
 80003c6:	0849      	lsrs	r1, r1, #1
 80003c8:	ea5f 0030 	movs.w	r0, r0, rrx
 80003cc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003d0:	f104 0401 	add.w	r4, r4, #1
 80003d4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003d8:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003dc:	f080 809a 	bcs.w	8000514 <__adddf3+0x240>
 80003e0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003e4:	bf08      	it	eq
 80003e6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003ea:	f150 0000 	adcs.w	r0, r0, #0
 80003ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003f2:	ea41 0105 	orr.w	r1, r1, r5
 80003f6:	bd30      	pop	{r4, r5, pc}
 80003f8:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003fc:	4140      	adcs	r0, r0
 80003fe:	eb41 0101 	adc.w	r1, r1, r1
 8000402:	3c01      	subs	r4, #1
 8000404:	bf28      	it	cs
 8000406:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800040a:	d2e9      	bcs.n	80003e0 <__adddf3+0x10c>
 800040c:	f091 0f00 	teq	r1, #0
 8000410:	bf04      	itt	eq
 8000412:	4601      	moveq	r1, r0
 8000414:	2000      	moveq	r0, #0
 8000416:	fab1 f381 	clz	r3, r1
 800041a:	bf08      	it	eq
 800041c:	3320      	addeq	r3, #32
 800041e:	f1a3 030b 	sub.w	r3, r3, #11
 8000422:	f1b3 0220 	subs.w	r2, r3, #32
 8000426:	da0c      	bge.n	8000442 <__adddf3+0x16e>
 8000428:	320c      	adds	r2, #12
 800042a:	dd08      	ble.n	800043e <__adddf3+0x16a>
 800042c:	f102 0c14 	add.w	ip, r2, #20
 8000430:	f1c2 020c 	rsb	r2, r2, #12
 8000434:	fa01 f00c 	lsl.w	r0, r1, ip
 8000438:	fa21 f102 	lsr.w	r1, r1, r2
 800043c:	e00c      	b.n	8000458 <__adddf3+0x184>
 800043e:	f102 0214 	add.w	r2, r2, #20
 8000442:	bfd8      	it	le
 8000444:	f1c2 0c20 	rsble	ip, r2, #32
 8000448:	fa01 f102 	lsl.w	r1, r1, r2
 800044c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000450:	bfdc      	itt	le
 8000452:	ea41 010c 	orrle.w	r1, r1, ip
 8000456:	4090      	lslle	r0, r2
 8000458:	1ae4      	subs	r4, r4, r3
 800045a:	bfa2      	ittt	ge
 800045c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000460:	4329      	orrge	r1, r5
 8000462:	bd30      	popge	{r4, r5, pc}
 8000464:	ea6f 0404 	mvn.w	r4, r4
 8000468:	3c1f      	subs	r4, #31
 800046a:	da1c      	bge.n	80004a6 <__adddf3+0x1d2>
 800046c:	340c      	adds	r4, #12
 800046e:	dc0e      	bgt.n	800048e <__adddf3+0x1ba>
 8000470:	f104 0414 	add.w	r4, r4, #20
 8000474:	f1c4 0220 	rsb	r2, r4, #32
 8000478:	fa20 f004 	lsr.w	r0, r0, r4
 800047c:	fa01 f302 	lsl.w	r3, r1, r2
 8000480:	ea40 0003 	orr.w	r0, r0, r3
 8000484:	fa21 f304 	lsr.w	r3, r1, r4
 8000488:	ea45 0103 	orr.w	r1, r5, r3
 800048c:	bd30      	pop	{r4, r5, pc}
 800048e:	f1c4 040c 	rsb	r4, r4, #12
 8000492:	f1c4 0220 	rsb	r2, r4, #32
 8000496:	fa20 f002 	lsr.w	r0, r0, r2
 800049a:	fa01 f304 	lsl.w	r3, r1, r4
 800049e:	ea40 0003 	orr.w	r0, r0, r3
 80004a2:	4629      	mov	r1, r5
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	fa21 f004 	lsr.w	r0, r1, r4
 80004aa:	4629      	mov	r1, r5
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	f094 0f00 	teq	r4, #0
 80004b2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004b6:	bf06      	itte	eq
 80004b8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004bc:	3401      	addeq	r4, #1
 80004be:	3d01      	subne	r5, #1
 80004c0:	e74e      	b.n	8000360 <__adddf3+0x8c>
 80004c2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004c6:	bf18      	it	ne
 80004c8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004cc:	d029      	beq.n	8000522 <__adddf3+0x24e>
 80004ce:	ea94 0f05 	teq	r4, r5
 80004d2:	bf08      	it	eq
 80004d4:	ea90 0f02 	teqeq	r0, r2
 80004d8:	d005      	beq.n	80004e6 <__adddf3+0x212>
 80004da:	ea54 0c00 	orrs.w	ip, r4, r0
 80004de:	bf04      	itt	eq
 80004e0:	4619      	moveq	r1, r3
 80004e2:	4610      	moveq	r0, r2
 80004e4:	bd30      	pop	{r4, r5, pc}
 80004e6:	ea91 0f03 	teq	r1, r3
 80004ea:	bf1e      	ittt	ne
 80004ec:	2100      	movne	r1, #0
 80004ee:	2000      	movne	r0, #0
 80004f0:	bd30      	popne	{r4, r5, pc}
 80004f2:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004f6:	d105      	bne.n	8000504 <__adddf3+0x230>
 80004f8:	0040      	lsls	r0, r0, #1
 80004fa:	4149      	adcs	r1, r1
 80004fc:	bf28      	it	cs
 80004fe:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000502:	bd30      	pop	{r4, r5, pc}
 8000504:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000508:	bf3c      	itt	cc
 800050a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800050e:	bd30      	popcc	{r4, r5, pc}
 8000510:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000514:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000518:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800051c:	f04f 0000 	mov.w	r0, #0
 8000520:	bd30      	pop	{r4, r5, pc}
 8000522:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000526:	bf1a      	itte	ne
 8000528:	4619      	movne	r1, r3
 800052a:	4610      	movne	r0, r2
 800052c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000530:	bf1c      	itt	ne
 8000532:	460b      	movne	r3, r1
 8000534:	4602      	movne	r2, r0
 8000536:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800053a:	bf06      	itte	eq
 800053c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000540:	ea91 0f03 	teqeq	r1, r3
 8000544:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000548:	bd30      	pop	{r4, r5, pc}
 800054a:	bf00      	nop

0800054c <__aeabi_ui2d>:
 800054c:	f090 0f00 	teq	r0, #0
 8000550:	bf04      	itt	eq
 8000552:	2100      	moveq	r1, #0
 8000554:	4770      	bxeq	lr
 8000556:	b530      	push	{r4, r5, lr}
 8000558:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800055c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000560:	f04f 0500 	mov.w	r5, #0
 8000564:	f04f 0100 	mov.w	r1, #0
 8000568:	e750      	b.n	800040c <__adddf3+0x138>
 800056a:	bf00      	nop

0800056c <__aeabi_i2d>:
 800056c:	f090 0f00 	teq	r0, #0
 8000570:	bf04      	itt	eq
 8000572:	2100      	moveq	r1, #0
 8000574:	4770      	bxeq	lr
 8000576:	b530      	push	{r4, r5, lr}
 8000578:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800057c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000580:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000584:	bf48      	it	mi
 8000586:	4240      	negmi	r0, r0
 8000588:	f04f 0100 	mov.w	r1, #0
 800058c:	e73e      	b.n	800040c <__adddf3+0x138>
 800058e:	bf00      	nop

08000590 <__aeabi_f2d>:
 8000590:	0042      	lsls	r2, r0, #1
 8000592:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000596:	ea4f 0131 	mov.w	r1, r1, rrx
 800059a:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800059e:	bf1f      	itttt	ne
 80005a0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80005a4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005a8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005ac:	4770      	bxne	lr
 80005ae:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005b2:	bf08      	it	eq
 80005b4:	4770      	bxeq	lr
 80005b6:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005ba:	bf04      	itt	eq
 80005bc:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005c0:	4770      	bxeq	lr
 80005c2:	b530      	push	{r4, r5, lr}
 80005c4:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005cc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005d0:	e71c      	b.n	800040c <__adddf3+0x138>
 80005d2:	bf00      	nop

080005d4 <__aeabi_ul2d>:
 80005d4:	ea50 0201 	orrs.w	r2, r0, r1
 80005d8:	bf08      	it	eq
 80005da:	4770      	bxeq	lr
 80005dc:	b530      	push	{r4, r5, lr}
 80005de:	f04f 0500 	mov.w	r5, #0
 80005e2:	e00a      	b.n	80005fa <__aeabi_l2d+0x16>

080005e4 <__aeabi_l2d>:
 80005e4:	ea50 0201 	orrs.w	r2, r0, r1
 80005e8:	bf08      	it	eq
 80005ea:	4770      	bxeq	lr
 80005ec:	b530      	push	{r4, r5, lr}
 80005ee:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005f2:	d502      	bpl.n	80005fa <__aeabi_l2d+0x16>
 80005f4:	4240      	negs	r0, r0
 80005f6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005fa:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005fe:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000602:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000606:	f43f aed8 	beq.w	80003ba <__adddf3+0xe6>
 800060a:	f04f 0203 	mov.w	r2, #3
 800060e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000612:	bf18      	it	ne
 8000614:	3203      	addne	r2, #3
 8000616:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800061a:	bf18      	it	ne
 800061c:	3203      	addne	r2, #3
 800061e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000622:	f1c2 0320 	rsb	r3, r2, #32
 8000626:	fa00 fc03 	lsl.w	ip, r0, r3
 800062a:	fa20 f002 	lsr.w	r0, r0, r2
 800062e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000632:	ea40 000e 	orr.w	r0, r0, lr
 8000636:	fa21 f102 	lsr.w	r1, r1, r2
 800063a:	4414      	add	r4, r2
 800063c:	e6bd      	b.n	80003ba <__adddf3+0xe6>
 800063e:	bf00      	nop

08000640 <__aeabi_dmul>:
 8000640:	b570      	push	{r4, r5, r6, lr}
 8000642:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000646:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800064a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800064e:	bf1d      	ittte	ne
 8000650:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000654:	ea94 0f0c 	teqne	r4, ip
 8000658:	ea95 0f0c 	teqne	r5, ip
 800065c:	f000 f8de 	bleq	800081c <__aeabi_dmul+0x1dc>
 8000660:	442c      	add	r4, r5
 8000662:	ea81 0603 	eor.w	r6, r1, r3
 8000666:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800066a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800066e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000672:	bf18      	it	ne
 8000674:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000678:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800067c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000680:	d038      	beq.n	80006f4 <__aeabi_dmul+0xb4>
 8000682:	fba0 ce02 	umull	ip, lr, r0, r2
 8000686:	f04f 0500 	mov.w	r5, #0
 800068a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800068e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8000692:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000696:	f04f 0600 	mov.w	r6, #0
 800069a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800069e:	f09c 0f00 	teq	ip, #0
 80006a2:	bf18      	it	ne
 80006a4:	f04e 0e01 	orrne.w	lr, lr, #1
 80006a8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006ac:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006b0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006b4:	d204      	bcs.n	80006c0 <__aeabi_dmul+0x80>
 80006b6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006ba:	416d      	adcs	r5, r5
 80006bc:	eb46 0606 	adc.w	r6, r6, r6
 80006c0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006c4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006c8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006cc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006d0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006d4:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006d8:	bf88      	it	hi
 80006da:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006de:	d81e      	bhi.n	800071e <__aeabi_dmul+0xde>
 80006e0:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006e4:	bf08      	it	eq
 80006e6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006ea:	f150 0000 	adcs.w	r0, r0, #0
 80006ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006f2:	bd70      	pop	{r4, r5, r6, pc}
 80006f4:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006f8:	ea46 0101 	orr.w	r1, r6, r1
 80006fc:	ea40 0002 	orr.w	r0, r0, r2
 8000700:	ea81 0103 	eor.w	r1, r1, r3
 8000704:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000708:	bfc2      	ittt	gt
 800070a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800070e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000712:	bd70      	popgt	{r4, r5, r6, pc}
 8000714:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000718:	f04f 0e00 	mov.w	lr, #0
 800071c:	3c01      	subs	r4, #1
 800071e:	f300 80ab 	bgt.w	8000878 <__aeabi_dmul+0x238>
 8000722:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000726:	bfde      	ittt	le
 8000728:	2000      	movle	r0, #0
 800072a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800072e:	bd70      	pople	{r4, r5, r6, pc}
 8000730:	f1c4 0400 	rsb	r4, r4, #0
 8000734:	3c20      	subs	r4, #32
 8000736:	da35      	bge.n	80007a4 <__aeabi_dmul+0x164>
 8000738:	340c      	adds	r4, #12
 800073a:	dc1b      	bgt.n	8000774 <__aeabi_dmul+0x134>
 800073c:	f104 0414 	add.w	r4, r4, #20
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f305 	lsl.w	r3, r0, r5
 8000748:	fa20 f004 	lsr.w	r0, r0, r4
 800074c:	fa01 f205 	lsl.w	r2, r1, r5
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000758:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800075c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000760:	fa21 f604 	lsr.w	r6, r1, r4
 8000764:	eb42 0106 	adc.w	r1, r2, r6
 8000768:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800076c:	bf08      	it	eq
 800076e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000772:	bd70      	pop	{r4, r5, r6, pc}
 8000774:	f1c4 040c 	rsb	r4, r4, #12
 8000778:	f1c4 0520 	rsb	r5, r4, #32
 800077c:	fa00 f304 	lsl.w	r3, r0, r4
 8000780:	fa20 f005 	lsr.w	r0, r0, r5
 8000784:	fa01 f204 	lsl.w	r2, r1, r4
 8000788:	ea40 0002 	orr.w	r0, r0, r2
 800078c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000790:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000794:	f141 0100 	adc.w	r1, r1, #0
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f1c4 0520 	rsb	r5, r4, #32
 80007a8:	fa00 f205 	lsl.w	r2, r0, r5
 80007ac:	ea4e 0e02 	orr.w	lr, lr, r2
 80007b0:	fa20 f304 	lsr.w	r3, r0, r4
 80007b4:	fa01 f205 	lsl.w	r2, r1, r5
 80007b8:	ea43 0302 	orr.w	r3, r3, r2
 80007bc:	fa21 f004 	lsr.w	r0, r1, r4
 80007c0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007c4:	fa21 f204 	lsr.w	r2, r1, r4
 80007c8:	ea20 0002 	bic.w	r0, r0, r2
 80007cc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007d0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007d4:	bf08      	it	eq
 80007d6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007da:	bd70      	pop	{r4, r5, r6, pc}
 80007dc:	f094 0f00 	teq	r4, #0
 80007e0:	d10f      	bne.n	8000802 <__aeabi_dmul+0x1c2>
 80007e2:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007e6:	0040      	lsls	r0, r0, #1
 80007e8:	eb41 0101 	adc.w	r1, r1, r1
 80007ec:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007f0:	bf08      	it	eq
 80007f2:	3c01      	subeq	r4, #1
 80007f4:	d0f7      	beq.n	80007e6 <__aeabi_dmul+0x1a6>
 80007f6:	ea41 0106 	orr.w	r1, r1, r6
 80007fa:	f095 0f00 	teq	r5, #0
 80007fe:	bf18      	it	ne
 8000800:	4770      	bxne	lr
 8000802:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000806:	0052      	lsls	r2, r2, #1
 8000808:	eb43 0303 	adc.w	r3, r3, r3
 800080c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000810:	bf08      	it	eq
 8000812:	3d01      	subeq	r5, #1
 8000814:	d0f7      	beq.n	8000806 <__aeabi_dmul+0x1c6>
 8000816:	ea43 0306 	orr.w	r3, r3, r6
 800081a:	4770      	bx	lr
 800081c:	ea94 0f0c 	teq	r4, ip
 8000820:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000824:	bf18      	it	ne
 8000826:	ea95 0f0c 	teqne	r5, ip
 800082a:	d00c      	beq.n	8000846 <__aeabi_dmul+0x206>
 800082c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000830:	bf18      	it	ne
 8000832:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000836:	d1d1      	bne.n	80007dc <__aeabi_dmul+0x19c>
 8000838:	ea81 0103 	eor.w	r1, r1, r3
 800083c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000840:	f04f 0000 	mov.w	r0, #0
 8000844:	bd70      	pop	{r4, r5, r6, pc}
 8000846:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800084a:	bf06      	itte	eq
 800084c:	4610      	moveq	r0, r2
 800084e:	4619      	moveq	r1, r3
 8000850:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000854:	d019      	beq.n	800088a <__aeabi_dmul+0x24a>
 8000856:	ea94 0f0c 	teq	r4, ip
 800085a:	d102      	bne.n	8000862 <__aeabi_dmul+0x222>
 800085c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000860:	d113      	bne.n	800088a <__aeabi_dmul+0x24a>
 8000862:	ea95 0f0c 	teq	r5, ip
 8000866:	d105      	bne.n	8000874 <__aeabi_dmul+0x234>
 8000868:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800086c:	bf1c      	itt	ne
 800086e:	4610      	movne	r0, r2
 8000870:	4619      	movne	r1, r3
 8000872:	d10a      	bne.n	800088a <__aeabi_dmul+0x24a>
 8000874:	ea81 0103 	eor.w	r1, r1, r3
 8000878:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800087c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000880:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000884:	f04f 0000 	mov.w	r0, #0
 8000888:	bd70      	pop	{r4, r5, r6, pc}
 800088a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800088e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8000892:	bd70      	pop	{r4, r5, r6, pc}

08000894 <__aeabi_ddiv>:
 8000894:	b570      	push	{r4, r5, r6, lr}
 8000896:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800089a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800089e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80008a2:	bf1d      	ittte	ne
 80008a4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008a8:	ea94 0f0c 	teqne	r4, ip
 80008ac:	ea95 0f0c 	teqne	r5, ip
 80008b0:	f000 f8a7 	bleq	8000a02 <__aeabi_ddiv+0x16e>
 80008b4:	eba4 0405 	sub.w	r4, r4, r5
 80008b8:	ea81 0e03 	eor.w	lr, r1, r3
 80008bc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008c0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008c4:	f000 8088 	beq.w	80009d8 <__aeabi_ddiv+0x144>
 80008c8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008cc:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008d0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008d4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008d8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008dc:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008e0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008e4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008e8:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008ec:	429d      	cmp	r5, r3
 80008ee:	bf08      	it	eq
 80008f0:	4296      	cmpeq	r6, r2
 80008f2:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008f6:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008fa:	d202      	bcs.n	8000902 <__aeabi_ddiv+0x6e>
 80008fc:	085b      	lsrs	r3, r3, #1
 80008fe:	ea4f 0232 	mov.w	r2, r2, rrx
 8000902:	1ab6      	subs	r6, r6, r2
 8000904:	eb65 0503 	sbc.w	r5, r5, r3
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000912:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 000c 	orrcs.w	r0, r0, ip
 8000928:	085b      	lsrs	r3, r3, #1
 800092a:	ea4f 0232 	mov.w	r2, r2, rrx
 800092e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000932:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000936:	bf22      	ittt	cs
 8000938:	1ab6      	subcs	r6, r6, r2
 800093a:	4675      	movcs	r5, lr
 800093c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000940:	085b      	lsrs	r3, r3, #1
 8000942:	ea4f 0232 	mov.w	r2, r2, rrx
 8000946:	ebb6 0e02 	subs.w	lr, r6, r2
 800094a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800094e:	bf22      	ittt	cs
 8000950:	1ab6      	subcs	r6, r6, r2
 8000952:	4675      	movcs	r5, lr
 8000954:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000958:	085b      	lsrs	r3, r3, #1
 800095a:	ea4f 0232 	mov.w	r2, r2, rrx
 800095e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000962:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000966:	bf22      	ittt	cs
 8000968:	1ab6      	subcs	r6, r6, r2
 800096a:	4675      	movcs	r5, lr
 800096c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000970:	ea55 0e06 	orrs.w	lr, r5, r6
 8000974:	d018      	beq.n	80009a8 <__aeabi_ddiv+0x114>
 8000976:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800097a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800097e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000982:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000986:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800098a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800098e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000992:	d1c0      	bne.n	8000916 <__aeabi_ddiv+0x82>
 8000994:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000998:	d10b      	bne.n	80009b2 <__aeabi_ddiv+0x11e>
 800099a:	ea41 0100 	orr.w	r1, r1, r0
 800099e:	f04f 0000 	mov.w	r0, #0
 80009a2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80009a6:	e7b6      	b.n	8000916 <__aeabi_ddiv+0x82>
 80009a8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009ac:	bf04      	itt	eq
 80009ae:	4301      	orreq	r1, r0
 80009b0:	2000      	moveq	r0, #0
 80009b2:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009b6:	bf88      	it	hi
 80009b8:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009bc:	f63f aeaf 	bhi.w	800071e <__aeabi_dmul+0xde>
 80009c0:	ebb5 0c03 	subs.w	ip, r5, r3
 80009c4:	bf04      	itt	eq
 80009c6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009ca:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009ce:	f150 0000 	adcs.w	r0, r0, #0
 80009d2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009d6:	bd70      	pop	{r4, r5, r6, pc}
 80009d8:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009dc:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009e0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009e4:	bfc2      	ittt	gt
 80009e6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009ea:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009ee:	bd70      	popgt	{r4, r5, r6, pc}
 80009f0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009f4:	f04f 0e00 	mov.w	lr, #0
 80009f8:	3c01      	subs	r4, #1
 80009fa:	e690      	b.n	800071e <__aeabi_dmul+0xde>
 80009fc:	ea45 0e06 	orr.w	lr, r5, r6
 8000a00:	e68d      	b.n	800071e <__aeabi_dmul+0xde>
 8000a02:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000a06:	ea94 0f0c 	teq	r4, ip
 8000a0a:	bf08      	it	eq
 8000a0c:	ea95 0f0c 	teqeq	r5, ip
 8000a10:	f43f af3b 	beq.w	800088a <__aeabi_dmul+0x24a>
 8000a14:	ea94 0f0c 	teq	r4, ip
 8000a18:	d10a      	bne.n	8000a30 <__aeabi_ddiv+0x19c>
 8000a1a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a1e:	f47f af34 	bne.w	800088a <__aeabi_dmul+0x24a>
 8000a22:	ea95 0f0c 	teq	r5, ip
 8000a26:	f47f af25 	bne.w	8000874 <__aeabi_dmul+0x234>
 8000a2a:	4610      	mov	r0, r2
 8000a2c:	4619      	mov	r1, r3
 8000a2e:	e72c      	b.n	800088a <__aeabi_dmul+0x24a>
 8000a30:	ea95 0f0c 	teq	r5, ip
 8000a34:	d106      	bne.n	8000a44 <__aeabi_ddiv+0x1b0>
 8000a36:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a3a:	f43f aefd 	beq.w	8000838 <__aeabi_dmul+0x1f8>
 8000a3e:	4610      	mov	r0, r2
 8000a40:	4619      	mov	r1, r3
 8000a42:	e722      	b.n	800088a <__aeabi_dmul+0x24a>
 8000a44:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a48:	bf18      	it	ne
 8000a4a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a4e:	f47f aec5 	bne.w	80007dc <__aeabi_dmul+0x19c>
 8000a52:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a56:	f47f af0d 	bne.w	8000874 <__aeabi_dmul+0x234>
 8000a5a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a5e:	f47f aeeb 	bne.w	8000838 <__aeabi_dmul+0x1f8>
 8000a62:	e712      	b.n	800088a <__aeabi_dmul+0x24a>

08000a64 <__aeabi_d2uiz>:
 8000a64:	004a      	lsls	r2, r1, #1
 8000a66:	d211      	bcs.n	8000a8c <__aeabi_d2uiz+0x28>
 8000a68:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a6c:	d211      	bcs.n	8000a92 <__aeabi_d2uiz+0x2e>
 8000a6e:	d50d      	bpl.n	8000a8c <__aeabi_d2uiz+0x28>
 8000a70:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a74:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a78:	d40e      	bmi.n	8000a98 <__aeabi_d2uiz+0x34>
 8000a7a:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a7e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a82:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a86:	fa23 f002 	lsr.w	r0, r3, r2
 8000a8a:	4770      	bx	lr
 8000a8c:	f04f 0000 	mov.w	r0, #0
 8000a90:	4770      	bx	lr
 8000a92:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a96:	d102      	bne.n	8000a9e <__aeabi_d2uiz+0x3a>
 8000a98:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000a9c:	4770      	bx	lr
 8000a9e:	f04f 0000 	mov.w	r0, #0
 8000aa2:	4770      	bx	lr

08000aa4 <__aeabi_d2f>:
 8000aa4:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000aa8:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000aac:	bf24      	itt	cs
 8000aae:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000ab2:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000ab6:	d90d      	bls.n	8000ad4 <__aeabi_d2f+0x30>
 8000ab8:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000abc:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000ac0:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000ac4:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000ac8:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000acc:	bf08      	it	eq
 8000ace:	f020 0001 	biceq.w	r0, r0, #1
 8000ad2:	4770      	bx	lr
 8000ad4:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000ad8:	d121      	bne.n	8000b1e <__aeabi_d2f+0x7a>
 8000ada:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000ade:	bfbc      	itt	lt
 8000ae0:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000ae4:	4770      	bxlt	lr
 8000ae6:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000aea:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000aee:	f1c2 0218 	rsb	r2, r2, #24
 8000af2:	f1c2 0c20 	rsb	ip, r2, #32
 8000af6:	fa10 f30c 	lsls.w	r3, r0, ip
 8000afa:	fa20 f002 	lsr.w	r0, r0, r2
 8000afe:	bf18      	it	ne
 8000b00:	f040 0001 	orrne.w	r0, r0, #1
 8000b04:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b08:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b0c:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b10:	ea40 000c 	orr.w	r0, r0, ip
 8000b14:	fa23 f302 	lsr.w	r3, r3, r2
 8000b18:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b1c:	e7cc      	b.n	8000ab8 <__aeabi_d2f+0x14>
 8000b1e:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b22:	d107      	bne.n	8000b34 <__aeabi_d2f+0x90>
 8000b24:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b28:	bf1e      	ittt	ne
 8000b2a:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b2e:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b32:	4770      	bxne	lr
 8000b34:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b38:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b3c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b40:	4770      	bx	lr
 8000b42:	bf00      	nop

08000b44 <__aeabi_frsub>:
 8000b44:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000b48:	e002      	b.n	8000b50 <__addsf3>
 8000b4a:	bf00      	nop

08000b4c <__aeabi_fsub>:
 8000b4c:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000b50 <__addsf3>:
 8000b50:	0042      	lsls	r2, r0, #1
 8000b52:	bf1f      	itttt	ne
 8000b54:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000b58:	ea92 0f03 	teqne	r2, r3
 8000b5c:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000b60:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b64:	d06a      	beq.n	8000c3c <__addsf3+0xec>
 8000b66:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000b6a:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000b6e:	bfc1      	itttt	gt
 8000b70:	18d2      	addgt	r2, r2, r3
 8000b72:	4041      	eorgt	r1, r0
 8000b74:	4048      	eorgt	r0, r1
 8000b76:	4041      	eorgt	r1, r0
 8000b78:	bfb8      	it	lt
 8000b7a:	425b      	neglt	r3, r3
 8000b7c:	2b19      	cmp	r3, #25
 8000b7e:	bf88      	it	hi
 8000b80:	4770      	bxhi	lr
 8000b82:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000b86:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b8a:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000b8e:	bf18      	it	ne
 8000b90:	4240      	negne	r0, r0
 8000b92:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b96:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000b9a:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000b9e:	bf18      	it	ne
 8000ba0:	4249      	negne	r1, r1
 8000ba2:	ea92 0f03 	teq	r2, r3
 8000ba6:	d03f      	beq.n	8000c28 <__addsf3+0xd8>
 8000ba8:	f1a2 0201 	sub.w	r2, r2, #1
 8000bac:	fa41 fc03 	asr.w	ip, r1, r3
 8000bb0:	eb10 000c 	adds.w	r0, r0, ip
 8000bb4:	f1c3 0320 	rsb	r3, r3, #32
 8000bb8:	fa01 f103 	lsl.w	r1, r1, r3
 8000bbc:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000bc0:	d502      	bpl.n	8000bc8 <__addsf3+0x78>
 8000bc2:	4249      	negs	r1, r1
 8000bc4:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000bc8:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000bcc:	d313      	bcc.n	8000bf6 <__addsf3+0xa6>
 8000bce:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000bd2:	d306      	bcc.n	8000be2 <__addsf3+0x92>
 8000bd4:	0840      	lsrs	r0, r0, #1
 8000bd6:	ea4f 0131 	mov.w	r1, r1, rrx
 8000bda:	f102 0201 	add.w	r2, r2, #1
 8000bde:	2afe      	cmp	r2, #254	; 0xfe
 8000be0:	d251      	bcs.n	8000c86 <__addsf3+0x136>
 8000be2:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000be6:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000bea:	bf08      	it	eq
 8000bec:	f020 0001 	biceq.w	r0, r0, #1
 8000bf0:	ea40 0003 	orr.w	r0, r0, r3
 8000bf4:	4770      	bx	lr
 8000bf6:	0049      	lsls	r1, r1, #1
 8000bf8:	eb40 0000 	adc.w	r0, r0, r0
 8000bfc:	3a01      	subs	r2, #1
 8000bfe:	bf28      	it	cs
 8000c00:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000c04:	d2ed      	bcs.n	8000be2 <__addsf3+0x92>
 8000c06:	fab0 fc80 	clz	ip, r0
 8000c0a:	f1ac 0c08 	sub.w	ip, ip, #8
 8000c0e:	ebb2 020c 	subs.w	r2, r2, ip
 8000c12:	fa00 f00c 	lsl.w	r0, r0, ip
 8000c16:	bfaa      	itet	ge
 8000c18:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000c1c:	4252      	neglt	r2, r2
 8000c1e:	4318      	orrge	r0, r3
 8000c20:	bfbc      	itt	lt
 8000c22:	40d0      	lsrlt	r0, r2
 8000c24:	4318      	orrlt	r0, r3
 8000c26:	4770      	bx	lr
 8000c28:	f092 0f00 	teq	r2, #0
 8000c2c:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000c30:	bf06      	itte	eq
 8000c32:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000c36:	3201      	addeq	r2, #1
 8000c38:	3b01      	subne	r3, #1
 8000c3a:	e7b5      	b.n	8000ba8 <__addsf3+0x58>
 8000c3c:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000c40:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000c44:	bf18      	it	ne
 8000c46:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000c4a:	d021      	beq.n	8000c90 <__addsf3+0x140>
 8000c4c:	ea92 0f03 	teq	r2, r3
 8000c50:	d004      	beq.n	8000c5c <__addsf3+0x10c>
 8000c52:	f092 0f00 	teq	r2, #0
 8000c56:	bf08      	it	eq
 8000c58:	4608      	moveq	r0, r1
 8000c5a:	4770      	bx	lr
 8000c5c:	ea90 0f01 	teq	r0, r1
 8000c60:	bf1c      	itt	ne
 8000c62:	2000      	movne	r0, #0
 8000c64:	4770      	bxne	lr
 8000c66:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000c6a:	d104      	bne.n	8000c76 <__addsf3+0x126>
 8000c6c:	0040      	lsls	r0, r0, #1
 8000c6e:	bf28      	it	cs
 8000c70:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000c74:	4770      	bx	lr
 8000c76:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000c7a:	bf3c      	itt	cc
 8000c7c:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000c80:	4770      	bxcc	lr
 8000c82:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000c86:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000c8a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c8e:	4770      	bx	lr
 8000c90:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000c94:	bf16      	itet	ne
 8000c96:	4608      	movne	r0, r1
 8000c98:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000c9c:	4601      	movne	r1, r0
 8000c9e:	0242      	lsls	r2, r0, #9
 8000ca0:	bf06      	itte	eq
 8000ca2:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000ca6:	ea90 0f01 	teqeq	r0, r1
 8000caa:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000cae:	4770      	bx	lr

08000cb0 <__aeabi_ui2f>:
 8000cb0:	f04f 0300 	mov.w	r3, #0
 8000cb4:	e004      	b.n	8000cc0 <__aeabi_i2f+0x8>
 8000cb6:	bf00      	nop

08000cb8 <__aeabi_i2f>:
 8000cb8:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000cbc:	bf48      	it	mi
 8000cbe:	4240      	negmi	r0, r0
 8000cc0:	ea5f 0c00 	movs.w	ip, r0
 8000cc4:	bf08      	it	eq
 8000cc6:	4770      	bxeq	lr
 8000cc8:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000ccc:	4601      	mov	r1, r0
 8000cce:	f04f 0000 	mov.w	r0, #0
 8000cd2:	e01c      	b.n	8000d0e <__aeabi_l2f+0x2a>

08000cd4 <__aeabi_ul2f>:
 8000cd4:	ea50 0201 	orrs.w	r2, r0, r1
 8000cd8:	bf08      	it	eq
 8000cda:	4770      	bxeq	lr
 8000cdc:	f04f 0300 	mov.w	r3, #0
 8000ce0:	e00a      	b.n	8000cf8 <__aeabi_l2f+0x14>
 8000ce2:	bf00      	nop

08000ce4 <__aeabi_l2f>:
 8000ce4:	ea50 0201 	orrs.w	r2, r0, r1
 8000ce8:	bf08      	it	eq
 8000cea:	4770      	bxeq	lr
 8000cec:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000cf0:	d502      	bpl.n	8000cf8 <__aeabi_l2f+0x14>
 8000cf2:	4240      	negs	r0, r0
 8000cf4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000cf8:	ea5f 0c01 	movs.w	ip, r1
 8000cfc:	bf02      	ittt	eq
 8000cfe:	4684      	moveq	ip, r0
 8000d00:	4601      	moveq	r1, r0
 8000d02:	2000      	moveq	r0, #0
 8000d04:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000d08:	bf08      	it	eq
 8000d0a:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000d0e:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000d12:	fabc f28c 	clz	r2, ip
 8000d16:	3a08      	subs	r2, #8
 8000d18:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000d1c:	db10      	blt.n	8000d40 <__aeabi_l2f+0x5c>
 8000d1e:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d22:	4463      	add	r3, ip
 8000d24:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d28:	f1c2 0220 	rsb	r2, r2, #32
 8000d2c:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000d30:	fa20 f202 	lsr.w	r2, r0, r2
 8000d34:	eb43 0002 	adc.w	r0, r3, r2
 8000d38:	bf08      	it	eq
 8000d3a:	f020 0001 	biceq.w	r0, r0, #1
 8000d3e:	4770      	bx	lr
 8000d40:	f102 0220 	add.w	r2, r2, #32
 8000d44:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d48:	f1c2 0220 	rsb	r2, r2, #32
 8000d4c:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000d50:	fa21 f202 	lsr.w	r2, r1, r2
 8000d54:	eb43 0002 	adc.w	r0, r3, r2
 8000d58:	bf08      	it	eq
 8000d5a:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d5e:	4770      	bx	lr

08000d60 <__gesf2>:
 8000d60:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000d64:	e006      	b.n	8000d74 <__cmpsf2+0x4>
 8000d66:	bf00      	nop

08000d68 <__lesf2>:
 8000d68:	f04f 0c01 	mov.w	ip, #1
 8000d6c:	e002      	b.n	8000d74 <__cmpsf2+0x4>
 8000d6e:	bf00      	nop

08000d70 <__cmpsf2>:
 8000d70:	f04f 0c01 	mov.w	ip, #1
 8000d74:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000d78:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000d7c:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000d80:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000d84:	bf18      	it	ne
 8000d86:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000d8a:	d011      	beq.n	8000db0 <__cmpsf2+0x40>
 8000d8c:	b001      	add	sp, #4
 8000d8e:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 8000d92:	bf18      	it	ne
 8000d94:	ea90 0f01 	teqne	r0, r1
 8000d98:	bf58      	it	pl
 8000d9a:	ebb2 0003 	subspl.w	r0, r2, r3
 8000d9e:	bf88      	it	hi
 8000da0:	17c8      	asrhi	r0, r1, #31
 8000da2:	bf38      	it	cc
 8000da4:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 8000da8:	bf18      	it	ne
 8000daa:	f040 0001 	orrne.w	r0, r0, #1
 8000dae:	4770      	bx	lr
 8000db0:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000db4:	d102      	bne.n	8000dbc <__cmpsf2+0x4c>
 8000db6:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 8000dba:	d105      	bne.n	8000dc8 <__cmpsf2+0x58>
 8000dbc:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8000dc0:	d1e4      	bne.n	8000d8c <__cmpsf2+0x1c>
 8000dc2:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 8000dc6:	d0e1      	beq.n	8000d8c <__cmpsf2+0x1c>
 8000dc8:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000dcc:	4770      	bx	lr
 8000dce:	bf00      	nop

08000dd0 <__aeabi_cfrcmple>:
 8000dd0:	4684      	mov	ip, r0
 8000dd2:	4608      	mov	r0, r1
 8000dd4:	4661      	mov	r1, ip
 8000dd6:	e7ff      	b.n	8000dd8 <__aeabi_cfcmpeq>

08000dd8 <__aeabi_cfcmpeq>:
 8000dd8:	b50f      	push	{r0, r1, r2, r3, lr}
 8000dda:	f7ff ffc9 	bl	8000d70 <__cmpsf2>
 8000dde:	2800      	cmp	r0, #0
 8000de0:	bf48      	it	mi
 8000de2:	f110 0f00 	cmnmi.w	r0, #0
 8000de6:	bd0f      	pop	{r0, r1, r2, r3, pc}

08000de8 <__aeabi_fcmpeq>:
 8000de8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000dec:	f7ff fff4 	bl	8000dd8 <__aeabi_cfcmpeq>
 8000df0:	bf0c      	ite	eq
 8000df2:	2001      	moveq	r0, #1
 8000df4:	2000      	movne	r0, #0
 8000df6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000dfa:	bf00      	nop

08000dfc <__aeabi_fcmplt>:
 8000dfc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000e00:	f7ff ffea 	bl	8000dd8 <__aeabi_cfcmpeq>
 8000e04:	bf34      	ite	cc
 8000e06:	2001      	movcc	r0, #1
 8000e08:	2000      	movcs	r0, #0
 8000e0a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000e0e:	bf00      	nop

08000e10 <__aeabi_fcmple>:
 8000e10:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000e14:	f7ff ffe0 	bl	8000dd8 <__aeabi_cfcmpeq>
 8000e18:	bf94      	ite	ls
 8000e1a:	2001      	movls	r0, #1
 8000e1c:	2000      	movhi	r0, #0
 8000e1e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000e22:	bf00      	nop

08000e24 <__aeabi_fcmpge>:
 8000e24:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000e28:	f7ff ffd2 	bl	8000dd0 <__aeabi_cfrcmple>
 8000e2c:	bf94      	ite	ls
 8000e2e:	2001      	movls	r0, #1
 8000e30:	2000      	movhi	r0, #0
 8000e32:	f85d fb08 	ldr.w	pc, [sp], #8
 8000e36:	bf00      	nop

08000e38 <__aeabi_fcmpgt>:
 8000e38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000e3c:	f7ff ffc8 	bl	8000dd0 <__aeabi_cfrcmple>
 8000e40:	bf34      	ite	cc
 8000e42:	2001      	movcc	r0, #1
 8000e44:	2000      	movcs	r0, #0
 8000e46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000e4a:	bf00      	nop

08000e4c <__aeabi_f2uiz>:
 8000e4c:	0042      	lsls	r2, r0, #1
 8000e4e:	d20e      	bcs.n	8000e6e <__aeabi_f2uiz+0x22>
 8000e50:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8000e54:	d30b      	bcc.n	8000e6e <__aeabi_f2uiz+0x22>
 8000e56:	f04f 039e 	mov.w	r3, #158	; 0x9e
 8000e5a:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8000e5e:	d409      	bmi.n	8000e74 <__aeabi_f2uiz+0x28>
 8000e60:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8000e64:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000e68:	fa23 f002 	lsr.w	r0, r3, r2
 8000e6c:	4770      	bx	lr
 8000e6e:	f04f 0000 	mov.w	r0, #0
 8000e72:	4770      	bx	lr
 8000e74:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8000e78:	d101      	bne.n	8000e7e <__aeabi_f2uiz+0x32>
 8000e7a:	0242      	lsls	r2, r0, #9
 8000e7c:	d102      	bne.n	8000e84 <__aeabi_f2uiz+0x38>
 8000e7e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000e82:	4770      	bx	lr
 8000e84:	f04f 0000 	mov.w	r0, #0
 8000e88:	4770      	bx	lr
 8000e8a:	bf00      	nop

08000e8c <_ZN3ros4TimeC1Ev>:
class Time
{
public:
  uint32_t sec, nsec;

  Time() : sec(0), nsec(0) {}
 8000e8c:	b480      	push	{r7}
 8000e8e:	b083      	sub	sp, #12
 8000e90:	af00      	add	r7, sp, #0
 8000e92:	6078      	str	r0, [r7, #4]
 8000e94:	687b      	ldr	r3, [r7, #4]
 8000e96:	2200      	movs	r2, #0
 8000e98:	601a      	str	r2, [r3, #0]
 8000e9a:	687b      	ldr	r3, [r7, #4]
 8000e9c:	2200      	movs	r2, #0
 8000e9e:	605a      	str	r2, [r3, #4]
 8000ea0:	687b      	ldr	r3, [r7, #4]
 8000ea2:	4618      	mov	r0, r3
 8000ea4:	370c      	adds	r7, #12
 8000ea6:	46bd      	mov	sp, r7
 8000ea8:	bc80      	pop	{r7}
 8000eaa:	4770      	bx	lr

08000eac <_ZN3ros3MsgC1Ev>:

namespace ros
{

/* Base Message Type */
class Msg
 8000eac:	b480      	push	{r7}
 8000eae:	b083      	sub	sp, #12
 8000eb0:	af00      	add	r7, sp, #0
 8000eb2:	6078      	str	r0, [r7, #4]
 8000eb4:	4a04      	ldr	r2, [pc, #16]	; (8000ec8 <_ZN3ros3MsgC1Ev+0x1c>)
 8000eb6:	687b      	ldr	r3, [r7, #4]
 8000eb8:	601a      	str	r2, [r3, #0]
 8000eba:	687b      	ldr	r3, [r7, #4]
 8000ebc:	4618      	mov	r0, r3
 8000ebe:	370c      	adds	r7, #12
 8000ec0:	46bd      	mov	sp, r7
 8000ec2:	bc80      	pop	{r7}
 8000ec4:	4770      	bx	lr
 8000ec6:	bf00      	nop
 8000ec8:	08009318 	.word	0x08009318

08000ecc <_ZN8std_msgs4TimeC1Ev>:
  {
    public:
      typedef ros::Time _data_type;
      _data_type data;

    Time():
 8000ecc:	b580      	push	{r7, lr}
 8000ece:	b082      	sub	sp, #8
 8000ed0:	af00      	add	r7, sp, #0
 8000ed2:	6078      	str	r0, [r7, #4]
      data()
 8000ed4:	687b      	ldr	r3, [r7, #4]
 8000ed6:	4618      	mov	r0, r3
 8000ed8:	f7ff ffe8 	bl	8000eac <_ZN3ros3MsgC1Ev>
 8000edc:	4a06      	ldr	r2, [pc, #24]	; (8000ef8 <_ZN8std_msgs4TimeC1Ev+0x2c>)
 8000ede:	687b      	ldr	r3, [r7, #4]
 8000ee0:	601a      	str	r2, [r3, #0]
 8000ee2:	687b      	ldr	r3, [r7, #4]
 8000ee4:	3304      	adds	r3, #4
 8000ee6:	4618      	mov	r0, r3
 8000ee8:	f7ff ffd0 	bl	8000e8c <_ZN3ros4TimeC1Ev>
    {
    }
 8000eec:	687b      	ldr	r3, [r7, #4]
 8000eee:	4618      	mov	r0, r3
 8000ef0:	3708      	adds	r7, #8
 8000ef2:	46bd      	mov	sp, r7
 8000ef4:	bd80      	pop	{r7, pc}
 8000ef6:	bf00      	nop
 8000ef8:	08009300 	.word	0x08009300

08000efc <_ZNK8std_msgs4Time9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const
 8000efc:	b480      	push	{r7}
 8000efe:	b085      	sub	sp, #20
 8000f00:	af00      	add	r7, sp, #0
 8000f02:	6078      	str	r0, [r7, #4]
 8000f04:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8000f06:	2300      	movs	r3, #0
 8000f08:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (this->data.sec >> (8 * 0)) & 0xFF;
 8000f0a:	687b      	ldr	r3, [r7, #4]
 8000f0c:	6859      	ldr	r1, [r3, #4]
 8000f0e:	68fb      	ldr	r3, [r7, #12]
 8000f10:	683a      	ldr	r2, [r7, #0]
 8000f12:	4413      	add	r3, r2
 8000f14:	b2ca      	uxtb	r2, r1
 8000f16:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->data.sec >> (8 * 1)) & 0xFF;
 8000f18:	687b      	ldr	r3, [r7, #4]
 8000f1a:	685b      	ldr	r3, [r3, #4]
 8000f1c:	0a19      	lsrs	r1, r3, #8
 8000f1e:	68fb      	ldr	r3, [r7, #12]
 8000f20:	3301      	adds	r3, #1
 8000f22:	683a      	ldr	r2, [r7, #0]
 8000f24:	4413      	add	r3, r2
 8000f26:	b2ca      	uxtb	r2, r1
 8000f28:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->data.sec >> (8 * 2)) & 0xFF;
 8000f2a:	687b      	ldr	r3, [r7, #4]
 8000f2c:	685b      	ldr	r3, [r3, #4]
 8000f2e:	0c19      	lsrs	r1, r3, #16
 8000f30:	68fb      	ldr	r3, [r7, #12]
 8000f32:	3302      	adds	r3, #2
 8000f34:	683a      	ldr	r2, [r7, #0]
 8000f36:	4413      	add	r3, r2
 8000f38:	b2ca      	uxtb	r2, r1
 8000f3a:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->data.sec >> (8 * 3)) & 0xFF;
 8000f3c:	687b      	ldr	r3, [r7, #4]
 8000f3e:	685b      	ldr	r3, [r3, #4]
 8000f40:	0e19      	lsrs	r1, r3, #24
 8000f42:	68fb      	ldr	r3, [r7, #12]
 8000f44:	3303      	adds	r3, #3
 8000f46:	683a      	ldr	r2, [r7, #0]
 8000f48:	4413      	add	r3, r2
 8000f4a:	b2ca      	uxtb	r2, r1
 8000f4c:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->data.sec);
 8000f4e:	68fb      	ldr	r3, [r7, #12]
 8000f50:	3304      	adds	r3, #4
 8000f52:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (this->data.nsec >> (8 * 0)) & 0xFF;
 8000f54:	687b      	ldr	r3, [r7, #4]
 8000f56:	6899      	ldr	r1, [r3, #8]
 8000f58:	68fb      	ldr	r3, [r7, #12]
 8000f5a:	683a      	ldr	r2, [r7, #0]
 8000f5c:	4413      	add	r3, r2
 8000f5e:	b2ca      	uxtb	r2, r1
 8000f60:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->data.nsec >> (8 * 1)) & 0xFF;
 8000f62:	687b      	ldr	r3, [r7, #4]
 8000f64:	689b      	ldr	r3, [r3, #8]
 8000f66:	0a19      	lsrs	r1, r3, #8
 8000f68:	68fb      	ldr	r3, [r7, #12]
 8000f6a:	3301      	adds	r3, #1
 8000f6c:	683a      	ldr	r2, [r7, #0]
 8000f6e:	4413      	add	r3, r2
 8000f70:	b2ca      	uxtb	r2, r1
 8000f72:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->data.nsec >> (8 * 2)) & 0xFF;
 8000f74:	687b      	ldr	r3, [r7, #4]
 8000f76:	689b      	ldr	r3, [r3, #8]
 8000f78:	0c19      	lsrs	r1, r3, #16
 8000f7a:	68fb      	ldr	r3, [r7, #12]
 8000f7c:	3302      	adds	r3, #2
 8000f7e:	683a      	ldr	r2, [r7, #0]
 8000f80:	4413      	add	r3, r2
 8000f82:	b2ca      	uxtb	r2, r1
 8000f84:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->data.nsec >> (8 * 3)) & 0xFF;
 8000f86:	687b      	ldr	r3, [r7, #4]
 8000f88:	689b      	ldr	r3, [r3, #8]
 8000f8a:	0e19      	lsrs	r1, r3, #24
 8000f8c:	68fb      	ldr	r3, [r7, #12]
 8000f8e:	3303      	adds	r3, #3
 8000f90:	683a      	ldr	r2, [r7, #0]
 8000f92:	4413      	add	r3, r2
 8000f94:	b2ca      	uxtb	r2, r1
 8000f96:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->data.nsec);
 8000f98:	68fb      	ldr	r3, [r7, #12]
 8000f9a:	3304      	adds	r3, #4
 8000f9c:	60fb      	str	r3, [r7, #12]
      return offset;
 8000f9e:	68fb      	ldr	r3, [r7, #12]
    }
 8000fa0:	4618      	mov	r0, r3
 8000fa2:	3714      	adds	r7, #20
 8000fa4:	46bd      	mov	sp, r7
 8000fa6:	bc80      	pop	{r7}
 8000fa8:	4770      	bx	lr

08000faa <_ZN8std_msgs4Time11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer)
 8000faa:	b480      	push	{r7}
 8000fac:	b085      	sub	sp, #20
 8000fae:	af00      	add	r7, sp, #0
 8000fb0:	6078      	str	r0, [r7, #4]
 8000fb2:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8000fb4:	2300      	movs	r3, #0
 8000fb6:	60fb      	str	r3, [r7, #12]
      this->data.sec =  ((uint32_t) (*(inbuffer + offset)));
 8000fb8:	68fb      	ldr	r3, [r7, #12]
 8000fba:	683a      	ldr	r2, [r7, #0]
 8000fbc:	4413      	add	r3, r2
 8000fbe:	781b      	ldrb	r3, [r3, #0]
 8000fc0:	461a      	mov	r2, r3
 8000fc2:	687b      	ldr	r3, [r7, #4]
 8000fc4:	605a      	str	r2, [r3, #4]
      this->data.sec |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8000fc6:	687b      	ldr	r3, [r7, #4]
 8000fc8:	685a      	ldr	r2, [r3, #4]
 8000fca:	68fb      	ldr	r3, [r7, #12]
 8000fcc:	3301      	adds	r3, #1
 8000fce:	6839      	ldr	r1, [r7, #0]
 8000fd0:	440b      	add	r3, r1
 8000fd2:	781b      	ldrb	r3, [r3, #0]
 8000fd4:	021b      	lsls	r3, r3, #8
 8000fd6:	431a      	orrs	r2, r3
 8000fd8:	687b      	ldr	r3, [r7, #4]
 8000fda:	605a      	str	r2, [r3, #4]
      this->data.sec |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8000fdc:	687b      	ldr	r3, [r7, #4]
 8000fde:	685a      	ldr	r2, [r3, #4]
 8000fe0:	68fb      	ldr	r3, [r7, #12]
 8000fe2:	3302      	adds	r3, #2
 8000fe4:	6839      	ldr	r1, [r7, #0]
 8000fe6:	440b      	add	r3, r1
 8000fe8:	781b      	ldrb	r3, [r3, #0]
 8000fea:	041b      	lsls	r3, r3, #16
 8000fec:	431a      	orrs	r2, r3
 8000fee:	687b      	ldr	r3, [r7, #4]
 8000ff0:	605a      	str	r2, [r3, #4]
      this->data.sec |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8000ff2:	687b      	ldr	r3, [r7, #4]
 8000ff4:	685a      	ldr	r2, [r3, #4]
 8000ff6:	68fb      	ldr	r3, [r7, #12]
 8000ff8:	3303      	adds	r3, #3
 8000ffa:	6839      	ldr	r1, [r7, #0]
 8000ffc:	440b      	add	r3, r1
 8000ffe:	781b      	ldrb	r3, [r3, #0]
 8001000:	061b      	lsls	r3, r3, #24
 8001002:	431a      	orrs	r2, r3
 8001004:	687b      	ldr	r3, [r7, #4]
 8001006:	605a      	str	r2, [r3, #4]
      offset += sizeof(this->data.sec);
 8001008:	68fb      	ldr	r3, [r7, #12]
 800100a:	3304      	adds	r3, #4
 800100c:	60fb      	str	r3, [r7, #12]
      this->data.nsec =  ((uint32_t) (*(inbuffer + offset)));
 800100e:	68fb      	ldr	r3, [r7, #12]
 8001010:	683a      	ldr	r2, [r7, #0]
 8001012:	4413      	add	r3, r2
 8001014:	781b      	ldrb	r3, [r3, #0]
 8001016:	461a      	mov	r2, r3
 8001018:	687b      	ldr	r3, [r7, #4]
 800101a:	609a      	str	r2, [r3, #8]
      this->data.nsec |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 800101c:	687b      	ldr	r3, [r7, #4]
 800101e:	689a      	ldr	r2, [r3, #8]
 8001020:	68fb      	ldr	r3, [r7, #12]
 8001022:	3301      	adds	r3, #1
 8001024:	6839      	ldr	r1, [r7, #0]
 8001026:	440b      	add	r3, r1
 8001028:	781b      	ldrb	r3, [r3, #0]
 800102a:	021b      	lsls	r3, r3, #8
 800102c:	431a      	orrs	r2, r3
 800102e:	687b      	ldr	r3, [r7, #4]
 8001030:	609a      	str	r2, [r3, #8]
      this->data.nsec |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8001032:	687b      	ldr	r3, [r7, #4]
 8001034:	689a      	ldr	r2, [r3, #8]
 8001036:	68fb      	ldr	r3, [r7, #12]
 8001038:	3302      	adds	r3, #2
 800103a:	6839      	ldr	r1, [r7, #0]
 800103c:	440b      	add	r3, r1
 800103e:	781b      	ldrb	r3, [r3, #0]
 8001040:	041b      	lsls	r3, r3, #16
 8001042:	431a      	orrs	r2, r3
 8001044:	687b      	ldr	r3, [r7, #4]
 8001046:	609a      	str	r2, [r3, #8]
      this->data.nsec |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8001048:	687b      	ldr	r3, [r7, #4]
 800104a:	689a      	ldr	r2, [r3, #8]
 800104c:	68fb      	ldr	r3, [r7, #12]
 800104e:	3303      	adds	r3, #3
 8001050:	6839      	ldr	r1, [r7, #0]
 8001052:	440b      	add	r3, r1
 8001054:	781b      	ldrb	r3, [r3, #0]
 8001056:	061b      	lsls	r3, r3, #24
 8001058:	431a      	orrs	r2, r3
 800105a:	687b      	ldr	r3, [r7, #4]
 800105c:	609a      	str	r2, [r3, #8]
      offset += sizeof(this->data.nsec);
 800105e:	68fb      	ldr	r3, [r7, #12]
 8001060:	3304      	adds	r3, #4
 8001062:	60fb      	str	r3, [r7, #12]
     return offset;
 8001064:	68fb      	ldr	r3, [r7, #12]
    }
 8001066:	4618      	mov	r0, r3
 8001068:	3714      	adds	r7, #20
 800106a:	46bd      	mov	sp, r7
 800106c:	bc80      	pop	{r7}
 800106e:	4770      	bx	lr

08001070 <_ZN8std_msgs4Time7getTypeEv>:

    const char * getType(){ return "std_msgs/Time"; };
 8001070:	b480      	push	{r7}
 8001072:	b083      	sub	sp, #12
 8001074:	af00      	add	r7, sp, #0
 8001076:	6078      	str	r0, [r7, #4]
 8001078:	4b02      	ldr	r3, [pc, #8]	; (8001084 <_ZN8std_msgs4Time7getTypeEv+0x14>)
 800107a:	4618      	mov	r0, r3
 800107c:	370c      	adds	r7, #12
 800107e:	46bd      	mov	sp, r7
 8001080:	bc80      	pop	{r7}
 8001082:	4770      	bx	lr
 8001084:	08008f0c 	.word	0x08008f0c

08001088 <_ZN8std_msgs4Time6getMD5Ev>:
    const char * getMD5(){ return "cd7166c74c552c311fbcc2fe5a7bc289"; };
 8001088:	b480      	push	{r7}
 800108a:	b083      	sub	sp, #12
 800108c:	af00      	add	r7, sp, #0
 800108e:	6078      	str	r0, [r7, #4]
 8001090:	4b02      	ldr	r3, [pc, #8]	; (800109c <_ZN8std_msgs4Time6getMD5Ev+0x14>)
 8001092:	4618      	mov	r0, r3
 8001094:	370c      	adds	r7, #12
 8001096:	46bd      	mov	sp, r7
 8001098:	bc80      	pop	{r7}
 800109a:	4770      	bx	lr
 800109c:	08008f1c 	.word	0x08008f1c

080010a0 <_ZN14rosserial_msgs9TopicInfoC1Ev>:
      enum { ID_PARAMETER_REQUEST = 6 };
      enum { ID_LOG = 7 };
      enum { ID_TIME = 10 };
      enum { ID_TX_STOP = 11 };

    TopicInfo():
 80010a0:	b580      	push	{r7, lr}
 80010a2:	b082      	sub	sp, #8
 80010a4:	af00      	add	r7, sp, #0
 80010a6:	6078      	str	r0, [r7, #4]
      topic_id(0),
      topic_name(""),
      message_type(""),
      md5sum(""),
      buffer_size(0)
 80010a8:	687b      	ldr	r3, [r7, #4]
 80010aa:	4618      	mov	r0, r3
 80010ac:	f7ff fefe 	bl	8000eac <_ZN3ros3MsgC1Ev>
 80010b0:	4a0b      	ldr	r2, [pc, #44]	; (80010e0 <_ZN14rosserial_msgs9TopicInfoC1Ev+0x40>)
 80010b2:	687b      	ldr	r3, [r7, #4]
 80010b4:	601a      	str	r2, [r3, #0]
 80010b6:	687b      	ldr	r3, [r7, #4]
 80010b8:	2200      	movs	r2, #0
 80010ba:	809a      	strh	r2, [r3, #4]
 80010bc:	687b      	ldr	r3, [r7, #4]
 80010be:	4a09      	ldr	r2, [pc, #36]	; (80010e4 <_ZN14rosserial_msgs9TopicInfoC1Ev+0x44>)
 80010c0:	609a      	str	r2, [r3, #8]
 80010c2:	687b      	ldr	r3, [r7, #4]
 80010c4:	4a07      	ldr	r2, [pc, #28]	; (80010e4 <_ZN14rosserial_msgs9TopicInfoC1Ev+0x44>)
 80010c6:	60da      	str	r2, [r3, #12]
 80010c8:	687b      	ldr	r3, [r7, #4]
 80010ca:	4a06      	ldr	r2, [pc, #24]	; (80010e4 <_ZN14rosserial_msgs9TopicInfoC1Ev+0x44>)
 80010cc:	611a      	str	r2, [r3, #16]
 80010ce:	687b      	ldr	r3, [r7, #4]
 80010d0:	2200      	movs	r2, #0
 80010d2:	615a      	str	r2, [r3, #20]
    {
    }
 80010d4:	687b      	ldr	r3, [r7, #4]
 80010d6:	4618      	mov	r0, r3
 80010d8:	3708      	adds	r7, #8
 80010da:	46bd      	mov	sp, r7
 80010dc:	bd80      	pop	{r7, pc}
 80010de:	bf00      	nop
 80010e0:	080092e8 	.word	0x080092e8
 80010e4:	08008f40 	.word	0x08008f40

080010e8 <_ZNK14rosserial_msgs9TopicInfo9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const
 80010e8:	b580      	push	{r7, lr}
 80010ea:	b088      	sub	sp, #32
 80010ec:	af00      	add	r7, sp, #0
 80010ee:	6078      	str	r0, [r7, #4]
 80010f0:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 80010f2:	2300      	movs	r3, #0
 80010f4:	61fb      	str	r3, [r7, #28]
      *(outbuffer + offset + 0) = (this->topic_id >> (8 * 0)) & 0xFF;
 80010f6:	687b      	ldr	r3, [r7, #4]
 80010f8:	8899      	ldrh	r1, [r3, #4]
 80010fa:	69fb      	ldr	r3, [r7, #28]
 80010fc:	683a      	ldr	r2, [r7, #0]
 80010fe:	4413      	add	r3, r2
 8001100:	b2ca      	uxtb	r2, r1
 8001102:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->topic_id >> (8 * 1)) & 0xFF;
 8001104:	687b      	ldr	r3, [r7, #4]
 8001106:	889b      	ldrh	r3, [r3, #4]
 8001108:	0a1b      	lsrs	r3, r3, #8
 800110a:	b299      	uxth	r1, r3
 800110c:	69fb      	ldr	r3, [r7, #28]
 800110e:	3301      	adds	r3, #1
 8001110:	683a      	ldr	r2, [r7, #0]
 8001112:	4413      	add	r3, r2
 8001114:	b2ca      	uxtb	r2, r1
 8001116:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->topic_id);
 8001118:	69fb      	ldr	r3, [r7, #28]
 800111a:	3302      	adds	r3, #2
 800111c:	61fb      	str	r3, [r7, #28]
      uint32_t length_topic_name = strlen(this->topic_name);
 800111e:	687b      	ldr	r3, [r7, #4]
 8001120:	689b      	ldr	r3, [r3, #8]
 8001122:	4618      	mov	r0, r3
 8001124:	f7ff f814 	bl	8000150 <strlen>
 8001128:	61b8      	str	r0, [r7, #24]
      varToArr(outbuffer + offset, length_topic_name);
 800112a:	69fb      	ldr	r3, [r7, #28]
 800112c:	683a      	ldr	r2, [r7, #0]
 800112e:	4413      	add	r3, r2
 8001130:	69b9      	ldr	r1, [r7, #24]
 8001132:	4618      	mov	r0, r3
 8001134:	f002 fcb8 	bl	8003aa8 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 8001138:	69fb      	ldr	r3, [r7, #28]
 800113a:	3304      	adds	r3, #4
 800113c:	61fb      	str	r3, [r7, #28]
      memcpy(outbuffer + offset, this->topic_name, length_topic_name);
 800113e:	69fb      	ldr	r3, [r7, #28]
 8001140:	683a      	ldr	r2, [r7, #0]
 8001142:	18d0      	adds	r0, r2, r3
 8001144:	687b      	ldr	r3, [r7, #4]
 8001146:	689b      	ldr	r3, [r3, #8]
 8001148:	69ba      	ldr	r2, [r7, #24]
 800114a:	4619      	mov	r1, r3
 800114c:	f007 fd7e 	bl	8008c4c <memcpy>
      offset += length_topic_name;
 8001150:	69fa      	ldr	r2, [r7, #28]
 8001152:	69bb      	ldr	r3, [r7, #24]
 8001154:	4413      	add	r3, r2
 8001156:	61fb      	str	r3, [r7, #28]
      uint32_t length_message_type = strlen(this->message_type);
 8001158:	687b      	ldr	r3, [r7, #4]
 800115a:	68db      	ldr	r3, [r3, #12]
 800115c:	4618      	mov	r0, r3
 800115e:	f7fe fff7 	bl	8000150 <strlen>
 8001162:	6178      	str	r0, [r7, #20]
      varToArr(outbuffer + offset, length_message_type);
 8001164:	69fb      	ldr	r3, [r7, #28]
 8001166:	683a      	ldr	r2, [r7, #0]
 8001168:	4413      	add	r3, r2
 800116a:	6979      	ldr	r1, [r7, #20]
 800116c:	4618      	mov	r0, r3
 800116e:	f002 fc9b 	bl	8003aa8 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 8001172:	69fb      	ldr	r3, [r7, #28]
 8001174:	3304      	adds	r3, #4
 8001176:	61fb      	str	r3, [r7, #28]
      memcpy(outbuffer + offset, this->message_type, length_message_type);
 8001178:	69fb      	ldr	r3, [r7, #28]
 800117a:	683a      	ldr	r2, [r7, #0]
 800117c:	18d0      	adds	r0, r2, r3
 800117e:	687b      	ldr	r3, [r7, #4]
 8001180:	68db      	ldr	r3, [r3, #12]
 8001182:	697a      	ldr	r2, [r7, #20]
 8001184:	4619      	mov	r1, r3
 8001186:	f007 fd61 	bl	8008c4c <memcpy>
      offset += length_message_type;
 800118a:	69fa      	ldr	r2, [r7, #28]
 800118c:	697b      	ldr	r3, [r7, #20]
 800118e:	4413      	add	r3, r2
 8001190:	61fb      	str	r3, [r7, #28]
      uint32_t length_md5sum = strlen(this->md5sum);
 8001192:	687b      	ldr	r3, [r7, #4]
 8001194:	691b      	ldr	r3, [r3, #16]
 8001196:	4618      	mov	r0, r3
 8001198:	f7fe ffda 	bl	8000150 <strlen>
 800119c:	6138      	str	r0, [r7, #16]
      varToArr(outbuffer + offset, length_md5sum);
 800119e:	69fb      	ldr	r3, [r7, #28]
 80011a0:	683a      	ldr	r2, [r7, #0]
 80011a2:	4413      	add	r3, r2
 80011a4:	6939      	ldr	r1, [r7, #16]
 80011a6:	4618      	mov	r0, r3
 80011a8:	f002 fc7e 	bl	8003aa8 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 80011ac:	69fb      	ldr	r3, [r7, #28]
 80011ae:	3304      	adds	r3, #4
 80011b0:	61fb      	str	r3, [r7, #28]
      memcpy(outbuffer + offset, this->md5sum, length_md5sum);
 80011b2:	69fb      	ldr	r3, [r7, #28]
 80011b4:	683a      	ldr	r2, [r7, #0]
 80011b6:	18d0      	adds	r0, r2, r3
 80011b8:	687b      	ldr	r3, [r7, #4]
 80011ba:	691b      	ldr	r3, [r3, #16]
 80011bc:	693a      	ldr	r2, [r7, #16]
 80011be:	4619      	mov	r1, r3
 80011c0:	f007 fd44 	bl	8008c4c <memcpy>
      offset += length_md5sum;
 80011c4:	69fa      	ldr	r2, [r7, #28]
 80011c6:	693b      	ldr	r3, [r7, #16]
 80011c8:	4413      	add	r3, r2
 80011ca:	61fb      	str	r3, [r7, #28]
      union {
        int32_t real;
        uint32_t base;
      } u_buffer_size;
      u_buffer_size.real = this->buffer_size;
 80011cc:	687b      	ldr	r3, [r7, #4]
 80011ce:	695b      	ldr	r3, [r3, #20]
 80011d0:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (u_buffer_size.base >> (8 * 0)) & 0xFF;
 80011d2:	68f9      	ldr	r1, [r7, #12]
 80011d4:	69fb      	ldr	r3, [r7, #28]
 80011d6:	683a      	ldr	r2, [r7, #0]
 80011d8:	4413      	add	r3, r2
 80011da:	b2ca      	uxtb	r2, r1
 80011dc:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (u_buffer_size.base >> (8 * 1)) & 0xFF;
 80011de:	68fb      	ldr	r3, [r7, #12]
 80011e0:	0a19      	lsrs	r1, r3, #8
 80011e2:	69fb      	ldr	r3, [r7, #28]
 80011e4:	3301      	adds	r3, #1
 80011e6:	683a      	ldr	r2, [r7, #0]
 80011e8:	4413      	add	r3, r2
 80011ea:	b2ca      	uxtb	r2, r1
 80011ec:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (u_buffer_size.base >> (8 * 2)) & 0xFF;
 80011ee:	68fb      	ldr	r3, [r7, #12]
 80011f0:	0c19      	lsrs	r1, r3, #16
 80011f2:	69fb      	ldr	r3, [r7, #28]
 80011f4:	3302      	adds	r3, #2
 80011f6:	683a      	ldr	r2, [r7, #0]
 80011f8:	4413      	add	r3, r2
 80011fa:	b2ca      	uxtb	r2, r1
 80011fc:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (u_buffer_size.base >> (8 * 3)) & 0xFF;
 80011fe:	68fb      	ldr	r3, [r7, #12]
 8001200:	0e19      	lsrs	r1, r3, #24
 8001202:	69fb      	ldr	r3, [r7, #28]
 8001204:	3303      	adds	r3, #3
 8001206:	683a      	ldr	r2, [r7, #0]
 8001208:	4413      	add	r3, r2
 800120a:	b2ca      	uxtb	r2, r1
 800120c:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->buffer_size);
 800120e:	69fb      	ldr	r3, [r7, #28]
 8001210:	3304      	adds	r3, #4
 8001212:	61fb      	str	r3, [r7, #28]
      return offset;
 8001214:	69fb      	ldr	r3, [r7, #28]
    }
 8001216:	4618      	mov	r0, r3
 8001218:	3720      	adds	r7, #32
 800121a:	46bd      	mov	sp, r7
 800121c:	bd80      	pop	{r7, pc}

0800121e <_ZN14rosserial_msgs9TopicInfo11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer)
 800121e:	b580      	push	{r7, lr}
 8001220:	b08a      	sub	sp, #40	; 0x28
 8001222:	af00      	add	r7, sp, #0
 8001224:	6078      	str	r0, [r7, #4]
 8001226:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8001228:	2300      	movs	r3, #0
 800122a:	61bb      	str	r3, [r7, #24]
      this->topic_id =  ((uint16_t) (*(inbuffer + offset)));
 800122c:	69bb      	ldr	r3, [r7, #24]
 800122e:	683a      	ldr	r2, [r7, #0]
 8001230:	4413      	add	r3, r2
 8001232:	781b      	ldrb	r3, [r3, #0]
 8001234:	b29a      	uxth	r2, r3
 8001236:	687b      	ldr	r3, [r7, #4]
 8001238:	809a      	strh	r2, [r3, #4]
      this->topic_id |= ((uint16_t) (*(inbuffer + offset + 1))) << (8 * 1);
 800123a:	687b      	ldr	r3, [r7, #4]
 800123c:	889b      	ldrh	r3, [r3, #4]
 800123e:	b21a      	sxth	r2, r3
 8001240:	69bb      	ldr	r3, [r7, #24]
 8001242:	3301      	adds	r3, #1
 8001244:	6839      	ldr	r1, [r7, #0]
 8001246:	440b      	add	r3, r1
 8001248:	781b      	ldrb	r3, [r3, #0]
 800124a:	021b      	lsls	r3, r3, #8
 800124c:	b21b      	sxth	r3, r3
 800124e:	4313      	orrs	r3, r2
 8001250:	b21b      	sxth	r3, r3
 8001252:	b29a      	uxth	r2, r3
 8001254:	687b      	ldr	r3, [r7, #4]
 8001256:	809a      	strh	r2, [r3, #4]
      offset += sizeof(this->topic_id);
 8001258:	69bb      	ldr	r3, [r7, #24]
 800125a:	3302      	adds	r3, #2
 800125c:	61bb      	str	r3, [r7, #24]
      uint32_t length_topic_name;
      arrToVar(length_topic_name, (inbuffer + offset));
 800125e:	69bb      	ldr	r3, [r7, #24]
 8001260:	683a      	ldr	r2, [r7, #0]
 8001262:	441a      	add	r2, r3
 8001264:	f107 0314 	add.w	r3, r7, #20
 8001268:	4611      	mov	r1, r2
 800126a:	4618      	mov	r0, r3
 800126c:	f002 fc39 	bl	8003ae2 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 8001270:	69bb      	ldr	r3, [r7, #24]
 8001272:	3304      	adds	r3, #4
 8001274:	61bb      	str	r3, [r7, #24]
      for(unsigned int k= offset; k< offset+length_topic_name; ++k){
 8001276:	69bb      	ldr	r3, [r7, #24]
 8001278:	627b      	str	r3, [r7, #36]	; 0x24
 800127a:	69ba      	ldr	r2, [r7, #24]
 800127c:	697b      	ldr	r3, [r7, #20]
 800127e:	4413      	add	r3, r2
 8001280:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001282:	429a      	cmp	r2, r3
 8001284:	d20c      	bcs.n	80012a0 <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0x82>
          inbuffer[k-1]=inbuffer[k];
 8001286:	683a      	ldr	r2, [r7, #0]
 8001288:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800128a:	441a      	add	r2, r3
 800128c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800128e:	3b01      	subs	r3, #1
 8001290:	6839      	ldr	r1, [r7, #0]
 8001292:	440b      	add	r3, r1
 8001294:	7812      	ldrb	r2, [r2, #0]
 8001296:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_topic_name; ++k){
 8001298:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800129a:	3301      	adds	r3, #1
 800129c:	627b      	str	r3, [r7, #36]	; 0x24
 800129e:	e7ec      	b.n	800127a <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0x5c>
      }
      inbuffer[offset+length_topic_name-1]=0;
 80012a0:	69ba      	ldr	r2, [r7, #24]
 80012a2:	697b      	ldr	r3, [r7, #20]
 80012a4:	4413      	add	r3, r2
 80012a6:	3b01      	subs	r3, #1
 80012a8:	683a      	ldr	r2, [r7, #0]
 80012aa:	4413      	add	r3, r2
 80012ac:	2200      	movs	r2, #0
 80012ae:	701a      	strb	r2, [r3, #0]
      this->topic_name = (char *)(inbuffer + offset-1);
 80012b0:	69bb      	ldr	r3, [r7, #24]
 80012b2:	3b01      	subs	r3, #1
 80012b4:	683a      	ldr	r2, [r7, #0]
 80012b6:	441a      	add	r2, r3
 80012b8:	687b      	ldr	r3, [r7, #4]
 80012ba:	609a      	str	r2, [r3, #8]
      offset += length_topic_name;
 80012bc:	69ba      	ldr	r2, [r7, #24]
 80012be:	697b      	ldr	r3, [r7, #20]
 80012c0:	4413      	add	r3, r2
 80012c2:	61bb      	str	r3, [r7, #24]
      uint32_t length_message_type;
      arrToVar(length_message_type, (inbuffer + offset));
 80012c4:	69bb      	ldr	r3, [r7, #24]
 80012c6:	683a      	ldr	r2, [r7, #0]
 80012c8:	441a      	add	r2, r3
 80012ca:	f107 0310 	add.w	r3, r7, #16
 80012ce:	4611      	mov	r1, r2
 80012d0:	4618      	mov	r0, r3
 80012d2:	f002 fc06 	bl	8003ae2 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 80012d6:	69bb      	ldr	r3, [r7, #24]
 80012d8:	3304      	adds	r3, #4
 80012da:	61bb      	str	r3, [r7, #24]
      for(unsigned int k= offset; k< offset+length_message_type; ++k){
 80012dc:	69bb      	ldr	r3, [r7, #24]
 80012de:	623b      	str	r3, [r7, #32]
 80012e0:	69ba      	ldr	r2, [r7, #24]
 80012e2:	693b      	ldr	r3, [r7, #16]
 80012e4:	4413      	add	r3, r2
 80012e6:	6a3a      	ldr	r2, [r7, #32]
 80012e8:	429a      	cmp	r2, r3
 80012ea:	d20c      	bcs.n	8001306 <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0xe8>
          inbuffer[k-1]=inbuffer[k];
 80012ec:	683a      	ldr	r2, [r7, #0]
 80012ee:	6a3b      	ldr	r3, [r7, #32]
 80012f0:	441a      	add	r2, r3
 80012f2:	6a3b      	ldr	r3, [r7, #32]
 80012f4:	3b01      	subs	r3, #1
 80012f6:	6839      	ldr	r1, [r7, #0]
 80012f8:	440b      	add	r3, r1
 80012fa:	7812      	ldrb	r2, [r2, #0]
 80012fc:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_message_type; ++k){
 80012fe:	6a3b      	ldr	r3, [r7, #32]
 8001300:	3301      	adds	r3, #1
 8001302:	623b      	str	r3, [r7, #32]
 8001304:	e7ec      	b.n	80012e0 <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0xc2>
      }
      inbuffer[offset+length_message_type-1]=0;
 8001306:	69ba      	ldr	r2, [r7, #24]
 8001308:	693b      	ldr	r3, [r7, #16]
 800130a:	4413      	add	r3, r2
 800130c:	3b01      	subs	r3, #1
 800130e:	683a      	ldr	r2, [r7, #0]
 8001310:	4413      	add	r3, r2
 8001312:	2200      	movs	r2, #0
 8001314:	701a      	strb	r2, [r3, #0]
      this->message_type = (char *)(inbuffer + offset-1);
 8001316:	69bb      	ldr	r3, [r7, #24]
 8001318:	3b01      	subs	r3, #1
 800131a:	683a      	ldr	r2, [r7, #0]
 800131c:	441a      	add	r2, r3
 800131e:	687b      	ldr	r3, [r7, #4]
 8001320:	60da      	str	r2, [r3, #12]
      offset += length_message_type;
 8001322:	69ba      	ldr	r2, [r7, #24]
 8001324:	693b      	ldr	r3, [r7, #16]
 8001326:	4413      	add	r3, r2
 8001328:	61bb      	str	r3, [r7, #24]
      uint32_t length_md5sum;
      arrToVar(length_md5sum, (inbuffer + offset));
 800132a:	69bb      	ldr	r3, [r7, #24]
 800132c:	683a      	ldr	r2, [r7, #0]
 800132e:	441a      	add	r2, r3
 8001330:	f107 030c 	add.w	r3, r7, #12
 8001334:	4611      	mov	r1, r2
 8001336:	4618      	mov	r0, r3
 8001338:	f002 fbd3 	bl	8003ae2 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 800133c:	69bb      	ldr	r3, [r7, #24]
 800133e:	3304      	adds	r3, #4
 8001340:	61bb      	str	r3, [r7, #24]
      for(unsigned int k= offset; k< offset+length_md5sum; ++k){
 8001342:	69bb      	ldr	r3, [r7, #24]
 8001344:	61fb      	str	r3, [r7, #28]
 8001346:	69ba      	ldr	r2, [r7, #24]
 8001348:	68fb      	ldr	r3, [r7, #12]
 800134a:	4413      	add	r3, r2
 800134c:	69fa      	ldr	r2, [r7, #28]
 800134e:	429a      	cmp	r2, r3
 8001350:	d20c      	bcs.n	800136c <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0x14e>
          inbuffer[k-1]=inbuffer[k];
 8001352:	683a      	ldr	r2, [r7, #0]
 8001354:	69fb      	ldr	r3, [r7, #28]
 8001356:	441a      	add	r2, r3
 8001358:	69fb      	ldr	r3, [r7, #28]
 800135a:	3b01      	subs	r3, #1
 800135c:	6839      	ldr	r1, [r7, #0]
 800135e:	440b      	add	r3, r1
 8001360:	7812      	ldrb	r2, [r2, #0]
 8001362:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_md5sum; ++k){
 8001364:	69fb      	ldr	r3, [r7, #28]
 8001366:	3301      	adds	r3, #1
 8001368:	61fb      	str	r3, [r7, #28]
 800136a:	e7ec      	b.n	8001346 <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0x128>
      }
      inbuffer[offset+length_md5sum-1]=0;
 800136c:	69ba      	ldr	r2, [r7, #24]
 800136e:	68fb      	ldr	r3, [r7, #12]
 8001370:	4413      	add	r3, r2
 8001372:	3b01      	subs	r3, #1
 8001374:	683a      	ldr	r2, [r7, #0]
 8001376:	4413      	add	r3, r2
 8001378:	2200      	movs	r2, #0
 800137a:	701a      	strb	r2, [r3, #0]
      this->md5sum = (char *)(inbuffer + offset-1);
 800137c:	69bb      	ldr	r3, [r7, #24]
 800137e:	3b01      	subs	r3, #1
 8001380:	683a      	ldr	r2, [r7, #0]
 8001382:	441a      	add	r2, r3
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	611a      	str	r2, [r3, #16]
      offset += length_md5sum;
 8001388:	69ba      	ldr	r2, [r7, #24]
 800138a:	68fb      	ldr	r3, [r7, #12]
 800138c:	4413      	add	r3, r2
 800138e:	61bb      	str	r3, [r7, #24]
      union {
        int32_t real;
        uint32_t base;
      } u_buffer_size;
      u_buffer_size.base = 0;
 8001390:	2300      	movs	r3, #0
 8001392:	60bb      	str	r3, [r7, #8]
      u_buffer_size.base |= ((uint32_t) (*(inbuffer + offset + 0))) << (8 * 0);
 8001394:	68bb      	ldr	r3, [r7, #8]
 8001396:	69ba      	ldr	r2, [r7, #24]
 8001398:	6839      	ldr	r1, [r7, #0]
 800139a:	440a      	add	r2, r1
 800139c:	7812      	ldrb	r2, [r2, #0]
 800139e:	4313      	orrs	r3, r2
 80013a0:	60bb      	str	r3, [r7, #8]
      u_buffer_size.base |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 80013a2:	68ba      	ldr	r2, [r7, #8]
 80013a4:	69bb      	ldr	r3, [r7, #24]
 80013a6:	3301      	adds	r3, #1
 80013a8:	6839      	ldr	r1, [r7, #0]
 80013aa:	440b      	add	r3, r1
 80013ac:	781b      	ldrb	r3, [r3, #0]
 80013ae:	021b      	lsls	r3, r3, #8
 80013b0:	4313      	orrs	r3, r2
 80013b2:	60bb      	str	r3, [r7, #8]
      u_buffer_size.base |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 80013b4:	68ba      	ldr	r2, [r7, #8]
 80013b6:	69bb      	ldr	r3, [r7, #24]
 80013b8:	3302      	adds	r3, #2
 80013ba:	6839      	ldr	r1, [r7, #0]
 80013bc:	440b      	add	r3, r1
 80013be:	781b      	ldrb	r3, [r3, #0]
 80013c0:	041b      	lsls	r3, r3, #16
 80013c2:	4313      	orrs	r3, r2
 80013c4:	60bb      	str	r3, [r7, #8]
      u_buffer_size.base |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 80013c6:	68ba      	ldr	r2, [r7, #8]
 80013c8:	69bb      	ldr	r3, [r7, #24]
 80013ca:	3303      	adds	r3, #3
 80013cc:	6839      	ldr	r1, [r7, #0]
 80013ce:	440b      	add	r3, r1
 80013d0:	781b      	ldrb	r3, [r3, #0]
 80013d2:	061b      	lsls	r3, r3, #24
 80013d4:	4313      	orrs	r3, r2
 80013d6:	60bb      	str	r3, [r7, #8]
      this->buffer_size = u_buffer_size.real;
 80013d8:	68ba      	ldr	r2, [r7, #8]
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	615a      	str	r2, [r3, #20]
      offset += sizeof(this->buffer_size);
 80013de:	69bb      	ldr	r3, [r7, #24]
 80013e0:	3304      	adds	r3, #4
 80013e2:	61bb      	str	r3, [r7, #24]
     return offset;
 80013e4:	69bb      	ldr	r3, [r7, #24]
    }
 80013e6:	4618      	mov	r0, r3
 80013e8:	3728      	adds	r7, #40	; 0x28
 80013ea:	46bd      	mov	sp, r7
 80013ec:	bd80      	pop	{r7, pc}
	...

080013f0 <_ZN14rosserial_msgs9TopicInfo7getTypeEv>:

    const char * getType(){ return "rosserial_msgs/TopicInfo"; };
 80013f0:	b480      	push	{r7}
 80013f2:	b083      	sub	sp, #12
 80013f4:	af00      	add	r7, sp, #0
 80013f6:	6078      	str	r0, [r7, #4]
 80013f8:	4b02      	ldr	r3, [pc, #8]	; (8001404 <_ZN14rosserial_msgs9TopicInfo7getTypeEv+0x14>)
 80013fa:	4618      	mov	r0, r3
 80013fc:	370c      	adds	r7, #12
 80013fe:	46bd      	mov	sp, r7
 8001400:	bc80      	pop	{r7}
 8001402:	4770      	bx	lr
 8001404:	08008f44 	.word	0x08008f44

08001408 <_ZN14rosserial_msgs9TopicInfo6getMD5Ev>:
    const char * getMD5(){ return "0ad51f88fc44892f8c10684077646005"; };
 8001408:	b480      	push	{r7}
 800140a:	b083      	sub	sp, #12
 800140c:	af00      	add	r7, sp, #0
 800140e:	6078      	str	r0, [r7, #4]
 8001410:	4b02      	ldr	r3, [pc, #8]	; (800141c <_ZN14rosserial_msgs9TopicInfo6getMD5Ev+0x14>)
 8001412:	4618      	mov	r0, r3
 8001414:	370c      	adds	r7, #12
 8001416:	46bd      	mov	sp, r7
 8001418:	bc80      	pop	{r7}
 800141a:	4770      	bx	lr
 800141c:	08008f60 	.word	0x08008f60

08001420 <_ZN14rosserial_msgs3LogC1Ev>:
      enum { INFO = 1 };
      enum { WARN = 2 };
      enum { ERROR = 3 };
      enum { FATAL = 4 };

    Log():
 8001420:	b580      	push	{r7, lr}
 8001422:	b082      	sub	sp, #8
 8001424:	af00      	add	r7, sp, #0
 8001426:	6078      	str	r0, [r7, #4]
      level(0),
      msg("")
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	4618      	mov	r0, r3
 800142c:	f7ff fd3e 	bl	8000eac <_ZN3ros3MsgC1Ev>
 8001430:	4a06      	ldr	r2, [pc, #24]	; (800144c <_ZN14rosserial_msgs3LogC1Ev+0x2c>)
 8001432:	687b      	ldr	r3, [r7, #4]
 8001434:	601a      	str	r2, [r3, #0]
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	2200      	movs	r2, #0
 800143a:	711a      	strb	r2, [r3, #4]
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	4a04      	ldr	r2, [pc, #16]	; (8001450 <_ZN14rosserial_msgs3LogC1Ev+0x30>)
 8001440:	609a      	str	r2, [r3, #8]
    {
    }
 8001442:	687b      	ldr	r3, [r7, #4]
 8001444:	4618      	mov	r0, r3
 8001446:	3708      	adds	r7, #8
 8001448:	46bd      	mov	sp, r7
 800144a:	bd80      	pop	{r7, pc}
 800144c:	080092d0 	.word	0x080092d0
 8001450:	08008f40 	.word	0x08008f40

08001454 <_ZNK14rosserial_msgs3Log9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const
 8001454:	b580      	push	{r7, lr}
 8001456:	b084      	sub	sp, #16
 8001458:	af00      	add	r7, sp, #0
 800145a:	6078      	str	r0, [r7, #4]
 800145c:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 800145e:	2300      	movs	r3, #0
 8001460:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (this->level >> (8 * 0)) & 0xFF;
 8001462:	68fb      	ldr	r3, [r7, #12]
 8001464:	683a      	ldr	r2, [r7, #0]
 8001466:	4413      	add	r3, r2
 8001468:	687a      	ldr	r2, [r7, #4]
 800146a:	7912      	ldrb	r2, [r2, #4]
 800146c:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->level);
 800146e:	68fb      	ldr	r3, [r7, #12]
 8001470:	3301      	adds	r3, #1
 8001472:	60fb      	str	r3, [r7, #12]
      uint32_t length_msg = strlen(this->msg);
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	689b      	ldr	r3, [r3, #8]
 8001478:	4618      	mov	r0, r3
 800147a:	f7fe fe69 	bl	8000150 <strlen>
 800147e:	60b8      	str	r0, [r7, #8]
      varToArr(outbuffer + offset, length_msg);
 8001480:	68fb      	ldr	r3, [r7, #12]
 8001482:	683a      	ldr	r2, [r7, #0]
 8001484:	4413      	add	r3, r2
 8001486:	68b9      	ldr	r1, [r7, #8]
 8001488:	4618      	mov	r0, r3
 800148a:	f002 fb0d 	bl	8003aa8 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 800148e:	68fb      	ldr	r3, [r7, #12]
 8001490:	3304      	adds	r3, #4
 8001492:	60fb      	str	r3, [r7, #12]
      memcpy(outbuffer + offset, this->msg, length_msg);
 8001494:	68fb      	ldr	r3, [r7, #12]
 8001496:	683a      	ldr	r2, [r7, #0]
 8001498:	18d0      	adds	r0, r2, r3
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	689b      	ldr	r3, [r3, #8]
 800149e:	68ba      	ldr	r2, [r7, #8]
 80014a0:	4619      	mov	r1, r3
 80014a2:	f007 fbd3 	bl	8008c4c <memcpy>
      offset += length_msg;
 80014a6:	68fa      	ldr	r2, [r7, #12]
 80014a8:	68bb      	ldr	r3, [r7, #8]
 80014aa:	4413      	add	r3, r2
 80014ac:	60fb      	str	r3, [r7, #12]
      return offset;
 80014ae:	68fb      	ldr	r3, [r7, #12]
    }
 80014b0:	4618      	mov	r0, r3
 80014b2:	3710      	adds	r7, #16
 80014b4:	46bd      	mov	sp, r7
 80014b6:	bd80      	pop	{r7, pc}

080014b8 <_ZN14rosserial_msgs3Log11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer)
 80014b8:	b580      	push	{r7, lr}
 80014ba:	b086      	sub	sp, #24
 80014bc:	af00      	add	r7, sp, #0
 80014be:	6078      	str	r0, [r7, #4]
 80014c0:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 80014c2:	2300      	movs	r3, #0
 80014c4:	613b      	str	r3, [r7, #16]
      this->level =  ((uint8_t) (*(inbuffer + offset)));
 80014c6:	693b      	ldr	r3, [r7, #16]
 80014c8:	683a      	ldr	r2, [r7, #0]
 80014ca:	4413      	add	r3, r2
 80014cc:	781a      	ldrb	r2, [r3, #0]
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	711a      	strb	r2, [r3, #4]
      offset += sizeof(this->level);
 80014d2:	693b      	ldr	r3, [r7, #16]
 80014d4:	3301      	adds	r3, #1
 80014d6:	613b      	str	r3, [r7, #16]
      uint32_t length_msg;
      arrToVar(length_msg, (inbuffer + offset));
 80014d8:	693b      	ldr	r3, [r7, #16]
 80014da:	683a      	ldr	r2, [r7, #0]
 80014dc:	441a      	add	r2, r3
 80014de:	f107 030c 	add.w	r3, r7, #12
 80014e2:	4611      	mov	r1, r2
 80014e4:	4618      	mov	r0, r3
 80014e6:	f002 fafc 	bl	8003ae2 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 80014ea:	693b      	ldr	r3, [r7, #16]
 80014ec:	3304      	adds	r3, #4
 80014ee:	613b      	str	r3, [r7, #16]
      for(unsigned int k= offset; k< offset+length_msg; ++k){
 80014f0:	693b      	ldr	r3, [r7, #16]
 80014f2:	617b      	str	r3, [r7, #20]
 80014f4:	693a      	ldr	r2, [r7, #16]
 80014f6:	68fb      	ldr	r3, [r7, #12]
 80014f8:	4413      	add	r3, r2
 80014fa:	697a      	ldr	r2, [r7, #20]
 80014fc:	429a      	cmp	r2, r3
 80014fe:	d20c      	bcs.n	800151a <_ZN14rosserial_msgs3Log11deserializeEPh+0x62>
          inbuffer[k-1]=inbuffer[k];
 8001500:	683a      	ldr	r2, [r7, #0]
 8001502:	697b      	ldr	r3, [r7, #20]
 8001504:	441a      	add	r2, r3
 8001506:	697b      	ldr	r3, [r7, #20]
 8001508:	3b01      	subs	r3, #1
 800150a:	6839      	ldr	r1, [r7, #0]
 800150c:	440b      	add	r3, r1
 800150e:	7812      	ldrb	r2, [r2, #0]
 8001510:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_msg; ++k){
 8001512:	697b      	ldr	r3, [r7, #20]
 8001514:	3301      	adds	r3, #1
 8001516:	617b      	str	r3, [r7, #20]
 8001518:	e7ec      	b.n	80014f4 <_ZN14rosserial_msgs3Log11deserializeEPh+0x3c>
      }
      inbuffer[offset+length_msg-1]=0;
 800151a:	693a      	ldr	r2, [r7, #16]
 800151c:	68fb      	ldr	r3, [r7, #12]
 800151e:	4413      	add	r3, r2
 8001520:	3b01      	subs	r3, #1
 8001522:	683a      	ldr	r2, [r7, #0]
 8001524:	4413      	add	r3, r2
 8001526:	2200      	movs	r2, #0
 8001528:	701a      	strb	r2, [r3, #0]
      this->msg = (char *)(inbuffer + offset-1);
 800152a:	693b      	ldr	r3, [r7, #16]
 800152c:	3b01      	subs	r3, #1
 800152e:	683a      	ldr	r2, [r7, #0]
 8001530:	441a      	add	r2, r3
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	609a      	str	r2, [r3, #8]
      offset += length_msg;
 8001536:	693a      	ldr	r2, [r7, #16]
 8001538:	68fb      	ldr	r3, [r7, #12]
 800153a:	4413      	add	r3, r2
 800153c:	613b      	str	r3, [r7, #16]
     return offset;
 800153e:	693b      	ldr	r3, [r7, #16]
    }
 8001540:	4618      	mov	r0, r3
 8001542:	3718      	adds	r7, #24
 8001544:	46bd      	mov	sp, r7
 8001546:	bd80      	pop	{r7, pc}

08001548 <_ZN14rosserial_msgs3Log7getTypeEv>:

    const char * getType(){ return "rosserial_msgs/Log"; };
 8001548:	b480      	push	{r7}
 800154a:	b083      	sub	sp, #12
 800154c:	af00      	add	r7, sp, #0
 800154e:	6078      	str	r0, [r7, #4]
 8001550:	4b02      	ldr	r3, [pc, #8]	; (800155c <_ZN14rosserial_msgs3Log7getTypeEv+0x14>)
 8001552:	4618      	mov	r0, r3
 8001554:	370c      	adds	r7, #12
 8001556:	46bd      	mov	sp, r7
 8001558:	bc80      	pop	{r7}
 800155a:	4770      	bx	lr
 800155c:	08008f84 	.word	0x08008f84

08001560 <_ZN14rosserial_msgs3Log6getMD5Ev>:
    const char * getMD5(){ return "11abd731c25933261cd6183bd12d6295"; };
 8001560:	b480      	push	{r7}
 8001562:	b083      	sub	sp, #12
 8001564:	af00      	add	r7, sp, #0
 8001566:	6078      	str	r0, [r7, #4]
 8001568:	4b02      	ldr	r3, [pc, #8]	; (8001574 <_ZN14rosserial_msgs3Log6getMD5Ev+0x14>)
 800156a:	4618      	mov	r0, r3
 800156c:	370c      	adds	r7, #12
 800156e:	46bd      	mov	sp, r7
 8001570:	bc80      	pop	{r7}
 8001572:	4770      	bx	lr
 8001574:	08008f98 	.word	0x08008f98

08001578 <_ZN14rosserial_msgs20RequestParamResponseC1Ev>:
      uint32_t strings_length;
      typedef char* _strings_type;
      _strings_type st_strings;
      _strings_type * strings;

    RequestParamResponse():
 8001578:	b580      	push	{r7, lr}
 800157a:	b082      	sub	sp, #8
 800157c:	af00      	add	r7, sp, #0
 800157e:	6078      	str	r0, [r7, #4]
      ints_length(0), ints(NULL),
      floats_length(0), floats(NULL),
      strings_length(0), strings(NULL)
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	4618      	mov	r0, r3
 8001584:	f7ff fc92 	bl	8000eac <_ZN3ros3MsgC1Ev>
 8001588:	4a0c      	ldr	r2, [pc, #48]	; (80015bc <_ZN14rosserial_msgs20RequestParamResponseC1Ev+0x44>)
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	601a      	str	r2, [r3, #0]
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	2200      	movs	r2, #0
 8001592:	605a      	str	r2, [r3, #4]
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	2200      	movs	r2, #0
 8001598:	60da      	str	r2, [r3, #12]
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	2200      	movs	r2, #0
 800159e:	611a      	str	r2, [r3, #16]
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	2200      	movs	r2, #0
 80015a4:	619a      	str	r2, [r3, #24]
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	2200      	movs	r2, #0
 80015aa:	61da      	str	r2, [r3, #28]
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	2200      	movs	r2, #0
 80015b0:	625a      	str	r2, [r3, #36]	; 0x24
    {
    }
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	4618      	mov	r0, r3
 80015b6:	3708      	adds	r7, #8
 80015b8:	46bd      	mov	sp, r7
 80015ba:	bd80      	pop	{r7, pc}
 80015bc:	080092b8 	.word	0x080092b8

080015c0 <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const
 80015c0:	b580      	push	{r7, lr}
 80015c2:	b08a      	sub	sp, #40	; 0x28
 80015c4:	af00      	add	r7, sp, #0
 80015c6:	6078      	str	r0, [r7, #4]
 80015c8:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 80015ca:	2300      	movs	r3, #0
 80015cc:	627b      	str	r3, [r7, #36]	; 0x24
      *(outbuffer + offset + 0) = (this->ints_length >> (8 * 0)) & 0xFF;
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	6859      	ldr	r1, [r3, #4]
 80015d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015d4:	683a      	ldr	r2, [r7, #0]
 80015d6:	4413      	add	r3, r2
 80015d8:	b2ca      	uxtb	r2, r1
 80015da:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->ints_length >> (8 * 1)) & 0xFF;
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	685b      	ldr	r3, [r3, #4]
 80015e0:	0a19      	lsrs	r1, r3, #8
 80015e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015e4:	3301      	adds	r3, #1
 80015e6:	683a      	ldr	r2, [r7, #0]
 80015e8:	4413      	add	r3, r2
 80015ea:	b2ca      	uxtb	r2, r1
 80015ec:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->ints_length >> (8 * 2)) & 0xFF;
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	685b      	ldr	r3, [r3, #4]
 80015f2:	0c19      	lsrs	r1, r3, #16
 80015f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015f6:	3302      	adds	r3, #2
 80015f8:	683a      	ldr	r2, [r7, #0]
 80015fa:	4413      	add	r3, r2
 80015fc:	b2ca      	uxtb	r2, r1
 80015fe:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->ints_length >> (8 * 3)) & 0xFF;
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	685b      	ldr	r3, [r3, #4]
 8001604:	0e19      	lsrs	r1, r3, #24
 8001606:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001608:	3303      	adds	r3, #3
 800160a:	683a      	ldr	r2, [r7, #0]
 800160c:	4413      	add	r3, r2
 800160e:	b2ca      	uxtb	r2, r1
 8001610:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->ints_length);
 8001612:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001614:	3304      	adds	r3, #4
 8001616:	627b      	str	r3, [r7, #36]	; 0x24
      for( uint32_t i = 0; i < ints_length; i++){
 8001618:	2300      	movs	r3, #0
 800161a:	623b      	str	r3, [r7, #32]
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	685b      	ldr	r3, [r3, #4]
 8001620:	6a3a      	ldr	r2, [r7, #32]
 8001622:	429a      	cmp	r2, r3
 8001624:	d22b      	bcs.n	800167e <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0xbe>
      union {
        int32_t real;
        uint32_t base;
      } u_intsi;
      u_intsi.real = this->ints[i];
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	68da      	ldr	r2, [r3, #12]
 800162a:	6a3b      	ldr	r3, [r7, #32]
 800162c:	009b      	lsls	r3, r3, #2
 800162e:	4413      	add	r3, r2
 8001630:	681b      	ldr	r3, [r3, #0]
 8001632:	613b      	str	r3, [r7, #16]
      *(outbuffer + offset + 0) = (u_intsi.base >> (8 * 0)) & 0xFF;
 8001634:	6939      	ldr	r1, [r7, #16]
 8001636:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001638:	683a      	ldr	r2, [r7, #0]
 800163a:	4413      	add	r3, r2
 800163c:	b2ca      	uxtb	r2, r1
 800163e:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (u_intsi.base >> (8 * 1)) & 0xFF;
 8001640:	693b      	ldr	r3, [r7, #16]
 8001642:	0a19      	lsrs	r1, r3, #8
 8001644:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001646:	3301      	adds	r3, #1
 8001648:	683a      	ldr	r2, [r7, #0]
 800164a:	4413      	add	r3, r2
 800164c:	b2ca      	uxtb	r2, r1
 800164e:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (u_intsi.base >> (8 * 2)) & 0xFF;
 8001650:	693b      	ldr	r3, [r7, #16]
 8001652:	0c19      	lsrs	r1, r3, #16
 8001654:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001656:	3302      	adds	r3, #2
 8001658:	683a      	ldr	r2, [r7, #0]
 800165a:	4413      	add	r3, r2
 800165c:	b2ca      	uxtb	r2, r1
 800165e:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (u_intsi.base >> (8 * 3)) & 0xFF;
 8001660:	693b      	ldr	r3, [r7, #16]
 8001662:	0e19      	lsrs	r1, r3, #24
 8001664:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001666:	3303      	adds	r3, #3
 8001668:	683a      	ldr	r2, [r7, #0]
 800166a:	4413      	add	r3, r2
 800166c:	b2ca      	uxtb	r2, r1
 800166e:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->ints[i]);
 8001670:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001672:	3304      	adds	r3, #4
 8001674:	627b      	str	r3, [r7, #36]	; 0x24
      for( uint32_t i = 0; i < ints_length; i++){
 8001676:	6a3b      	ldr	r3, [r7, #32]
 8001678:	3301      	adds	r3, #1
 800167a:	623b      	str	r3, [r7, #32]
 800167c:	e7ce      	b.n	800161c <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0x5c>
      }
      *(outbuffer + offset + 0) = (this->floats_length >> (8 * 0)) & 0xFF;
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	6919      	ldr	r1, [r3, #16]
 8001682:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001684:	683a      	ldr	r2, [r7, #0]
 8001686:	4413      	add	r3, r2
 8001688:	b2ca      	uxtb	r2, r1
 800168a:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->floats_length >> (8 * 1)) & 0xFF;
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	691b      	ldr	r3, [r3, #16]
 8001690:	0a19      	lsrs	r1, r3, #8
 8001692:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001694:	3301      	adds	r3, #1
 8001696:	683a      	ldr	r2, [r7, #0]
 8001698:	4413      	add	r3, r2
 800169a:	b2ca      	uxtb	r2, r1
 800169c:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->floats_length >> (8 * 2)) & 0xFF;
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	691b      	ldr	r3, [r3, #16]
 80016a2:	0c19      	lsrs	r1, r3, #16
 80016a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016a6:	3302      	adds	r3, #2
 80016a8:	683a      	ldr	r2, [r7, #0]
 80016aa:	4413      	add	r3, r2
 80016ac:	b2ca      	uxtb	r2, r1
 80016ae:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->floats_length >> (8 * 3)) & 0xFF;
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	691b      	ldr	r3, [r3, #16]
 80016b4:	0e19      	lsrs	r1, r3, #24
 80016b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016b8:	3303      	adds	r3, #3
 80016ba:	683a      	ldr	r2, [r7, #0]
 80016bc:	4413      	add	r3, r2
 80016be:	b2ca      	uxtb	r2, r1
 80016c0:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->floats_length);
 80016c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016c4:	3304      	adds	r3, #4
 80016c6:	627b      	str	r3, [r7, #36]	; 0x24
      for( uint32_t i = 0; i < floats_length; i++){
 80016c8:	2300      	movs	r3, #0
 80016ca:	61fb      	str	r3, [r7, #28]
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	691b      	ldr	r3, [r3, #16]
 80016d0:	69fa      	ldr	r2, [r7, #28]
 80016d2:	429a      	cmp	r2, r3
 80016d4:	d22b      	bcs.n	800172e <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0x16e>
      union {
        float real;
        uint32_t base;
      } u_floatsi;
      u_floatsi.real = this->floats[i];
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	699a      	ldr	r2, [r3, #24]
 80016da:	69fb      	ldr	r3, [r7, #28]
 80016dc:	009b      	lsls	r3, r3, #2
 80016de:	4413      	add	r3, r2
 80016e0:	681b      	ldr	r3, [r3, #0]
 80016e2:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (u_floatsi.base >> (8 * 0)) & 0xFF;
 80016e4:	68f9      	ldr	r1, [r7, #12]
 80016e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016e8:	683a      	ldr	r2, [r7, #0]
 80016ea:	4413      	add	r3, r2
 80016ec:	b2ca      	uxtb	r2, r1
 80016ee:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (u_floatsi.base >> (8 * 1)) & 0xFF;
 80016f0:	68fb      	ldr	r3, [r7, #12]
 80016f2:	0a19      	lsrs	r1, r3, #8
 80016f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016f6:	3301      	adds	r3, #1
 80016f8:	683a      	ldr	r2, [r7, #0]
 80016fa:	4413      	add	r3, r2
 80016fc:	b2ca      	uxtb	r2, r1
 80016fe:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (u_floatsi.base >> (8 * 2)) & 0xFF;
 8001700:	68fb      	ldr	r3, [r7, #12]
 8001702:	0c19      	lsrs	r1, r3, #16
 8001704:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001706:	3302      	adds	r3, #2
 8001708:	683a      	ldr	r2, [r7, #0]
 800170a:	4413      	add	r3, r2
 800170c:	b2ca      	uxtb	r2, r1
 800170e:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (u_floatsi.base >> (8 * 3)) & 0xFF;
 8001710:	68fb      	ldr	r3, [r7, #12]
 8001712:	0e19      	lsrs	r1, r3, #24
 8001714:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001716:	3303      	adds	r3, #3
 8001718:	683a      	ldr	r2, [r7, #0]
 800171a:	4413      	add	r3, r2
 800171c:	b2ca      	uxtb	r2, r1
 800171e:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->floats[i]);
 8001720:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001722:	3304      	adds	r3, #4
 8001724:	627b      	str	r3, [r7, #36]	; 0x24
      for( uint32_t i = 0; i < floats_length; i++){
 8001726:	69fb      	ldr	r3, [r7, #28]
 8001728:	3301      	adds	r3, #1
 800172a:	61fb      	str	r3, [r7, #28]
 800172c:	e7ce      	b.n	80016cc <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0x10c>
      }
      *(outbuffer + offset + 0) = (this->strings_length >> (8 * 0)) & 0xFF;
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	69d9      	ldr	r1, [r3, #28]
 8001732:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001734:	683a      	ldr	r2, [r7, #0]
 8001736:	4413      	add	r3, r2
 8001738:	b2ca      	uxtb	r2, r1
 800173a:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->strings_length >> (8 * 1)) & 0xFF;
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	69db      	ldr	r3, [r3, #28]
 8001740:	0a19      	lsrs	r1, r3, #8
 8001742:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001744:	3301      	adds	r3, #1
 8001746:	683a      	ldr	r2, [r7, #0]
 8001748:	4413      	add	r3, r2
 800174a:	b2ca      	uxtb	r2, r1
 800174c:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->strings_length >> (8 * 2)) & 0xFF;
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	69db      	ldr	r3, [r3, #28]
 8001752:	0c19      	lsrs	r1, r3, #16
 8001754:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001756:	3302      	adds	r3, #2
 8001758:	683a      	ldr	r2, [r7, #0]
 800175a:	4413      	add	r3, r2
 800175c:	b2ca      	uxtb	r2, r1
 800175e:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->strings_length >> (8 * 3)) & 0xFF;
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	69db      	ldr	r3, [r3, #28]
 8001764:	0e19      	lsrs	r1, r3, #24
 8001766:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001768:	3303      	adds	r3, #3
 800176a:	683a      	ldr	r2, [r7, #0]
 800176c:	4413      	add	r3, r2
 800176e:	b2ca      	uxtb	r2, r1
 8001770:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->strings_length);
 8001772:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001774:	3304      	adds	r3, #4
 8001776:	627b      	str	r3, [r7, #36]	; 0x24
      for( uint32_t i = 0; i < strings_length; i++){
 8001778:	2300      	movs	r3, #0
 800177a:	61bb      	str	r3, [r7, #24]
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	69db      	ldr	r3, [r3, #28]
 8001780:	69ba      	ldr	r2, [r7, #24]
 8001782:	429a      	cmp	r2, r3
 8001784:	d228      	bcs.n	80017d8 <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0x218>
      uint32_t length_stringsi = strlen(this->strings[i]);
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800178a:	69bb      	ldr	r3, [r7, #24]
 800178c:	009b      	lsls	r3, r3, #2
 800178e:	4413      	add	r3, r2
 8001790:	681b      	ldr	r3, [r3, #0]
 8001792:	4618      	mov	r0, r3
 8001794:	f7fe fcdc 	bl	8000150 <strlen>
 8001798:	6178      	str	r0, [r7, #20]
      varToArr(outbuffer + offset, length_stringsi);
 800179a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800179c:	683a      	ldr	r2, [r7, #0]
 800179e:	4413      	add	r3, r2
 80017a0:	6979      	ldr	r1, [r7, #20]
 80017a2:	4618      	mov	r0, r3
 80017a4:	f002 f980 	bl	8003aa8 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 80017a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017aa:	3304      	adds	r3, #4
 80017ac:	627b      	str	r3, [r7, #36]	; 0x24
      memcpy(outbuffer + offset, this->strings[i], length_stringsi);
 80017ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017b0:	683a      	ldr	r2, [r7, #0]
 80017b2:	18d0      	adds	r0, r2, r3
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80017b8:	69bb      	ldr	r3, [r7, #24]
 80017ba:	009b      	lsls	r3, r3, #2
 80017bc:	4413      	add	r3, r2
 80017be:	681b      	ldr	r3, [r3, #0]
 80017c0:	697a      	ldr	r2, [r7, #20]
 80017c2:	4619      	mov	r1, r3
 80017c4:	f007 fa42 	bl	8008c4c <memcpy>
      offset += length_stringsi;
 80017c8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80017ca:	697b      	ldr	r3, [r7, #20]
 80017cc:	4413      	add	r3, r2
 80017ce:	627b      	str	r3, [r7, #36]	; 0x24
      for( uint32_t i = 0; i < strings_length; i++){
 80017d0:	69bb      	ldr	r3, [r7, #24]
 80017d2:	3301      	adds	r3, #1
 80017d4:	61bb      	str	r3, [r7, #24]
 80017d6:	e7d1      	b.n	800177c <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0x1bc>
      }
      return offset;
 80017d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    }
 80017da:	4618      	mov	r0, r3
 80017dc:	3728      	adds	r7, #40	; 0x28
 80017de:	46bd      	mov	sp, r7
 80017e0:	bd80      	pop	{r7, pc}

080017e2 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer)
 80017e2:	b580      	push	{r7, lr}
 80017e4:	b08e      	sub	sp, #56	; 0x38
 80017e6:	af00      	add	r7, sp, #0
 80017e8:	6078      	str	r0, [r7, #4]
 80017ea:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 80017ec:	2300      	movs	r3, #0
 80017ee:	637b      	str	r3, [r7, #52]	; 0x34
      uint32_t ints_lengthT = ((uint32_t) (*(inbuffer + offset))); 
 80017f0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80017f2:	683a      	ldr	r2, [r7, #0]
 80017f4:	4413      	add	r3, r2
 80017f6:	781b      	ldrb	r3, [r3, #0]
 80017f8:	623b      	str	r3, [r7, #32]
      ints_lengthT |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1); 
 80017fa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80017fc:	3301      	adds	r3, #1
 80017fe:	683a      	ldr	r2, [r7, #0]
 8001800:	4413      	add	r3, r2
 8001802:	781b      	ldrb	r3, [r3, #0]
 8001804:	021b      	lsls	r3, r3, #8
 8001806:	6a3a      	ldr	r2, [r7, #32]
 8001808:	4313      	orrs	r3, r2
 800180a:	623b      	str	r3, [r7, #32]
      ints_lengthT |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2); 
 800180c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800180e:	3302      	adds	r3, #2
 8001810:	683a      	ldr	r2, [r7, #0]
 8001812:	4413      	add	r3, r2
 8001814:	781b      	ldrb	r3, [r3, #0]
 8001816:	041b      	lsls	r3, r3, #16
 8001818:	6a3a      	ldr	r2, [r7, #32]
 800181a:	4313      	orrs	r3, r2
 800181c:	623b      	str	r3, [r7, #32]
      ints_lengthT |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3); 
 800181e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001820:	3303      	adds	r3, #3
 8001822:	683a      	ldr	r2, [r7, #0]
 8001824:	4413      	add	r3, r2
 8001826:	781b      	ldrb	r3, [r3, #0]
 8001828:	061b      	lsls	r3, r3, #24
 800182a:	6a3a      	ldr	r2, [r7, #32]
 800182c:	4313      	orrs	r3, r2
 800182e:	623b      	str	r3, [r7, #32]
      offset += sizeof(this->ints_length);
 8001830:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001832:	3304      	adds	r3, #4
 8001834:	637b      	str	r3, [r7, #52]	; 0x34
      if(ints_lengthT > ints_length)
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	685b      	ldr	r3, [r3, #4]
 800183a:	6a3a      	ldr	r2, [r7, #32]
 800183c:	429a      	cmp	r2, r3
 800183e:	d90a      	bls.n	8001856 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x74>
        this->ints = (int32_t*)realloc(this->ints, ints_lengthT * sizeof(int32_t));
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	68da      	ldr	r2, [r3, #12]
 8001844:	6a3b      	ldr	r3, [r7, #32]
 8001846:	009b      	lsls	r3, r3, #2
 8001848:	4619      	mov	r1, r3
 800184a:	4610      	mov	r0, r2
 800184c:	f007 fa14 	bl	8008c78 <realloc>
 8001850:	4602      	mov	r2, r0
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	60da      	str	r2, [r3, #12]
      ints_length = ints_lengthT;
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	6a3a      	ldr	r2, [r7, #32]
 800185a:	605a      	str	r2, [r3, #4]
      for( uint32_t i = 0; i < ints_length; i++){
 800185c:	2300      	movs	r3, #0
 800185e:	633b      	str	r3, [r7, #48]	; 0x30
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	685b      	ldr	r3, [r3, #4]
 8001864:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001866:	429a      	cmp	r2, r3
 8001868:	d236      	bcs.n	80018d8 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0xf6>
      union {
        int32_t real;
        uint32_t base;
      } u_st_ints;
      u_st_ints.base = 0;
 800186a:	2300      	movs	r3, #0
 800186c:	617b      	str	r3, [r7, #20]
      u_st_ints.base |= ((uint32_t) (*(inbuffer + offset + 0))) << (8 * 0);
 800186e:	697b      	ldr	r3, [r7, #20]
 8001870:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8001872:	6839      	ldr	r1, [r7, #0]
 8001874:	440a      	add	r2, r1
 8001876:	7812      	ldrb	r2, [r2, #0]
 8001878:	4313      	orrs	r3, r2
 800187a:	617b      	str	r3, [r7, #20]
      u_st_ints.base |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 800187c:	697a      	ldr	r2, [r7, #20]
 800187e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001880:	3301      	adds	r3, #1
 8001882:	6839      	ldr	r1, [r7, #0]
 8001884:	440b      	add	r3, r1
 8001886:	781b      	ldrb	r3, [r3, #0]
 8001888:	021b      	lsls	r3, r3, #8
 800188a:	4313      	orrs	r3, r2
 800188c:	617b      	str	r3, [r7, #20]
      u_st_ints.base |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 800188e:	697a      	ldr	r2, [r7, #20]
 8001890:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001892:	3302      	adds	r3, #2
 8001894:	6839      	ldr	r1, [r7, #0]
 8001896:	440b      	add	r3, r1
 8001898:	781b      	ldrb	r3, [r3, #0]
 800189a:	041b      	lsls	r3, r3, #16
 800189c:	4313      	orrs	r3, r2
 800189e:	617b      	str	r3, [r7, #20]
      u_st_ints.base |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 80018a0:	697a      	ldr	r2, [r7, #20]
 80018a2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80018a4:	3303      	adds	r3, #3
 80018a6:	6839      	ldr	r1, [r7, #0]
 80018a8:	440b      	add	r3, r1
 80018aa:	781b      	ldrb	r3, [r3, #0]
 80018ac:	061b      	lsls	r3, r3, #24
 80018ae:	4313      	orrs	r3, r2
 80018b0:	617b      	str	r3, [r7, #20]
      this->st_ints = u_st_ints.real;
 80018b2:	697a      	ldr	r2, [r7, #20]
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	609a      	str	r2, [r3, #8]
      offset += sizeof(this->st_ints);
 80018b8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80018ba:	3304      	adds	r3, #4
 80018bc:	637b      	str	r3, [r7, #52]	; 0x34
        memcpy( &(this->ints[i]), &(this->st_ints), sizeof(int32_t));
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	68da      	ldr	r2, [r3, #12]
 80018c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80018c4:	009b      	lsls	r3, r3, #2
 80018c6:	4413      	add	r3, r2
 80018c8:	687a      	ldr	r2, [r7, #4]
 80018ca:	3208      	adds	r2, #8
 80018cc:	6812      	ldr	r2, [r2, #0]
 80018ce:	601a      	str	r2, [r3, #0]
      for( uint32_t i = 0; i < ints_length; i++){
 80018d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80018d2:	3301      	adds	r3, #1
 80018d4:	633b      	str	r3, [r7, #48]	; 0x30
 80018d6:	e7c3      	b.n	8001860 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x7e>
      }
      uint32_t floats_lengthT = ((uint32_t) (*(inbuffer + offset))); 
 80018d8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80018da:	683a      	ldr	r2, [r7, #0]
 80018dc:	4413      	add	r3, r2
 80018de:	781b      	ldrb	r3, [r3, #0]
 80018e0:	61fb      	str	r3, [r7, #28]
      floats_lengthT |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1); 
 80018e2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80018e4:	3301      	adds	r3, #1
 80018e6:	683a      	ldr	r2, [r7, #0]
 80018e8:	4413      	add	r3, r2
 80018ea:	781b      	ldrb	r3, [r3, #0]
 80018ec:	021b      	lsls	r3, r3, #8
 80018ee:	69fa      	ldr	r2, [r7, #28]
 80018f0:	4313      	orrs	r3, r2
 80018f2:	61fb      	str	r3, [r7, #28]
      floats_lengthT |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2); 
 80018f4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80018f6:	3302      	adds	r3, #2
 80018f8:	683a      	ldr	r2, [r7, #0]
 80018fa:	4413      	add	r3, r2
 80018fc:	781b      	ldrb	r3, [r3, #0]
 80018fe:	041b      	lsls	r3, r3, #16
 8001900:	69fa      	ldr	r2, [r7, #28]
 8001902:	4313      	orrs	r3, r2
 8001904:	61fb      	str	r3, [r7, #28]
      floats_lengthT |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3); 
 8001906:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001908:	3303      	adds	r3, #3
 800190a:	683a      	ldr	r2, [r7, #0]
 800190c:	4413      	add	r3, r2
 800190e:	781b      	ldrb	r3, [r3, #0]
 8001910:	061b      	lsls	r3, r3, #24
 8001912:	69fa      	ldr	r2, [r7, #28]
 8001914:	4313      	orrs	r3, r2
 8001916:	61fb      	str	r3, [r7, #28]
      offset += sizeof(this->floats_length);
 8001918:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800191a:	3304      	adds	r3, #4
 800191c:	637b      	str	r3, [r7, #52]	; 0x34
      if(floats_lengthT > floats_length)
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	691b      	ldr	r3, [r3, #16]
 8001922:	69fa      	ldr	r2, [r7, #28]
 8001924:	429a      	cmp	r2, r3
 8001926:	d90a      	bls.n	800193e <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x15c>
        this->floats = (float*)realloc(this->floats, floats_lengthT * sizeof(float));
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	699a      	ldr	r2, [r3, #24]
 800192c:	69fb      	ldr	r3, [r7, #28]
 800192e:	009b      	lsls	r3, r3, #2
 8001930:	4619      	mov	r1, r3
 8001932:	4610      	mov	r0, r2
 8001934:	f007 f9a0 	bl	8008c78 <realloc>
 8001938:	4602      	mov	r2, r0
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	619a      	str	r2, [r3, #24]
      floats_length = floats_lengthT;
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	69fa      	ldr	r2, [r7, #28]
 8001942:	611a      	str	r2, [r3, #16]
      for( uint32_t i = 0; i < floats_length; i++){
 8001944:	2300      	movs	r3, #0
 8001946:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	691b      	ldr	r3, [r3, #16]
 800194c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800194e:	429a      	cmp	r2, r3
 8001950:	d236      	bcs.n	80019c0 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x1de>
      union {
        float real;
        uint32_t base;
      } u_st_floats;
      u_st_floats.base = 0;
 8001952:	2300      	movs	r3, #0
 8001954:	613b      	str	r3, [r7, #16]
      u_st_floats.base |= ((uint32_t) (*(inbuffer + offset + 0))) << (8 * 0);
 8001956:	693b      	ldr	r3, [r7, #16]
 8001958:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800195a:	6839      	ldr	r1, [r7, #0]
 800195c:	440a      	add	r2, r1
 800195e:	7812      	ldrb	r2, [r2, #0]
 8001960:	4313      	orrs	r3, r2
 8001962:	613b      	str	r3, [r7, #16]
      u_st_floats.base |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8001964:	693a      	ldr	r2, [r7, #16]
 8001966:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001968:	3301      	adds	r3, #1
 800196a:	6839      	ldr	r1, [r7, #0]
 800196c:	440b      	add	r3, r1
 800196e:	781b      	ldrb	r3, [r3, #0]
 8001970:	021b      	lsls	r3, r3, #8
 8001972:	4313      	orrs	r3, r2
 8001974:	613b      	str	r3, [r7, #16]
      u_st_floats.base |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8001976:	693a      	ldr	r2, [r7, #16]
 8001978:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800197a:	3302      	adds	r3, #2
 800197c:	6839      	ldr	r1, [r7, #0]
 800197e:	440b      	add	r3, r1
 8001980:	781b      	ldrb	r3, [r3, #0]
 8001982:	041b      	lsls	r3, r3, #16
 8001984:	4313      	orrs	r3, r2
 8001986:	613b      	str	r3, [r7, #16]
      u_st_floats.base |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8001988:	693a      	ldr	r2, [r7, #16]
 800198a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800198c:	3303      	adds	r3, #3
 800198e:	6839      	ldr	r1, [r7, #0]
 8001990:	440b      	add	r3, r1
 8001992:	781b      	ldrb	r3, [r3, #0]
 8001994:	061b      	lsls	r3, r3, #24
 8001996:	4313      	orrs	r3, r2
 8001998:	613b      	str	r3, [r7, #16]
      this->st_floats = u_st_floats.real;
 800199a:	693a      	ldr	r2, [r7, #16]
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	615a      	str	r2, [r3, #20]
      offset += sizeof(this->st_floats);
 80019a0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80019a2:	3304      	adds	r3, #4
 80019a4:	637b      	str	r3, [r7, #52]	; 0x34
        memcpy( &(this->floats[i]), &(this->st_floats), sizeof(float));
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	699a      	ldr	r2, [r3, #24]
 80019aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80019ac:	009b      	lsls	r3, r3, #2
 80019ae:	4413      	add	r3, r2
 80019b0:	687a      	ldr	r2, [r7, #4]
 80019b2:	3214      	adds	r2, #20
 80019b4:	6812      	ldr	r2, [r2, #0]
 80019b6:	601a      	str	r2, [r3, #0]
      for( uint32_t i = 0; i < floats_length; i++){
 80019b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80019ba:	3301      	adds	r3, #1
 80019bc:	62fb      	str	r3, [r7, #44]	; 0x2c
 80019be:	e7c3      	b.n	8001948 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x166>
      }
      uint32_t strings_lengthT = ((uint32_t) (*(inbuffer + offset))); 
 80019c0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80019c2:	683a      	ldr	r2, [r7, #0]
 80019c4:	4413      	add	r3, r2
 80019c6:	781b      	ldrb	r3, [r3, #0]
 80019c8:	61bb      	str	r3, [r7, #24]
      strings_lengthT |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1); 
 80019ca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80019cc:	3301      	adds	r3, #1
 80019ce:	683a      	ldr	r2, [r7, #0]
 80019d0:	4413      	add	r3, r2
 80019d2:	781b      	ldrb	r3, [r3, #0]
 80019d4:	021b      	lsls	r3, r3, #8
 80019d6:	69ba      	ldr	r2, [r7, #24]
 80019d8:	4313      	orrs	r3, r2
 80019da:	61bb      	str	r3, [r7, #24]
      strings_lengthT |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2); 
 80019dc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80019de:	3302      	adds	r3, #2
 80019e0:	683a      	ldr	r2, [r7, #0]
 80019e2:	4413      	add	r3, r2
 80019e4:	781b      	ldrb	r3, [r3, #0]
 80019e6:	041b      	lsls	r3, r3, #16
 80019e8:	69ba      	ldr	r2, [r7, #24]
 80019ea:	4313      	orrs	r3, r2
 80019ec:	61bb      	str	r3, [r7, #24]
      strings_lengthT |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3); 
 80019ee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80019f0:	3303      	adds	r3, #3
 80019f2:	683a      	ldr	r2, [r7, #0]
 80019f4:	4413      	add	r3, r2
 80019f6:	781b      	ldrb	r3, [r3, #0]
 80019f8:	061b      	lsls	r3, r3, #24
 80019fa:	69ba      	ldr	r2, [r7, #24]
 80019fc:	4313      	orrs	r3, r2
 80019fe:	61bb      	str	r3, [r7, #24]
      offset += sizeof(this->strings_length);
 8001a00:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001a02:	3304      	adds	r3, #4
 8001a04:	637b      	str	r3, [r7, #52]	; 0x34
      if(strings_lengthT > strings_length)
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	69db      	ldr	r3, [r3, #28]
 8001a0a:	69ba      	ldr	r2, [r7, #24]
 8001a0c:	429a      	cmp	r2, r3
 8001a0e:	d90a      	bls.n	8001a26 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x244>
        this->strings = (char**)realloc(this->strings, strings_lengthT * sizeof(char*));
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001a14:	69bb      	ldr	r3, [r7, #24]
 8001a16:	009b      	lsls	r3, r3, #2
 8001a18:	4619      	mov	r1, r3
 8001a1a:	4610      	mov	r0, r2
 8001a1c:	f007 f92c 	bl	8008c78 <realloc>
 8001a20:	4602      	mov	r2, r0
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	625a      	str	r2, [r3, #36]	; 0x24
      strings_length = strings_lengthT;
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	69ba      	ldr	r2, [r7, #24]
 8001a2a:	61da      	str	r2, [r3, #28]
      for( uint32_t i = 0; i < strings_length; i++){
 8001a2c:	2300      	movs	r3, #0
 8001a2e:	62bb      	str	r3, [r7, #40]	; 0x28
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	69db      	ldr	r3, [r3, #28]
 8001a34:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001a36:	429a      	cmp	r2, r3
 8001a38:	d23f      	bcs.n	8001aba <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x2d8>
      uint32_t length_st_strings;
      arrToVar(length_st_strings, (inbuffer + offset));
 8001a3a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001a3c:	683a      	ldr	r2, [r7, #0]
 8001a3e:	441a      	add	r2, r3
 8001a40:	f107 030c 	add.w	r3, r7, #12
 8001a44:	4611      	mov	r1, r2
 8001a46:	4618      	mov	r0, r3
 8001a48:	f002 f84b 	bl	8003ae2 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 8001a4c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001a4e:	3304      	adds	r3, #4
 8001a50:	637b      	str	r3, [r7, #52]	; 0x34
      for(unsigned int k= offset; k< offset+length_st_strings; ++k){
 8001a52:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001a54:	627b      	str	r3, [r7, #36]	; 0x24
 8001a56:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8001a58:	68fb      	ldr	r3, [r7, #12]
 8001a5a:	4413      	add	r3, r2
 8001a5c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001a5e:	429a      	cmp	r2, r3
 8001a60:	d20c      	bcs.n	8001a7c <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x29a>
          inbuffer[k-1]=inbuffer[k];
 8001a62:	683a      	ldr	r2, [r7, #0]
 8001a64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a66:	441a      	add	r2, r3
 8001a68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a6a:	3b01      	subs	r3, #1
 8001a6c:	6839      	ldr	r1, [r7, #0]
 8001a6e:	440b      	add	r3, r1
 8001a70:	7812      	ldrb	r2, [r2, #0]
 8001a72:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_st_strings; ++k){
 8001a74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a76:	3301      	adds	r3, #1
 8001a78:	627b      	str	r3, [r7, #36]	; 0x24
 8001a7a:	e7ec      	b.n	8001a56 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x274>
      }
      inbuffer[offset+length_st_strings-1]=0;
 8001a7c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8001a7e:	68fb      	ldr	r3, [r7, #12]
 8001a80:	4413      	add	r3, r2
 8001a82:	3b01      	subs	r3, #1
 8001a84:	683a      	ldr	r2, [r7, #0]
 8001a86:	4413      	add	r3, r2
 8001a88:	2200      	movs	r2, #0
 8001a8a:	701a      	strb	r2, [r3, #0]
      this->st_strings = (char *)(inbuffer + offset-1);
 8001a8c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001a8e:	3b01      	subs	r3, #1
 8001a90:	683a      	ldr	r2, [r7, #0]
 8001a92:	441a      	add	r2, r3
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	621a      	str	r2, [r3, #32]
      offset += length_st_strings;
 8001a98:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8001a9a:	68fb      	ldr	r3, [r7, #12]
 8001a9c:	4413      	add	r3, r2
 8001a9e:	637b      	str	r3, [r7, #52]	; 0x34
        memcpy( &(this->strings[i]), &(this->st_strings), sizeof(char*));
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001aa4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001aa6:	009b      	lsls	r3, r3, #2
 8001aa8:	4413      	add	r3, r2
 8001aaa:	687a      	ldr	r2, [r7, #4]
 8001aac:	3220      	adds	r2, #32
 8001aae:	6812      	ldr	r2, [r2, #0]
 8001ab0:	601a      	str	r2, [r3, #0]
      for( uint32_t i = 0; i < strings_length; i++){
 8001ab2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001ab4:	3301      	adds	r3, #1
 8001ab6:	62bb      	str	r3, [r7, #40]	; 0x28
 8001ab8:	e7ba      	b.n	8001a30 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x24e>
      }
     return offset;
 8001aba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    }
 8001abc:	4618      	mov	r0, r3
 8001abe:	3738      	adds	r7, #56	; 0x38
 8001ac0:	46bd      	mov	sp, r7
 8001ac2:	bd80      	pop	{r7, pc}

08001ac4 <_ZN14rosserial_msgs20RequestParamResponse7getTypeEv>:

    const char * getType(){ return REQUESTPARAM; };
 8001ac4:	b480      	push	{r7}
 8001ac6:	b083      	sub	sp, #12
 8001ac8:	af00      	add	r7, sp, #0
 8001aca:	6078      	str	r0, [r7, #4]
 8001acc:	4b02      	ldr	r3, [pc, #8]	; (8001ad8 <_ZN14rosserial_msgs20RequestParamResponse7getTypeEv+0x14>)
 8001ace:	4618      	mov	r0, r3
 8001ad0:	370c      	adds	r7, #12
 8001ad2:	46bd      	mov	sp, r7
 8001ad4:	bc80      	pop	{r7}
 8001ad6:	4770      	bx	lr
 8001ad8:	080091ac 	.word	0x080091ac

08001adc <_ZN14rosserial_msgs20RequestParamResponse6getMD5Ev>:
    const char * getMD5(){ return "9f0e98bda65981986ddf53afa7a40e49"; };
 8001adc:	b480      	push	{r7}
 8001ade:	b083      	sub	sp, #12
 8001ae0:	af00      	add	r7, sp, #0
 8001ae2:	6078      	str	r0, [r7, #4]
 8001ae4:	4b02      	ldr	r3, [pc, #8]	; (8001af0 <_ZN14rosserial_msgs20RequestParamResponse6getMD5Ev+0x14>)
 8001ae6:	4618      	mov	r0, r3
 8001ae8:	370c      	adds	r7, #12
 8001aea:	46bd      	mov	sp, r7
 8001aec:	bc80      	pop	{r7}
 8001aee:	4770      	bx	lr
 8001af0:	08008fbc 	.word	0x08008fbc

08001af4 <_ZN3ros9PublisherC1EPKcPNS_3MsgEi>:

/* Generic Publisher */
class Publisher
{
public:
  Publisher(const char * topic_name, Msg * msg, int endpoint = rosserial_msgs::TopicInfo::ID_PUBLISHER) :
 8001af4:	b480      	push	{r7}
 8001af6:	b085      	sub	sp, #20
 8001af8:	af00      	add	r7, sp, #0
 8001afa:	60f8      	str	r0, [r7, #12]
 8001afc:	60b9      	str	r1, [r7, #8]
 8001afe:	607a      	str	r2, [r7, #4]
 8001b00:	603b      	str	r3, [r7, #0]
    topic_(topic_name),
    msg_(msg),
    endpoint_(endpoint) {};
 8001b02:	68fb      	ldr	r3, [r7, #12]
 8001b04:	68ba      	ldr	r2, [r7, #8]
 8001b06:	601a      	str	r2, [r3, #0]
 8001b08:	68fb      	ldr	r3, [r7, #12]
 8001b0a:	687a      	ldr	r2, [r7, #4]
 8001b0c:	605a      	str	r2, [r3, #4]
 8001b0e:	68fb      	ldr	r3, [r7, #12]
 8001b10:	683a      	ldr	r2, [r7, #0]
 8001b12:	611a      	str	r2, [r3, #16]
 8001b14:	68fb      	ldr	r3, [r7, #12]
 8001b16:	4618      	mov	r0, r3
 8001b18:	3714      	adds	r7, #20
 8001b1a:	46bd      	mov	sp, r7
 8001b1c:	bc80      	pop	{r7}
 8001b1e:	4770      	bx	lr

08001b20 <_ZN3ros9Publisher15getEndpointTypeEv>:

  int publish(const Msg * msg)
  {
    return nh_->publish(id_, msg);
  };
  int getEndpointType()
 8001b20:	b480      	push	{r7}
 8001b22:	b083      	sub	sp, #12
 8001b24:	af00      	add	r7, sp, #0
 8001b26:	6078      	str	r0, [r7, #4]
  {
    return endpoint_;
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	691b      	ldr	r3, [r3, #16]
  }
 8001b2c:	4618      	mov	r0, r3
 8001b2e:	370c      	adds	r7, #12
 8001b30:	46bd      	mov	sp, r7
 8001b32:	bc80      	pop	{r7}
 8001b34:	4770      	bx	lr

08001b36 <_ZN11SerialClassC1ER20__UART_HandleTypeDef>:
	uint16_t tx_head = 0;
	uint16_t tx_tail = 0;
	UART_HandleTypeDef &huart;

public:
	SerialClass(UART_HandleTypeDef &huart) : huart(huart)
 8001b36:	b480      	push	{r7}
 8001b38:	b083      	sub	sp, #12
 8001b3a:	af00      	add	r7, sp, #0
 8001b3c:	6078      	str	r0, [r7, #4]
 8001b3e:	6039      	str	r1, [r7, #0]
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001b46:	2201      	movs	r2, #1
 8001b48:	701a      	strb	r2, [r3, #0]
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001b50:	3302      	adds	r3, #2
 8001b52:	2200      	movs	r2, #0
 8001b54:	801a      	strh	r2, [r3, #0]
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001b5c:	3304      	adds	r3, #4
 8001b5e:	2200      	movs	r2, #0
 8001b60:	801a      	strh	r2, [r3, #0]
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001b68:	3306      	adds	r3, #6
 8001b6a:	2200      	movs	r2, #0
 8001b6c:	801a      	strh	r2, [r3, #0]
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001b74:	3308      	adds	r3, #8
 8001b76:	683a      	ldr	r2, [r7, #0]
 8001b78:	601a      	str	r2, [r3, #0]
	{
		//this->huart = huart;
	}
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	4618      	mov	r0, r3
 8001b7e:	370c      	adds	r7, #12
 8001b80:	46bd      	mov	sp, r7
 8001b82:	bc80      	pop	{r7}
 8001b84:	4770      	bx	lr

08001b86 <_ZN11SerialClass10get_handleEv>:

	inline UART_HandleTypeDef * const get_handle(void)
 8001b86:	b480      	push	{r7}
 8001b88:	b083      	sub	sp, #12
 8001b8a:	af00      	add	r7, sp, #0
 8001b8c:	6078      	str	r0, [r7, #4]
	{
		return &huart;
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001b94:	3308      	adds	r3, #8
 8001b96:	681b      	ldr	r3, [r3, #0]
	}
 8001b98:	4618      	mov	r0, r3
 8001b9a:	370c      	adds	r7, #12
 8001b9c:	46bd      	mov	sp, r7
 8001b9e:	bc80      	pop	{r7}
 8001ba0:	4770      	bx	lr

08001ba2 <_ZN11SerialClass9start_dmaEv>:

	inline void start_dma(void)
 8001ba2:	b580      	push	{r7, lr}
 8001ba4:	b082      	sub	sp, #8
 8001ba6:	af00      	add	r7, sp, #0
 8001ba8:	6078      	str	r0, [r7, #4]
	{
		tx_cplt = true;
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001bb0:	2201      	movs	r2, #1
 8001bb2:	701a      	strb	r2, [r3, #0]
		rx_tail = 0;
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001bba:	3302      	adds	r3, #2
 8001bbc:	2200      	movs	r2, #0
 8001bbe:	801a      	strh	r2, [r3, #0]
		HAL_UART_Receive_DMA(&huart, (uint8_t *) rx_buf, BUF_SIZE);
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001bc6:	3308      	adds	r3, #8
 8001bc8:	6818      	ldr	r0, [r3, #0]
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001bd0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001bd4:	4619      	mov	r1, r3
 8001bd6:	f005 ffd9 	bl	8007b8c <HAL_UART_Receive_DMA>
	}
 8001bda:	bf00      	nop
 8001bdc:	3708      	adds	r7, #8
 8001bde:	46bd      	mov	sp, r7
 8001be0:	bd80      	pop	{r7, pc}

08001be2 <_ZN11SerialClass4readEv>:



	inline int read(void)
 8001be2:	b480      	push	{r7}
 8001be4:	b085      	sub	sp, #20
 8001be6:	af00      	add	r7, sp, #0
 8001be8:	6078      	str	r0, [r7, #4]
	{
		uint16_t rx_head = (BUF_SIZE - huart.hdmarx->Instance->CNDTR)
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001bf0:	3308      	adds	r3, #8
 8001bf2:	681b      	ldr	r3, [r3, #0]
 8001bf4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001bf6:	681b      	ldr	r3, [r3, #0]
 8001bf8:	685b      	ldr	r3, [r3, #4]
 8001bfa:	b29b      	uxth	r3, r3
 8001bfc:	f5c3 6300 	rsb	r3, r3, #2048	; 0x800
 8001c00:	b29b      	uxth	r3, r3
				& buf_mask;
 8001c02:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001c06:	81fb      	strh	r3, [r7, #14]
		if (rx_tail == rx_head)
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001c0e:	3302      	adds	r3, #2
 8001c10:	881b      	ldrh	r3, [r3, #0]
 8001c12:	89fa      	ldrh	r2, [r7, #14]
 8001c14:	429a      	cmp	r2, r3
 8001c16:	d102      	bne.n	8001c1e <_ZN11SerialClass4readEv+0x3c>
		{
			return -1;
 8001c18:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001c1c:	e01e      	b.n	8001c5c <_ZN11SerialClass4readEv+0x7a>
		}

		int c = (int) rx_buf[rx_tail++];
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001c24:	3302      	adds	r3, #2
 8001c26:	881a      	ldrh	r2, [r3, #0]
 8001c28:	1c53      	adds	r3, r2, #1
 8001c2a:	b299      	uxth	r1, r3
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001c32:	3302      	adds	r3, #2
 8001c34:	8019      	strh	r1, [r3, #0]
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	4413      	add	r3, r2
 8001c3a:	f893 3800 	ldrb.w	r3, [r3, #2048]	; 0x800
 8001c3e:	60bb      	str	r3, [r7, #8]
		rx_tail &= buf_mask;
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001c46:	3302      	adds	r3, #2
 8001c48:	881b      	ldrh	r3, [r3, #0]
 8001c4a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001c4e:	b29a      	uxth	r2, r3
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001c56:	3302      	adds	r3, #2
 8001c58:	801a      	strh	r2, [r3, #0]
		return c;
 8001c5a:	68bb      	ldr	r3, [r7, #8]
	}
 8001c5c:	4618      	mov	r0, r3
 8001c5e:	3714      	adds	r7, #20
 8001c60:	46bd      	mov	sp, r7
 8001c62:	bc80      	pop	{r7}
 8001c64:	4770      	bx	lr

08001c66 <_ZN11SerialClass5writeEPKhi>:

	inline void write(const uint8_t * const c, const int length)
 8001c66:	b580      	push	{r7, lr}
 8001c68:	b086      	sub	sp, #24
 8001c6a:	af00      	add	r7, sp, #0
 8001c6c:	60f8      	str	r0, [r7, #12]
 8001c6e:	60b9      	str	r1, [r7, #8]
 8001c70:	607a      	str	r2, [r7, #4]
	{
		if (length > BUF_SIZE || length < 1)
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001c78:	dc33      	bgt.n	8001ce2 <_ZN11SerialClass5writeEPKhi+0x7c>
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	2b00      	cmp	r3, #0
 8001c7e:	dd30      	ble.n	8001ce2 <_ZN11SerialClass5writeEPKhi+0x7c>
		{
			return;
		}

		while(!tx_cplt)
 8001c80:	68fb      	ldr	r3, [r7, #12]
 8001c82:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001c86:	781b      	ldrb	r3, [r3, #0]
 8001c88:	2b00      	cmp	r3, #0
 8001c8a:	d100      	bne.n	8001c8e <_ZN11SerialClass5writeEPKhi+0x28>
 8001c8c:	e7f8      	b.n	8001c80 <_ZN11SerialClass5writeEPKhi+0x1a>
		{

		}

		for (int i = 0; i < length; i++)
 8001c8e:	2300      	movs	r3, #0
 8001c90:	617b      	str	r3, [r7, #20]
 8001c92:	697a      	ldr	r2, [r7, #20]
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	429a      	cmp	r2, r3
 8001c98:	da0c      	bge.n	8001cb4 <_ZN11SerialClass5writeEPKhi+0x4e>
		{
			tx_buf[i] = c[i];
 8001c9a:	697b      	ldr	r3, [r7, #20]
 8001c9c:	68ba      	ldr	r2, [r7, #8]
 8001c9e:	4413      	add	r3, r2
 8001ca0:	7819      	ldrb	r1, [r3, #0]
 8001ca2:	68fa      	ldr	r2, [r7, #12]
 8001ca4:	697b      	ldr	r3, [r7, #20]
 8001ca6:	4413      	add	r3, r2
 8001ca8:	460a      	mov	r2, r1
 8001caa:	701a      	strb	r2, [r3, #0]
		for (int i = 0; i < length; i++)
 8001cac:	697b      	ldr	r3, [r7, #20]
 8001cae:	3301      	adds	r3, #1
 8001cb0:	617b      	str	r3, [r7, #20]
 8001cb2:	e7ee      	b.n	8001c92 <_ZN11SerialClass5writeEPKhi+0x2c>
		}

		if(tx_cplt)
 8001cb4:	68fb      	ldr	r3, [r7, #12]
 8001cb6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001cba:	781b      	ldrb	r3, [r3, #0]
 8001cbc:	2b00      	cmp	r3, #0
 8001cbe:	d011      	beq.n	8001ce4 <_ZN11SerialClass5writeEPKhi+0x7e>
		{
			tx_cplt = false;
 8001cc0:	68fb      	ldr	r3, [r7, #12]
 8001cc2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001cc6:	2200      	movs	r2, #0
 8001cc8:	701a      	strb	r2, [r3, #0]
			HAL_UART_Transmit_DMA(&huart, tx_buf, length);
 8001cca:	68fb      	ldr	r3, [r7, #12]
 8001ccc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001cd0:	3308      	adds	r3, #8
 8001cd2:	681b      	ldr	r3, [r3, #0]
 8001cd4:	68f9      	ldr	r1, [r7, #12]
 8001cd6:	687a      	ldr	r2, [r7, #4]
 8001cd8:	b292      	uxth	r2, r2
 8001cda:	4618      	mov	r0, r3
 8001cdc:	f005 feea 	bl	8007ab4 <HAL_UART_Transmit_DMA>
 8001ce0:	e000      	b.n	8001ce4 <_ZN11SerialClass5writeEPKhi+0x7e>
			return;
 8001ce2:	bf00      	nop
		}
	}
 8001ce4:	3718      	adds	r7, #24
 8001ce6:	46bd      	mov	sp, r7
 8001ce8:	bd80      	pop	{r7, pc}

08001cea <_ZN11SerialClass16tx_cplt_callbackEv>:

	inline void tx_cplt_callback(void)
 8001cea:	b480      	push	{r7}
 8001cec:	b083      	sub	sp, #12
 8001cee:	af00      	add	r7, sp, #0
 8001cf0:	6078      	str	r0, [r7, #4]
	{
		tx_cplt = true;
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001cf8:	2201      	movs	r2, #1
 8001cfa:	701a      	strb	r2, [r3, #0]
	}
 8001cfc:	bf00      	nop
 8001cfe:	370c      	adds	r7, #12
 8001d00:	46bd      	mov	sp, r7
 8001d02:	bc80      	pop	{r7}
 8001d04:	4770      	bx	lr

08001d06 <_ZN11SerialClass10reset_rbufEv>:

    inline void reset_rbuf(void){
 8001d06:	b580      	push	{r7, lr}
 8001d08:	b082      	sub	sp, #8
 8001d0a:	af00      	add	r7, sp, #0
 8001d0c:	6078      	str	r0, [r7, #4]
      HAL_UART_Receive_DMA(&huart, (uint8_t *) rx_buf, BUF_SIZE);
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001d14:	3308      	adds	r3, #8
 8001d16:	6818      	ldr	r0, [r3, #0]
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001d1e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001d22:	4619      	mov	r1, r3
 8001d24:	f005 ff32 	bl	8007b8c <HAL_UART_Receive_DMA>
    }
 8001d28:	bf00      	nop
 8001d2a:	3708      	adds	r7, #8
 8001d2c:	46bd      	mov	sp, r7
 8001d2e:	bd80      	pop	{r7, pc}

08001d30 <HAL_UART_TxCpltCallback>:
SerialClass serial(huart1);
//SerialClass serial(huart2);
//SerialClass serial(huart3);

extern "C" void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8001d30:	b590      	push	{r4, r7, lr}
 8001d32:	b083      	sub	sp, #12
 8001d34:	af00      	add	r7, sp, #0
 8001d36:	6078      	str	r0, [r7, #4]
//	HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);

	// comparing pointer
	if (huart->Instance == serial.get_handle()->Instance)
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	681c      	ldr	r4, [r3, #0]
 8001d3c:	4809      	ldr	r0, [pc, #36]	; (8001d64 <HAL_UART_TxCpltCallback+0x34>)
 8001d3e:	f7ff ff22 	bl	8001b86 <_ZN11SerialClass10get_handleEv>
 8001d42:	4603      	mov	r3, r0
 8001d44:	681b      	ldr	r3, [r3, #0]
 8001d46:	429c      	cmp	r4, r3
 8001d48:	bf0c      	ite	eq
 8001d4a:	2301      	moveq	r3, #1
 8001d4c:	2300      	movne	r3, #0
 8001d4e:	b2db      	uxtb	r3, r3
 8001d50:	2b00      	cmp	r3, #0
 8001d52:	d002      	beq.n	8001d5a <HAL_UART_TxCpltCallback+0x2a>
	{
		serial.tx_cplt_callback();
 8001d54:	4803      	ldr	r0, [pc, #12]	; (8001d64 <HAL_UART_TxCpltCallback+0x34>)
 8001d56:	f7ff ffc8 	bl	8001cea <_ZN11SerialClass16tx_cplt_callbackEv>
//		HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);

	}
}
 8001d5a:	bf00      	nop
 8001d5c:	370c      	adds	r7, #12
 8001d5e:	46bd      	mov	sp, r7
 8001d60:	bd90      	pop	{r4, r7, pc}
 8001d62:	bf00      	nop
 8001d64:	20000094 	.word	0x20000094

08001d68 <HAL_UART_RxCpltCallback>:

extern "C" void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8001d68:	b580      	push	{r7, lr}
 8001d6a:	b082      	sub	sp, #8
 8001d6c:	af00      	add	r7, sp, #0
 8001d6e:	6078      	str	r0, [r7, #4]
	serial.reset_rbuf();
 8001d70:	4805      	ldr	r0, [pc, #20]	; (8001d88 <HAL_UART_RxCpltCallback+0x20>)
 8001d72:	f7ff ffc8 	bl	8001d06 <_ZN11SerialClass10reset_rbufEv>
	HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
 8001d76:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001d7a:	4804      	ldr	r0, [pc, #16]	; (8001d8c <HAL_UART_RxCpltCallback+0x24>)
 8001d7c:	f004 fa3f 	bl	80061fe <HAL_GPIO_TogglePin>

}
 8001d80:	bf00      	nop
 8001d82:	3708      	adds	r7, #8
 8001d84:	46bd      	mov	sp, r7
 8001d86:	bd80      	pop	{r7, pc}
 8001d88:	20000094 	.word	0x20000094
 8001d8c:	40011000 	.word	0x40011000

08001d90 <_ZN13STM32HardwareC1Ev>:
#include "SerialClass.h"

class STM32Hardware
{
public:
	STM32Hardware() :
 8001d90:	b480      	push	{r7}
 8001d92:	b083      	sub	sp, #12
 8001d94:	af00      	add	r7, sp, #0
 8001d96:	6078      	str	r0, [r7, #4]
			com(&serial)
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	4a04      	ldr	r2, [pc, #16]	; (8001dac <_ZN13STM32HardwareC1Ev+0x1c>)
 8001d9c:	601a      	str	r2, [r3, #0]
	{

	}
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	4618      	mov	r0, r3
 8001da2:	370c      	adds	r7, #12
 8001da4:	46bd      	mov	sp, r7
 8001da6:	bc80      	pop	{r7}
 8001da8:	4770      	bx	lr
 8001daa:	bf00      	nop
 8001dac:	20000094 	.word	0x20000094

08001db0 <_ZN13STM32Hardware4initEv>:

	void init()
 8001db0:	b580      	push	{r7, lr}
 8001db2:	b082      	sub	sp, #8
 8001db4:	af00      	add	r7, sp, #0
 8001db6:	6078      	str	r0, [r7, #4]
	{
		com->start_dma();
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	681b      	ldr	r3, [r3, #0]
 8001dbc:	4618      	mov	r0, r3
 8001dbe:	f7ff fef0 	bl	8001ba2 <_ZN11SerialClass9start_dmaEv>
	}
 8001dc2:	bf00      	nop
 8001dc4:	3708      	adds	r7, #8
 8001dc6:	46bd      	mov	sp, r7
 8001dc8:	bd80      	pop	{r7, pc}

08001dca <_ZN13STM32Hardware4readEv>:

	int read()
 8001dca:	b580      	push	{r7, lr}
 8001dcc:	b082      	sub	sp, #8
 8001dce:	af00      	add	r7, sp, #0
 8001dd0:	6078      	str	r0, [r7, #4]
	{
		return com->read();
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	681b      	ldr	r3, [r3, #0]
 8001dd6:	4618      	mov	r0, r3
 8001dd8:	f7ff ff03 	bl	8001be2 <_ZN11SerialClass4readEv>
 8001ddc:	4603      	mov	r3, r0
	}
 8001dde:	4618      	mov	r0, r3
 8001de0:	3708      	adds	r7, #8
 8001de2:	46bd      	mov	sp, r7
 8001de4:	bd80      	pop	{r7, pc}

08001de6 <_ZN13STM32Hardware5writeEPhi>:

	void write(uint8_t* data, int length)
 8001de6:	b580      	push	{r7, lr}
 8001de8:	b084      	sub	sp, #16
 8001dea:	af00      	add	r7, sp, #0
 8001dec:	60f8      	str	r0, [r7, #12]
 8001dee:	60b9      	str	r1, [r7, #8]
 8001df0:	607a      	str	r2, [r7, #4]
	{
		com->write(data, length);
 8001df2:	68fb      	ldr	r3, [r7, #12]
 8001df4:	681b      	ldr	r3, [r3, #0]
 8001df6:	687a      	ldr	r2, [r7, #4]
 8001df8:	68b9      	ldr	r1, [r7, #8]
 8001dfa:	4618      	mov	r0, r3
 8001dfc:	f7ff ff33 	bl	8001c66 <_ZN11SerialClass5writeEPKhi>
	}
 8001e00:	bf00      	nop
 8001e02:	3710      	adds	r7, #16
 8001e04:	46bd      	mov	sp, r7
 8001e06:	bd80      	pop	{r7, pc}

08001e08 <_ZN13STM32Hardware4timeEv>:

	unsigned long time()
 8001e08:	b580      	push	{r7, lr}
 8001e0a:	b082      	sub	sp, #8
 8001e0c:	af00      	add	r7, sp, #0
 8001e0e:	6078      	str	r0, [r7, #4]
	{
		return HAL_GetTick();
 8001e10:	f003 f80e 	bl	8004e30 <HAL_GetTick>
 8001e14:	4603      	mov	r3, r0
	}
 8001e16:	4618      	mov	r0, r3
 8001e18:	3708      	adds	r7, #8
 8001e1a:	46bd      	mov	sp, r7
 8001e1c:	bd80      	pop	{r7, pc}
	...

08001e20 <_ZN8std_msgs6StringC1Ev>:
  {
    public:
      typedef const char* _data_type;
      _data_type data;

    String():
 8001e20:	b580      	push	{r7, lr}
 8001e22:	b082      	sub	sp, #8
 8001e24:	af00      	add	r7, sp, #0
 8001e26:	6078      	str	r0, [r7, #4]
      data("")
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	4618      	mov	r0, r3
 8001e2c:	f7ff f83e 	bl	8000eac <_ZN3ros3MsgC1Ev>
 8001e30:	4a05      	ldr	r2, [pc, #20]	; (8001e48 <_ZN8std_msgs6StringC1Ev+0x28>)
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	601a      	str	r2, [r3, #0]
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	4a04      	ldr	r2, [pc, #16]	; (8001e4c <_ZN8std_msgs6StringC1Ev+0x2c>)
 8001e3a:	605a      	str	r2, [r3, #4]
    {
    }
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	4618      	mov	r0, r3
 8001e40:	3708      	adds	r7, #8
 8001e42:	46bd      	mov	sp, r7
 8001e44:	bd80      	pop	{r7, pc}
 8001e46:	bf00      	nop
 8001e48:	08009274 	.word	0x08009274
 8001e4c:	08008f40 	.word	0x08008f40

08001e50 <_ZNK8std_msgs6String9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const
 8001e50:	b580      	push	{r7, lr}
 8001e52:	b084      	sub	sp, #16
 8001e54:	af00      	add	r7, sp, #0
 8001e56:	6078      	str	r0, [r7, #4]
 8001e58:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8001e5a:	2300      	movs	r3, #0
 8001e5c:	60fb      	str	r3, [r7, #12]
      uint32_t length_data = strlen(this->data);
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	685b      	ldr	r3, [r3, #4]
 8001e62:	4618      	mov	r0, r3
 8001e64:	f7fe f974 	bl	8000150 <strlen>
 8001e68:	60b8      	str	r0, [r7, #8]
      varToArr(outbuffer + offset, length_data);
 8001e6a:	68fb      	ldr	r3, [r7, #12]
 8001e6c:	683a      	ldr	r2, [r7, #0]
 8001e6e:	4413      	add	r3, r2
 8001e70:	68b9      	ldr	r1, [r7, #8]
 8001e72:	4618      	mov	r0, r3
 8001e74:	f001 fe18 	bl	8003aa8 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 8001e78:	68fb      	ldr	r3, [r7, #12]
 8001e7a:	3304      	adds	r3, #4
 8001e7c:	60fb      	str	r3, [r7, #12]
      memcpy(outbuffer + offset, this->data, length_data);
 8001e7e:	68fb      	ldr	r3, [r7, #12]
 8001e80:	683a      	ldr	r2, [r7, #0]
 8001e82:	18d0      	adds	r0, r2, r3
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	685b      	ldr	r3, [r3, #4]
 8001e88:	68ba      	ldr	r2, [r7, #8]
 8001e8a:	4619      	mov	r1, r3
 8001e8c:	f006 fede 	bl	8008c4c <memcpy>
      offset += length_data;
 8001e90:	68fa      	ldr	r2, [r7, #12]
 8001e92:	68bb      	ldr	r3, [r7, #8]
 8001e94:	4413      	add	r3, r2
 8001e96:	60fb      	str	r3, [r7, #12]
      return offset;
 8001e98:	68fb      	ldr	r3, [r7, #12]
    }
 8001e9a:	4618      	mov	r0, r3
 8001e9c:	3710      	adds	r7, #16
 8001e9e:	46bd      	mov	sp, r7
 8001ea0:	bd80      	pop	{r7, pc}

08001ea2 <_ZN8std_msgs6String11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer)
 8001ea2:	b580      	push	{r7, lr}
 8001ea4:	b086      	sub	sp, #24
 8001ea6:	af00      	add	r7, sp, #0
 8001ea8:	6078      	str	r0, [r7, #4]
 8001eaa:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8001eac:	2300      	movs	r3, #0
 8001eae:	613b      	str	r3, [r7, #16]
      uint32_t length_data;
      arrToVar(length_data, (inbuffer + offset));
 8001eb0:	693b      	ldr	r3, [r7, #16]
 8001eb2:	683a      	ldr	r2, [r7, #0]
 8001eb4:	441a      	add	r2, r3
 8001eb6:	f107 030c 	add.w	r3, r7, #12
 8001eba:	4611      	mov	r1, r2
 8001ebc:	4618      	mov	r0, r3
 8001ebe:	f001 fe10 	bl	8003ae2 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 8001ec2:	693b      	ldr	r3, [r7, #16]
 8001ec4:	3304      	adds	r3, #4
 8001ec6:	613b      	str	r3, [r7, #16]
      for(unsigned int k= offset; k< offset+length_data; ++k){
 8001ec8:	693b      	ldr	r3, [r7, #16]
 8001eca:	617b      	str	r3, [r7, #20]
 8001ecc:	693a      	ldr	r2, [r7, #16]
 8001ece:	68fb      	ldr	r3, [r7, #12]
 8001ed0:	4413      	add	r3, r2
 8001ed2:	697a      	ldr	r2, [r7, #20]
 8001ed4:	429a      	cmp	r2, r3
 8001ed6:	d20c      	bcs.n	8001ef2 <_ZN8std_msgs6String11deserializeEPh+0x50>
          inbuffer[k-1]=inbuffer[k];
 8001ed8:	683a      	ldr	r2, [r7, #0]
 8001eda:	697b      	ldr	r3, [r7, #20]
 8001edc:	441a      	add	r2, r3
 8001ede:	697b      	ldr	r3, [r7, #20]
 8001ee0:	3b01      	subs	r3, #1
 8001ee2:	6839      	ldr	r1, [r7, #0]
 8001ee4:	440b      	add	r3, r1
 8001ee6:	7812      	ldrb	r2, [r2, #0]
 8001ee8:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_data; ++k){
 8001eea:	697b      	ldr	r3, [r7, #20]
 8001eec:	3301      	adds	r3, #1
 8001eee:	617b      	str	r3, [r7, #20]
 8001ef0:	e7ec      	b.n	8001ecc <_ZN8std_msgs6String11deserializeEPh+0x2a>
      }
      inbuffer[offset+length_data-1]=0;
 8001ef2:	693a      	ldr	r2, [r7, #16]
 8001ef4:	68fb      	ldr	r3, [r7, #12]
 8001ef6:	4413      	add	r3, r2
 8001ef8:	3b01      	subs	r3, #1
 8001efa:	683a      	ldr	r2, [r7, #0]
 8001efc:	4413      	add	r3, r2
 8001efe:	2200      	movs	r2, #0
 8001f00:	701a      	strb	r2, [r3, #0]
      this->data = (char *)(inbuffer + offset-1);
 8001f02:	693b      	ldr	r3, [r7, #16]
 8001f04:	3b01      	subs	r3, #1
 8001f06:	683a      	ldr	r2, [r7, #0]
 8001f08:	441a      	add	r2, r3
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	605a      	str	r2, [r3, #4]
      offset += length_data;
 8001f0e:	693a      	ldr	r2, [r7, #16]
 8001f10:	68fb      	ldr	r3, [r7, #12]
 8001f12:	4413      	add	r3, r2
 8001f14:	613b      	str	r3, [r7, #16]
     return offset;
 8001f16:	693b      	ldr	r3, [r7, #16]
    }
 8001f18:	4618      	mov	r0, r3
 8001f1a:	3718      	adds	r7, #24
 8001f1c:	46bd      	mov	sp, r7
 8001f1e:	bd80      	pop	{r7, pc}

08001f20 <_ZN8std_msgs6String7getTypeEv>:

    const char * getType(){ return "std_msgs/String"; };
 8001f20:	b480      	push	{r7}
 8001f22:	b083      	sub	sp, #12
 8001f24:	af00      	add	r7, sp, #0
 8001f26:	6078      	str	r0, [r7, #4]
 8001f28:	4b02      	ldr	r3, [pc, #8]	; (8001f34 <_ZN8std_msgs6String7getTypeEv+0x14>)
 8001f2a:	4618      	mov	r0, r3
 8001f2c:	370c      	adds	r7, #12
 8001f2e:	46bd      	mov	sp, r7
 8001f30:	bc80      	pop	{r7}
 8001f32:	4770      	bx	lr
 8001f34:	08008fe0 	.word	0x08008fe0

08001f38 <_ZN8std_msgs6String6getMD5Ev>:
    const char * getMD5(){ return "992ce8a1687cec8c8bd883ec73ca41d1"; };
 8001f38:	b480      	push	{r7}
 8001f3a:	b083      	sub	sp, #12
 8001f3c:	af00      	add	r7, sp, #0
 8001f3e:	6078      	str	r0, [r7, #4]
 8001f40:	4b02      	ldr	r3, [pc, #8]	; (8001f4c <_ZN8std_msgs6String6getMD5Ev+0x14>)
 8001f42:	4618      	mov	r0, r3
 8001f44:	370c      	adds	r7, #12
 8001f46:	46bd      	mov	sp, r7
 8001f48:	bc80      	pop	{r7}
 8001f4a:	4770      	bx	lr
 8001f4c:	08008ff0 	.word	0x08008ff0

08001f50 <_ZN8std_msgs7Float32C1Ev>:
  {
    public:
      typedef float _data_type;
      _data_type data;

    Float32():
 8001f50:	b580      	push	{r7, lr}
 8001f52:	b082      	sub	sp, #8
 8001f54:	af00      	add	r7, sp, #0
 8001f56:	6078      	str	r0, [r7, #4]
      data(0)
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	4618      	mov	r0, r3
 8001f5c:	f7fe ffa6 	bl	8000eac <_ZN3ros3MsgC1Ev>
 8001f60:	4a05      	ldr	r2, [pc, #20]	; (8001f78 <_ZN8std_msgs7Float32C1Ev+0x28>)
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	601a      	str	r2, [r3, #0]
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	f04f 0200 	mov.w	r2, #0
 8001f6c:	605a      	str	r2, [r3, #4]
    {
    }
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	4618      	mov	r0, r3
 8001f72:	3708      	adds	r7, #8
 8001f74:	46bd      	mov	sp, r7
 8001f76:	bd80      	pop	{r7, pc}
 8001f78:	0800925c 	.word	0x0800925c

08001f7c <_ZNK8std_msgs7Float329serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const
 8001f7c:	b480      	push	{r7}
 8001f7e:	b085      	sub	sp, #20
 8001f80:	af00      	add	r7, sp, #0
 8001f82:	6078      	str	r0, [r7, #4]
 8001f84:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8001f86:	2300      	movs	r3, #0
 8001f88:	60fb      	str	r3, [r7, #12]
      union {
        float real;
        uint32_t base;
      } u_data;
      u_data.real = this->data;
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	685b      	ldr	r3, [r3, #4]
 8001f8e:	60bb      	str	r3, [r7, #8]
      *(outbuffer + offset + 0) = (u_data.base >> (8 * 0)) & 0xFF;
 8001f90:	68b9      	ldr	r1, [r7, #8]
 8001f92:	68fb      	ldr	r3, [r7, #12]
 8001f94:	683a      	ldr	r2, [r7, #0]
 8001f96:	4413      	add	r3, r2
 8001f98:	b2ca      	uxtb	r2, r1
 8001f9a:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (u_data.base >> (8 * 1)) & 0xFF;
 8001f9c:	68bb      	ldr	r3, [r7, #8]
 8001f9e:	0a19      	lsrs	r1, r3, #8
 8001fa0:	68fb      	ldr	r3, [r7, #12]
 8001fa2:	3301      	adds	r3, #1
 8001fa4:	683a      	ldr	r2, [r7, #0]
 8001fa6:	4413      	add	r3, r2
 8001fa8:	b2ca      	uxtb	r2, r1
 8001faa:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (u_data.base >> (8 * 2)) & 0xFF;
 8001fac:	68bb      	ldr	r3, [r7, #8]
 8001fae:	0c19      	lsrs	r1, r3, #16
 8001fb0:	68fb      	ldr	r3, [r7, #12]
 8001fb2:	3302      	adds	r3, #2
 8001fb4:	683a      	ldr	r2, [r7, #0]
 8001fb6:	4413      	add	r3, r2
 8001fb8:	b2ca      	uxtb	r2, r1
 8001fba:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (u_data.base >> (8 * 3)) & 0xFF;
 8001fbc:	68bb      	ldr	r3, [r7, #8]
 8001fbe:	0e19      	lsrs	r1, r3, #24
 8001fc0:	68fb      	ldr	r3, [r7, #12]
 8001fc2:	3303      	adds	r3, #3
 8001fc4:	683a      	ldr	r2, [r7, #0]
 8001fc6:	4413      	add	r3, r2
 8001fc8:	b2ca      	uxtb	r2, r1
 8001fca:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->data);
 8001fcc:	68fb      	ldr	r3, [r7, #12]
 8001fce:	3304      	adds	r3, #4
 8001fd0:	60fb      	str	r3, [r7, #12]
      return offset;
 8001fd2:	68fb      	ldr	r3, [r7, #12]
    }
 8001fd4:	4618      	mov	r0, r3
 8001fd6:	3714      	adds	r7, #20
 8001fd8:	46bd      	mov	sp, r7
 8001fda:	bc80      	pop	{r7}
 8001fdc:	4770      	bx	lr

08001fde <_ZN8std_msgs7Float3211deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer)
 8001fde:	b480      	push	{r7}
 8001fe0:	b085      	sub	sp, #20
 8001fe2:	af00      	add	r7, sp, #0
 8001fe4:	6078      	str	r0, [r7, #4]
 8001fe6:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8001fe8:	2300      	movs	r3, #0
 8001fea:	60fb      	str	r3, [r7, #12]
      union {
        float real;
        uint32_t base;
      } u_data;
      u_data.base = 0;
 8001fec:	2300      	movs	r3, #0
 8001fee:	60bb      	str	r3, [r7, #8]
      u_data.base |= ((uint32_t) (*(inbuffer + offset + 0))) << (8 * 0);
 8001ff0:	68bb      	ldr	r3, [r7, #8]
 8001ff2:	68fa      	ldr	r2, [r7, #12]
 8001ff4:	6839      	ldr	r1, [r7, #0]
 8001ff6:	440a      	add	r2, r1
 8001ff8:	7812      	ldrb	r2, [r2, #0]
 8001ffa:	4313      	orrs	r3, r2
 8001ffc:	60bb      	str	r3, [r7, #8]
      u_data.base |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8001ffe:	68ba      	ldr	r2, [r7, #8]
 8002000:	68fb      	ldr	r3, [r7, #12]
 8002002:	3301      	adds	r3, #1
 8002004:	6839      	ldr	r1, [r7, #0]
 8002006:	440b      	add	r3, r1
 8002008:	781b      	ldrb	r3, [r3, #0]
 800200a:	021b      	lsls	r3, r3, #8
 800200c:	4313      	orrs	r3, r2
 800200e:	60bb      	str	r3, [r7, #8]
      u_data.base |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8002010:	68ba      	ldr	r2, [r7, #8]
 8002012:	68fb      	ldr	r3, [r7, #12]
 8002014:	3302      	adds	r3, #2
 8002016:	6839      	ldr	r1, [r7, #0]
 8002018:	440b      	add	r3, r1
 800201a:	781b      	ldrb	r3, [r3, #0]
 800201c:	041b      	lsls	r3, r3, #16
 800201e:	4313      	orrs	r3, r2
 8002020:	60bb      	str	r3, [r7, #8]
      u_data.base |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8002022:	68ba      	ldr	r2, [r7, #8]
 8002024:	68fb      	ldr	r3, [r7, #12]
 8002026:	3303      	adds	r3, #3
 8002028:	6839      	ldr	r1, [r7, #0]
 800202a:	440b      	add	r3, r1
 800202c:	781b      	ldrb	r3, [r3, #0]
 800202e:	061b      	lsls	r3, r3, #24
 8002030:	4313      	orrs	r3, r2
 8002032:	60bb      	str	r3, [r7, #8]
      this->data = u_data.real;
 8002034:	68ba      	ldr	r2, [r7, #8]
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	605a      	str	r2, [r3, #4]
      offset += sizeof(this->data);
 800203a:	68fb      	ldr	r3, [r7, #12]
 800203c:	3304      	adds	r3, #4
 800203e:	60fb      	str	r3, [r7, #12]
     return offset;
 8002040:	68fb      	ldr	r3, [r7, #12]
    }
 8002042:	4618      	mov	r0, r3
 8002044:	3714      	adds	r7, #20
 8002046:	46bd      	mov	sp, r7
 8002048:	bc80      	pop	{r7}
 800204a:	4770      	bx	lr

0800204c <_ZN8std_msgs7Float327getTypeEv>:

    const char * getType(){ return "std_msgs/Float32"; };
 800204c:	b480      	push	{r7}
 800204e:	b083      	sub	sp, #12
 8002050:	af00      	add	r7, sp, #0
 8002052:	6078      	str	r0, [r7, #4]
 8002054:	4b02      	ldr	r3, [pc, #8]	; (8002060 <_ZN8std_msgs7Float327getTypeEv+0x14>)
 8002056:	4618      	mov	r0, r3
 8002058:	370c      	adds	r7, #12
 800205a:	46bd      	mov	sp, r7
 800205c:	bc80      	pop	{r7}
 800205e:	4770      	bx	lr
 8002060:	08009014 	.word	0x08009014

08002064 <_ZN8std_msgs7Float326getMD5Ev>:
    const char * getMD5(){ return "73fcbf46b49191e672908e50842a83d4"; };
 8002064:	b480      	push	{r7}
 8002066:	b083      	sub	sp, #12
 8002068:	af00      	add	r7, sp, #0
 800206a:	6078      	str	r0, [r7, #4]
 800206c:	4b02      	ldr	r3, [pc, #8]	; (8002078 <_ZN8std_msgs7Float326getMD5Ev+0x14>)
 800206e:	4618      	mov	r0, r3
 8002070:	370c      	adds	r7, #12
 8002072:	46bd      	mov	sp, r7
 8002074:	bc80      	pop	{r7}
 8002076:	4770      	bx	lr
 8002078:	08009028 	.word	0x08009028

0800207c <_ZN8std_msgs5Int32C1Ev>:
  {
    public:
      typedef int32_t _data_type;
      _data_type data;

    Int32():
 800207c:	b580      	push	{r7, lr}
 800207e:	b082      	sub	sp, #8
 8002080:	af00      	add	r7, sp, #0
 8002082:	6078      	str	r0, [r7, #4]
      data(0)
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	4618      	mov	r0, r3
 8002088:	f7fe ff10 	bl	8000eac <_ZN3ros3MsgC1Ev>
 800208c:	4a05      	ldr	r2, [pc, #20]	; (80020a4 <_ZN8std_msgs5Int32C1Ev+0x28>)
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	601a      	str	r2, [r3, #0]
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	2200      	movs	r2, #0
 8002096:	605a      	str	r2, [r3, #4]
    {
    }
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	4618      	mov	r0, r3
 800209c:	3708      	adds	r7, #8
 800209e:	46bd      	mov	sp, r7
 80020a0:	bd80      	pop	{r7, pc}
 80020a2:	bf00      	nop
 80020a4:	08009244 	.word	0x08009244

080020a8 <_ZNK8std_msgs5Int329serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const
 80020a8:	b480      	push	{r7}
 80020aa:	b085      	sub	sp, #20
 80020ac:	af00      	add	r7, sp, #0
 80020ae:	6078      	str	r0, [r7, #4]
 80020b0:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 80020b2:	2300      	movs	r3, #0
 80020b4:	60fb      	str	r3, [r7, #12]
      union {
        int32_t real;
        uint32_t base;
      } u_data;
      u_data.real = this->data;
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	685b      	ldr	r3, [r3, #4]
 80020ba:	60bb      	str	r3, [r7, #8]
      *(outbuffer + offset + 0) = (u_data.base >> (8 * 0)) & 0xFF;
 80020bc:	68b9      	ldr	r1, [r7, #8]
 80020be:	68fb      	ldr	r3, [r7, #12]
 80020c0:	683a      	ldr	r2, [r7, #0]
 80020c2:	4413      	add	r3, r2
 80020c4:	b2ca      	uxtb	r2, r1
 80020c6:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (u_data.base >> (8 * 1)) & 0xFF;
 80020c8:	68bb      	ldr	r3, [r7, #8]
 80020ca:	0a19      	lsrs	r1, r3, #8
 80020cc:	68fb      	ldr	r3, [r7, #12]
 80020ce:	3301      	adds	r3, #1
 80020d0:	683a      	ldr	r2, [r7, #0]
 80020d2:	4413      	add	r3, r2
 80020d4:	b2ca      	uxtb	r2, r1
 80020d6:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (u_data.base >> (8 * 2)) & 0xFF;
 80020d8:	68bb      	ldr	r3, [r7, #8]
 80020da:	0c19      	lsrs	r1, r3, #16
 80020dc:	68fb      	ldr	r3, [r7, #12]
 80020de:	3302      	adds	r3, #2
 80020e0:	683a      	ldr	r2, [r7, #0]
 80020e2:	4413      	add	r3, r2
 80020e4:	b2ca      	uxtb	r2, r1
 80020e6:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (u_data.base >> (8 * 3)) & 0xFF;
 80020e8:	68bb      	ldr	r3, [r7, #8]
 80020ea:	0e19      	lsrs	r1, r3, #24
 80020ec:	68fb      	ldr	r3, [r7, #12]
 80020ee:	3303      	adds	r3, #3
 80020f0:	683a      	ldr	r2, [r7, #0]
 80020f2:	4413      	add	r3, r2
 80020f4:	b2ca      	uxtb	r2, r1
 80020f6:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->data);
 80020f8:	68fb      	ldr	r3, [r7, #12]
 80020fa:	3304      	adds	r3, #4
 80020fc:	60fb      	str	r3, [r7, #12]
      return offset;
 80020fe:	68fb      	ldr	r3, [r7, #12]
    }
 8002100:	4618      	mov	r0, r3
 8002102:	3714      	adds	r7, #20
 8002104:	46bd      	mov	sp, r7
 8002106:	bc80      	pop	{r7}
 8002108:	4770      	bx	lr

0800210a <_ZN8std_msgs5Int3211deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer)
 800210a:	b480      	push	{r7}
 800210c:	b085      	sub	sp, #20
 800210e:	af00      	add	r7, sp, #0
 8002110:	6078      	str	r0, [r7, #4]
 8002112:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8002114:	2300      	movs	r3, #0
 8002116:	60fb      	str	r3, [r7, #12]
      union {
        int32_t real;
        uint32_t base;
      } u_data;
      u_data.base = 0;
 8002118:	2300      	movs	r3, #0
 800211a:	60bb      	str	r3, [r7, #8]
      u_data.base |= ((uint32_t) (*(inbuffer + offset + 0))) << (8 * 0);
 800211c:	68bb      	ldr	r3, [r7, #8]
 800211e:	68fa      	ldr	r2, [r7, #12]
 8002120:	6839      	ldr	r1, [r7, #0]
 8002122:	440a      	add	r2, r1
 8002124:	7812      	ldrb	r2, [r2, #0]
 8002126:	4313      	orrs	r3, r2
 8002128:	60bb      	str	r3, [r7, #8]
      u_data.base |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 800212a:	68ba      	ldr	r2, [r7, #8]
 800212c:	68fb      	ldr	r3, [r7, #12]
 800212e:	3301      	adds	r3, #1
 8002130:	6839      	ldr	r1, [r7, #0]
 8002132:	440b      	add	r3, r1
 8002134:	781b      	ldrb	r3, [r3, #0]
 8002136:	021b      	lsls	r3, r3, #8
 8002138:	4313      	orrs	r3, r2
 800213a:	60bb      	str	r3, [r7, #8]
      u_data.base |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 800213c:	68ba      	ldr	r2, [r7, #8]
 800213e:	68fb      	ldr	r3, [r7, #12]
 8002140:	3302      	adds	r3, #2
 8002142:	6839      	ldr	r1, [r7, #0]
 8002144:	440b      	add	r3, r1
 8002146:	781b      	ldrb	r3, [r3, #0]
 8002148:	041b      	lsls	r3, r3, #16
 800214a:	4313      	orrs	r3, r2
 800214c:	60bb      	str	r3, [r7, #8]
      u_data.base |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 800214e:	68ba      	ldr	r2, [r7, #8]
 8002150:	68fb      	ldr	r3, [r7, #12]
 8002152:	3303      	adds	r3, #3
 8002154:	6839      	ldr	r1, [r7, #0]
 8002156:	440b      	add	r3, r1
 8002158:	781b      	ldrb	r3, [r3, #0]
 800215a:	061b      	lsls	r3, r3, #24
 800215c:	4313      	orrs	r3, r2
 800215e:	60bb      	str	r3, [r7, #8]
      this->data = u_data.real;
 8002160:	68ba      	ldr	r2, [r7, #8]
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	605a      	str	r2, [r3, #4]
      offset += sizeof(this->data);
 8002166:	68fb      	ldr	r3, [r7, #12]
 8002168:	3304      	adds	r3, #4
 800216a:	60fb      	str	r3, [r7, #12]
     return offset;
 800216c:	68fb      	ldr	r3, [r7, #12]
    }
 800216e:	4618      	mov	r0, r3
 8002170:	3714      	adds	r7, #20
 8002172:	46bd      	mov	sp, r7
 8002174:	bc80      	pop	{r7}
 8002176:	4770      	bx	lr

08002178 <_ZN8std_msgs5Int327getTypeEv>:

    const char * getType(){ return "std_msgs/Int32"; };
 8002178:	b480      	push	{r7}
 800217a:	b083      	sub	sp, #12
 800217c:	af00      	add	r7, sp, #0
 800217e:	6078      	str	r0, [r7, #4]
 8002180:	4b02      	ldr	r3, [pc, #8]	; (800218c <_ZN8std_msgs5Int327getTypeEv+0x14>)
 8002182:	4618      	mov	r0, r3
 8002184:	370c      	adds	r7, #12
 8002186:	46bd      	mov	sp, r7
 8002188:	bc80      	pop	{r7}
 800218a:	4770      	bx	lr
 800218c:	0800904c 	.word	0x0800904c

08002190 <_ZN8std_msgs5Int326getMD5Ev>:
    const char * getMD5(){ return "da5909fbe378aeaf85e547e830cc1bb7"; };
 8002190:	b480      	push	{r7}
 8002192:	b083      	sub	sp, #12
 8002194:	af00      	add	r7, sp, #0
 8002196:	6078      	str	r0, [r7, #4]
 8002198:	4b02      	ldr	r3, [pc, #8]	; (80021a4 <_ZN8std_msgs5Int326getMD5Ev+0x14>)
 800219a:	4618      	mov	r0, r3
 800219c:	370c      	adds	r7, #12
 800219e:	46bd      	mov	sp, r7
 80021a0:	bc80      	pop	{r7}
 80021a2:	4770      	bx	lr
 80021a4:	0800905c 	.word	0x0800905c

080021a8 <_ZN8std_msgs6HeaderC1Ev>:
      typedef ros::Time _stamp_type;
      _stamp_type stamp;
      typedef const char* _frame_id_type;
      _frame_id_type frame_id;

    Header():
 80021a8:	b580      	push	{r7, lr}
 80021aa:	b082      	sub	sp, #8
 80021ac:	af00      	add	r7, sp, #0
 80021ae:	6078      	str	r0, [r7, #4]
      seq(0),
      stamp(),
      frame_id("")
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	4618      	mov	r0, r3
 80021b4:	f7fe fe7a 	bl	8000eac <_ZN3ros3MsgC1Ev>
 80021b8:	4a09      	ldr	r2, [pc, #36]	; (80021e0 <_ZN8std_msgs6HeaderC1Ev+0x38>)
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	601a      	str	r2, [r3, #0]
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	2200      	movs	r2, #0
 80021c2:	605a      	str	r2, [r3, #4]
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	3308      	adds	r3, #8
 80021c8:	4618      	mov	r0, r3
 80021ca:	f7fe fe5f 	bl	8000e8c <_ZN3ros4TimeC1Ev>
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	4a04      	ldr	r2, [pc, #16]	; (80021e4 <_ZN8std_msgs6HeaderC1Ev+0x3c>)
 80021d2:	611a      	str	r2, [r3, #16]
    {
    }
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	4618      	mov	r0, r3
 80021d8:	3708      	adds	r7, #8
 80021da:	46bd      	mov	sp, r7
 80021dc:	bd80      	pop	{r7, pc}
 80021de:	bf00      	nop
 80021e0:	0800922c 	.word	0x0800922c
 80021e4:	08008f40 	.word	0x08008f40

080021e8 <_ZNK8std_msgs6Header9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const
 80021e8:	b580      	push	{r7, lr}
 80021ea:	b084      	sub	sp, #16
 80021ec:	af00      	add	r7, sp, #0
 80021ee:	6078      	str	r0, [r7, #4]
 80021f0:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 80021f2:	2300      	movs	r3, #0
 80021f4:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (this->seq >> (8 * 0)) & 0xFF;
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	6859      	ldr	r1, [r3, #4]
 80021fa:	68fb      	ldr	r3, [r7, #12]
 80021fc:	683a      	ldr	r2, [r7, #0]
 80021fe:	4413      	add	r3, r2
 8002200:	b2ca      	uxtb	r2, r1
 8002202:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->seq >> (8 * 1)) & 0xFF;
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	685b      	ldr	r3, [r3, #4]
 8002208:	0a19      	lsrs	r1, r3, #8
 800220a:	68fb      	ldr	r3, [r7, #12]
 800220c:	3301      	adds	r3, #1
 800220e:	683a      	ldr	r2, [r7, #0]
 8002210:	4413      	add	r3, r2
 8002212:	b2ca      	uxtb	r2, r1
 8002214:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->seq >> (8 * 2)) & 0xFF;
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	685b      	ldr	r3, [r3, #4]
 800221a:	0c19      	lsrs	r1, r3, #16
 800221c:	68fb      	ldr	r3, [r7, #12]
 800221e:	3302      	adds	r3, #2
 8002220:	683a      	ldr	r2, [r7, #0]
 8002222:	4413      	add	r3, r2
 8002224:	b2ca      	uxtb	r2, r1
 8002226:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->seq >> (8 * 3)) & 0xFF;
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	685b      	ldr	r3, [r3, #4]
 800222c:	0e19      	lsrs	r1, r3, #24
 800222e:	68fb      	ldr	r3, [r7, #12]
 8002230:	3303      	adds	r3, #3
 8002232:	683a      	ldr	r2, [r7, #0]
 8002234:	4413      	add	r3, r2
 8002236:	b2ca      	uxtb	r2, r1
 8002238:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->seq);
 800223a:	68fb      	ldr	r3, [r7, #12]
 800223c:	3304      	adds	r3, #4
 800223e:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (this->stamp.sec >> (8 * 0)) & 0xFF;
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	6899      	ldr	r1, [r3, #8]
 8002244:	68fb      	ldr	r3, [r7, #12]
 8002246:	683a      	ldr	r2, [r7, #0]
 8002248:	4413      	add	r3, r2
 800224a:	b2ca      	uxtb	r2, r1
 800224c:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->stamp.sec >> (8 * 1)) & 0xFF;
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	689b      	ldr	r3, [r3, #8]
 8002252:	0a19      	lsrs	r1, r3, #8
 8002254:	68fb      	ldr	r3, [r7, #12]
 8002256:	3301      	adds	r3, #1
 8002258:	683a      	ldr	r2, [r7, #0]
 800225a:	4413      	add	r3, r2
 800225c:	b2ca      	uxtb	r2, r1
 800225e:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->stamp.sec >> (8 * 2)) & 0xFF;
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	689b      	ldr	r3, [r3, #8]
 8002264:	0c19      	lsrs	r1, r3, #16
 8002266:	68fb      	ldr	r3, [r7, #12]
 8002268:	3302      	adds	r3, #2
 800226a:	683a      	ldr	r2, [r7, #0]
 800226c:	4413      	add	r3, r2
 800226e:	b2ca      	uxtb	r2, r1
 8002270:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->stamp.sec >> (8 * 3)) & 0xFF;
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	689b      	ldr	r3, [r3, #8]
 8002276:	0e19      	lsrs	r1, r3, #24
 8002278:	68fb      	ldr	r3, [r7, #12]
 800227a:	3303      	adds	r3, #3
 800227c:	683a      	ldr	r2, [r7, #0]
 800227e:	4413      	add	r3, r2
 8002280:	b2ca      	uxtb	r2, r1
 8002282:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->stamp.sec);
 8002284:	68fb      	ldr	r3, [r7, #12]
 8002286:	3304      	adds	r3, #4
 8002288:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (this->stamp.nsec >> (8 * 0)) & 0xFF;
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	68d9      	ldr	r1, [r3, #12]
 800228e:	68fb      	ldr	r3, [r7, #12]
 8002290:	683a      	ldr	r2, [r7, #0]
 8002292:	4413      	add	r3, r2
 8002294:	b2ca      	uxtb	r2, r1
 8002296:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->stamp.nsec >> (8 * 1)) & 0xFF;
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	68db      	ldr	r3, [r3, #12]
 800229c:	0a19      	lsrs	r1, r3, #8
 800229e:	68fb      	ldr	r3, [r7, #12]
 80022a0:	3301      	adds	r3, #1
 80022a2:	683a      	ldr	r2, [r7, #0]
 80022a4:	4413      	add	r3, r2
 80022a6:	b2ca      	uxtb	r2, r1
 80022a8:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->stamp.nsec >> (8 * 2)) & 0xFF;
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	68db      	ldr	r3, [r3, #12]
 80022ae:	0c19      	lsrs	r1, r3, #16
 80022b0:	68fb      	ldr	r3, [r7, #12]
 80022b2:	3302      	adds	r3, #2
 80022b4:	683a      	ldr	r2, [r7, #0]
 80022b6:	4413      	add	r3, r2
 80022b8:	b2ca      	uxtb	r2, r1
 80022ba:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->stamp.nsec >> (8 * 3)) & 0xFF;
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	68db      	ldr	r3, [r3, #12]
 80022c0:	0e19      	lsrs	r1, r3, #24
 80022c2:	68fb      	ldr	r3, [r7, #12]
 80022c4:	3303      	adds	r3, #3
 80022c6:	683a      	ldr	r2, [r7, #0]
 80022c8:	4413      	add	r3, r2
 80022ca:	b2ca      	uxtb	r2, r1
 80022cc:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->stamp.nsec);
 80022ce:	68fb      	ldr	r3, [r7, #12]
 80022d0:	3304      	adds	r3, #4
 80022d2:	60fb      	str	r3, [r7, #12]
      uint32_t length_frame_id = strlen(this->frame_id);
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	691b      	ldr	r3, [r3, #16]
 80022d8:	4618      	mov	r0, r3
 80022da:	f7fd ff39 	bl	8000150 <strlen>
 80022de:	60b8      	str	r0, [r7, #8]
      varToArr(outbuffer + offset, length_frame_id);
 80022e0:	68fb      	ldr	r3, [r7, #12]
 80022e2:	683a      	ldr	r2, [r7, #0]
 80022e4:	4413      	add	r3, r2
 80022e6:	68b9      	ldr	r1, [r7, #8]
 80022e8:	4618      	mov	r0, r3
 80022ea:	f001 fbdd 	bl	8003aa8 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 80022ee:	68fb      	ldr	r3, [r7, #12]
 80022f0:	3304      	adds	r3, #4
 80022f2:	60fb      	str	r3, [r7, #12]
      memcpy(outbuffer + offset, this->frame_id, length_frame_id);
 80022f4:	68fb      	ldr	r3, [r7, #12]
 80022f6:	683a      	ldr	r2, [r7, #0]
 80022f8:	18d0      	adds	r0, r2, r3
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	691b      	ldr	r3, [r3, #16]
 80022fe:	68ba      	ldr	r2, [r7, #8]
 8002300:	4619      	mov	r1, r3
 8002302:	f006 fca3 	bl	8008c4c <memcpy>
      offset += length_frame_id;
 8002306:	68fa      	ldr	r2, [r7, #12]
 8002308:	68bb      	ldr	r3, [r7, #8]
 800230a:	4413      	add	r3, r2
 800230c:	60fb      	str	r3, [r7, #12]
      return offset;
 800230e:	68fb      	ldr	r3, [r7, #12]
    }
 8002310:	4618      	mov	r0, r3
 8002312:	3710      	adds	r7, #16
 8002314:	46bd      	mov	sp, r7
 8002316:	bd80      	pop	{r7, pc}

08002318 <_ZN8std_msgs6Header11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer)
 8002318:	b580      	push	{r7, lr}
 800231a:	b086      	sub	sp, #24
 800231c:	af00      	add	r7, sp, #0
 800231e:	6078      	str	r0, [r7, #4]
 8002320:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8002322:	2300      	movs	r3, #0
 8002324:	613b      	str	r3, [r7, #16]
      this->seq =  ((uint32_t) (*(inbuffer + offset)));
 8002326:	693b      	ldr	r3, [r7, #16]
 8002328:	683a      	ldr	r2, [r7, #0]
 800232a:	4413      	add	r3, r2
 800232c:	781b      	ldrb	r3, [r3, #0]
 800232e:	461a      	mov	r2, r3
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	605a      	str	r2, [r3, #4]
      this->seq |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	685a      	ldr	r2, [r3, #4]
 8002338:	693b      	ldr	r3, [r7, #16]
 800233a:	3301      	adds	r3, #1
 800233c:	6839      	ldr	r1, [r7, #0]
 800233e:	440b      	add	r3, r1
 8002340:	781b      	ldrb	r3, [r3, #0]
 8002342:	021b      	lsls	r3, r3, #8
 8002344:	431a      	orrs	r2, r3
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	605a      	str	r2, [r3, #4]
      this->seq |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	685a      	ldr	r2, [r3, #4]
 800234e:	693b      	ldr	r3, [r7, #16]
 8002350:	3302      	adds	r3, #2
 8002352:	6839      	ldr	r1, [r7, #0]
 8002354:	440b      	add	r3, r1
 8002356:	781b      	ldrb	r3, [r3, #0]
 8002358:	041b      	lsls	r3, r3, #16
 800235a:	431a      	orrs	r2, r3
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	605a      	str	r2, [r3, #4]
      this->seq |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	685a      	ldr	r2, [r3, #4]
 8002364:	693b      	ldr	r3, [r7, #16]
 8002366:	3303      	adds	r3, #3
 8002368:	6839      	ldr	r1, [r7, #0]
 800236a:	440b      	add	r3, r1
 800236c:	781b      	ldrb	r3, [r3, #0]
 800236e:	061b      	lsls	r3, r3, #24
 8002370:	431a      	orrs	r2, r3
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	605a      	str	r2, [r3, #4]
      offset += sizeof(this->seq);
 8002376:	693b      	ldr	r3, [r7, #16]
 8002378:	3304      	adds	r3, #4
 800237a:	613b      	str	r3, [r7, #16]
      this->stamp.sec =  ((uint32_t) (*(inbuffer + offset)));
 800237c:	693b      	ldr	r3, [r7, #16]
 800237e:	683a      	ldr	r2, [r7, #0]
 8002380:	4413      	add	r3, r2
 8002382:	781b      	ldrb	r3, [r3, #0]
 8002384:	461a      	mov	r2, r3
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	609a      	str	r2, [r3, #8]
      this->stamp.sec |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	689a      	ldr	r2, [r3, #8]
 800238e:	693b      	ldr	r3, [r7, #16]
 8002390:	3301      	adds	r3, #1
 8002392:	6839      	ldr	r1, [r7, #0]
 8002394:	440b      	add	r3, r1
 8002396:	781b      	ldrb	r3, [r3, #0]
 8002398:	021b      	lsls	r3, r3, #8
 800239a:	431a      	orrs	r2, r3
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	609a      	str	r2, [r3, #8]
      this->stamp.sec |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	689a      	ldr	r2, [r3, #8]
 80023a4:	693b      	ldr	r3, [r7, #16]
 80023a6:	3302      	adds	r3, #2
 80023a8:	6839      	ldr	r1, [r7, #0]
 80023aa:	440b      	add	r3, r1
 80023ac:	781b      	ldrb	r3, [r3, #0]
 80023ae:	041b      	lsls	r3, r3, #16
 80023b0:	431a      	orrs	r2, r3
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	609a      	str	r2, [r3, #8]
      this->stamp.sec |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	689a      	ldr	r2, [r3, #8]
 80023ba:	693b      	ldr	r3, [r7, #16]
 80023bc:	3303      	adds	r3, #3
 80023be:	6839      	ldr	r1, [r7, #0]
 80023c0:	440b      	add	r3, r1
 80023c2:	781b      	ldrb	r3, [r3, #0]
 80023c4:	061b      	lsls	r3, r3, #24
 80023c6:	431a      	orrs	r2, r3
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	609a      	str	r2, [r3, #8]
      offset += sizeof(this->stamp.sec);
 80023cc:	693b      	ldr	r3, [r7, #16]
 80023ce:	3304      	adds	r3, #4
 80023d0:	613b      	str	r3, [r7, #16]
      this->stamp.nsec =  ((uint32_t) (*(inbuffer + offset)));
 80023d2:	693b      	ldr	r3, [r7, #16]
 80023d4:	683a      	ldr	r2, [r7, #0]
 80023d6:	4413      	add	r3, r2
 80023d8:	781b      	ldrb	r3, [r3, #0]
 80023da:	461a      	mov	r2, r3
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	60da      	str	r2, [r3, #12]
      this->stamp.nsec |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	68da      	ldr	r2, [r3, #12]
 80023e4:	693b      	ldr	r3, [r7, #16]
 80023e6:	3301      	adds	r3, #1
 80023e8:	6839      	ldr	r1, [r7, #0]
 80023ea:	440b      	add	r3, r1
 80023ec:	781b      	ldrb	r3, [r3, #0]
 80023ee:	021b      	lsls	r3, r3, #8
 80023f0:	431a      	orrs	r2, r3
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	60da      	str	r2, [r3, #12]
      this->stamp.nsec |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	68da      	ldr	r2, [r3, #12]
 80023fa:	693b      	ldr	r3, [r7, #16]
 80023fc:	3302      	adds	r3, #2
 80023fe:	6839      	ldr	r1, [r7, #0]
 8002400:	440b      	add	r3, r1
 8002402:	781b      	ldrb	r3, [r3, #0]
 8002404:	041b      	lsls	r3, r3, #16
 8002406:	431a      	orrs	r2, r3
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	60da      	str	r2, [r3, #12]
      this->stamp.nsec |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	68da      	ldr	r2, [r3, #12]
 8002410:	693b      	ldr	r3, [r7, #16]
 8002412:	3303      	adds	r3, #3
 8002414:	6839      	ldr	r1, [r7, #0]
 8002416:	440b      	add	r3, r1
 8002418:	781b      	ldrb	r3, [r3, #0]
 800241a:	061b      	lsls	r3, r3, #24
 800241c:	431a      	orrs	r2, r3
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	60da      	str	r2, [r3, #12]
      offset += sizeof(this->stamp.nsec);
 8002422:	693b      	ldr	r3, [r7, #16]
 8002424:	3304      	adds	r3, #4
 8002426:	613b      	str	r3, [r7, #16]
      uint32_t length_frame_id;
      arrToVar(length_frame_id, (inbuffer + offset));
 8002428:	693b      	ldr	r3, [r7, #16]
 800242a:	683a      	ldr	r2, [r7, #0]
 800242c:	441a      	add	r2, r3
 800242e:	f107 030c 	add.w	r3, r7, #12
 8002432:	4611      	mov	r1, r2
 8002434:	4618      	mov	r0, r3
 8002436:	f001 fb54 	bl	8003ae2 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 800243a:	693b      	ldr	r3, [r7, #16]
 800243c:	3304      	adds	r3, #4
 800243e:	613b      	str	r3, [r7, #16]
      for(unsigned int k= offset; k< offset+length_frame_id; ++k){
 8002440:	693b      	ldr	r3, [r7, #16]
 8002442:	617b      	str	r3, [r7, #20]
 8002444:	693a      	ldr	r2, [r7, #16]
 8002446:	68fb      	ldr	r3, [r7, #12]
 8002448:	4413      	add	r3, r2
 800244a:	697a      	ldr	r2, [r7, #20]
 800244c:	429a      	cmp	r2, r3
 800244e:	d20c      	bcs.n	800246a <_ZN8std_msgs6Header11deserializeEPh+0x152>
          inbuffer[k-1]=inbuffer[k];
 8002450:	683a      	ldr	r2, [r7, #0]
 8002452:	697b      	ldr	r3, [r7, #20]
 8002454:	441a      	add	r2, r3
 8002456:	697b      	ldr	r3, [r7, #20]
 8002458:	3b01      	subs	r3, #1
 800245a:	6839      	ldr	r1, [r7, #0]
 800245c:	440b      	add	r3, r1
 800245e:	7812      	ldrb	r2, [r2, #0]
 8002460:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_frame_id; ++k){
 8002462:	697b      	ldr	r3, [r7, #20]
 8002464:	3301      	adds	r3, #1
 8002466:	617b      	str	r3, [r7, #20]
 8002468:	e7ec      	b.n	8002444 <_ZN8std_msgs6Header11deserializeEPh+0x12c>
      }
      inbuffer[offset+length_frame_id-1]=0;
 800246a:	693a      	ldr	r2, [r7, #16]
 800246c:	68fb      	ldr	r3, [r7, #12]
 800246e:	4413      	add	r3, r2
 8002470:	3b01      	subs	r3, #1
 8002472:	683a      	ldr	r2, [r7, #0]
 8002474:	4413      	add	r3, r2
 8002476:	2200      	movs	r2, #0
 8002478:	701a      	strb	r2, [r3, #0]
      this->frame_id = (char *)(inbuffer + offset-1);
 800247a:	693b      	ldr	r3, [r7, #16]
 800247c:	3b01      	subs	r3, #1
 800247e:	683a      	ldr	r2, [r7, #0]
 8002480:	441a      	add	r2, r3
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	611a      	str	r2, [r3, #16]
      offset += length_frame_id;
 8002486:	693a      	ldr	r2, [r7, #16]
 8002488:	68fb      	ldr	r3, [r7, #12]
 800248a:	4413      	add	r3, r2
 800248c:	613b      	str	r3, [r7, #16]
     return offset;
 800248e:	693b      	ldr	r3, [r7, #16]
    }
 8002490:	4618      	mov	r0, r3
 8002492:	3718      	adds	r7, #24
 8002494:	46bd      	mov	sp, r7
 8002496:	bd80      	pop	{r7, pc}

08002498 <_ZN8std_msgs6Header7getTypeEv>:

    const char * getType(){ return "std_msgs/Header"; };
 8002498:	b480      	push	{r7}
 800249a:	b083      	sub	sp, #12
 800249c:	af00      	add	r7, sp, #0
 800249e:	6078      	str	r0, [r7, #4]
 80024a0:	4b02      	ldr	r3, [pc, #8]	; (80024ac <_ZN8std_msgs6Header7getTypeEv+0x14>)
 80024a2:	4618      	mov	r0, r3
 80024a4:	370c      	adds	r7, #12
 80024a6:	46bd      	mov	sp, r7
 80024a8:	bc80      	pop	{r7}
 80024aa:	4770      	bx	lr
 80024ac:	08009080 	.word	0x08009080

080024b0 <_ZN8std_msgs6Header6getMD5Ev>:
    const char * getMD5(){ return "2176decaecbce78abc3b96ef049fabed"; };
 80024b0:	b480      	push	{r7}
 80024b2:	b083      	sub	sp, #12
 80024b4:	af00      	add	r7, sp, #0
 80024b6:	6078      	str	r0, [r7, #4]
 80024b8:	4b02      	ldr	r3, [pc, #8]	; (80024c4 <_ZN8std_msgs6Header6getMD5Ev+0x14>)
 80024ba:	4618      	mov	r0, r3
 80024bc:	370c      	adds	r7, #12
 80024be:	46bd      	mov	sp, r7
 80024c0:	bc80      	pop	{r7}
 80024c2:	4770      	bx	lr
 80024c4:	08009090 	.word	0x08009090

080024c8 <_ZN11sensor_msgs10JointStateC1Ev>:
      uint32_t effort_length;
      typedef double _effort_type;
      _effort_type st_effort;
      _effort_type * effort;

    JointState():
 80024c8:	b580      	push	{r7, lr}
 80024ca:	b082      	sub	sp, #8
 80024cc:	af00      	add	r7, sp, #0
 80024ce:	6078      	str	r0, [r7, #4]
      header(),
      name_length(0), name(NULL),
      position_length(0), position(NULL),
      velocity_length(0), velocity(NULL),
      effort_length(0), effort(NULL)
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	4618      	mov	r0, r3
 80024d4:	f7fe fcea 	bl	8000eac <_ZN3ros3MsgC1Ev>
 80024d8:	4a12      	ldr	r2, [pc, #72]	; (8002524 <_ZN11sensor_msgs10JointStateC1Ev+0x5c>)
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	601a      	str	r2, [r3, #0]
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	3304      	adds	r3, #4
 80024e2:	4618      	mov	r0, r3
 80024e4:	f7ff fe60 	bl	80021a8 <_ZN8std_msgs6HeaderC1Ev>
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	2200      	movs	r2, #0
 80024ec:	619a      	str	r2, [r3, #24]
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	2200      	movs	r2, #0
 80024f2:	621a      	str	r2, [r3, #32]
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	2200      	movs	r2, #0
 80024f8:	625a      	str	r2, [r3, #36]	; 0x24
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	2200      	movs	r2, #0
 80024fe:	631a      	str	r2, [r3, #48]	; 0x30
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	2200      	movs	r2, #0
 8002504:	635a      	str	r2, [r3, #52]	; 0x34
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	2200      	movs	r2, #0
 800250a:	641a      	str	r2, [r3, #64]	; 0x40
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	2200      	movs	r2, #0
 8002510:	645a      	str	r2, [r3, #68]	; 0x44
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	2200      	movs	r2, #0
 8002516:	651a      	str	r2, [r3, #80]	; 0x50
    {
    }
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	4618      	mov	r0, r3
 800251c:	3708      	adds	r7, #8
 800251e:	46bd      	mov	sp, r7
 8002520:	bd80      	pop	{r7, pc}
 8002522:	bf00      	nop
 8002524:	08009214 	.word	0x08009214

08002528 <_ZNK11sensor_msgs10JointState9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const
 8002528:	b580      	push	{r7, lr}
 800252a:	b08e      	sub	sp, #56	; 0x38
 800252c:	af00      	add	r7, sp, #0
 800252e:	6078      	str	r0, [r7, #4]
 8002530:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8002532:	2300      	movs	r3, #0
 8002534:	637b      	str	r3, [r7, #52]	; 0x34
      offset += this->header.serialize(outbuffer + offset);
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	1d18      	adds	r0, r3, #4
 800253a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800253c:	683a      	ldr	r2, [r7, #0]
 800253e:	4413      	add	r3, r2
 8002540:	4619      	mov	r1, r3
 8002542:	f7ff fe51 	bl	80021e8 <_ZNK8std_msgs6Header9serializeEPh>
 8002546:	4602      	mov	r2, r0
 8002548:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800254a:	4413      	add	r3, r2
 800254c:	637b      	str	r3, [r7, #52]	; 0x34
      *(outbuffer + offset + 0) = (this->name_length >> (8 * 0)) & 0xFF;
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	6999      	ldr	r1, [r3, #24]
 8002552:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002554:	683a      	ldr	r2, [r7, #0]
 8002556:	4413      	add	r3, r2
 8002558:	b2ca      	uxtb	r2, r1
 800255a:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->name_length >> (8 * 1)) & 0xFF;
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	699b      	ldr	r3, [r3, #24]
 8002560:	0a19      	lsrs	r1, r3, #8
 8002562:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002564:	3301      	adds	r3, #1
 8002566:	683a      	ldr	r2, [r7, #0]
 8002568:	4413      	add	r3, r2
 800256a:	b2ca      	uxtb	r2, r1
 800256c:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->name_length >> (8 * 2)) & 0xFF;
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	699b      	ldr	r3, [r3, #24]
 8002572:	0c19      	lsrs	r1, r3, #16
 8002574:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002576:	3302      	adds	r3, #2
 8002578:	683a      	ldr	r2, [r7, #0]
 800257a:	4413      	add	r3, r2
 800257c:	b2ca      	uxtb	r2, r1
 800257e:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->name_length >> (8 * 3)) & 0xFF;
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	699b      	ldr	r3, [r3, #24]
 8002584:	0e19      	lsrs	r1, r3, #24
 8002586:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002588:	3303      	adds	r3, #3
 800258a:	683a      	ldr	r2, [r7, #0]
 800258c:	4413      	add	r3, r2
 800258e:	b2ca      	uxtb	r2, r1
 8002590:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->name_length);
 8002592:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002594:	3304      	adds	r3, #4
 8002596:	637b      	str	r3, [r7, #52]	; 0x34
      for( uint32_t i = 0; i < name_length; i++){
 8002598:	2300      	movs	r3, #0
 800259a:	633b      	str	r3, [r7, #48]	; 0x30
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	699b      	ldr	r3, [r3, #24]
 80025a0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80025a2:	429a      	cmp	r2, r3
 80025a4:	d228      	bcs.n	80025f8 <_ZNK11sensor_msgs10JointState9serializeEPh+0xd0>
      uint32_t length_namei = strlen(this->name[i]);
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	6a1a      	ldr	r2, [r3, #32]
 80025aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80025ac:	009b      	lsls	r3, r3, #2
 80025ae:	4413      	add	r3, r2
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	4618      	mov	r0, r3
 80025b4:	f7fd fdcc 	bl	8000150 <strlen>
 80025b8:	6238      	str	r0, [r7, #32]
      varToArr(outbuffer + offset, length_namei);
 80025ba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80025bc:	683a      	ldr	r2, [r7, #0]
 80025be:	4413      	add	r3, r2
 80025c0:	6a39      	ldr	r1, [r7, #32]
 80025c2:	4618      	mov	r0, r3
 80025c4:	f001 fa70 	bl	8003aa8 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 80025c8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80025ca:	3304      	adds	r3, #4
 80025cc:	637b      	str	r3, [r7, #52]	; 0x34
      memcpy(outbuffer + offset, this->name[i], length_namei);
 80025ce:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80025d0:	683a      	ldr	r2, [r7, #0]
 80025d2:	18d0      	adds	r0, r2, r3
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	6a1a      	ldr	r2, [r3, #32]
 80025d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80025da:	009b      	lsls	r3, r3, #2
 80025dc:	4413      	add	r3, r2
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	6a3a      	ldr	r2, [r7, #32]
 80025e2:	4619      	mov	r1, r3
 80025e4:	f006 fb32 	bl	8008c4c <memcpy>
      offset += length_namei;
 80025e8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80025ea:	6a3b      	ldr	r3, [r7, #32]
 80025ec:	4413      	add	r3, r2
 80025ee:	637b      	str	r3, [r7, #52]	; 0x34
      for( uint32_t i = 0; i < name_length; i++){
 80025f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80025f2:	3301      	adds	r3, #1
 80025f4:	633b      	str	r3, [r7, #48]	; 0x30
 80025f6:	e7d1      	b.n	800259c <_ZNK11sensor_msgs10JointState9serializeEPh+0x74>
      }
      *(outbuffer + offset + 0) = (this->position_length >> (8 * 0)) & 0xFF;
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	6a59      	ldr	r1, [r3, #36]	; 0x24
 80025fc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80025fe:	683a      	ldr	r2, [r7, #0]
 8002600:	4413      	add	r3, r2
 8002602:	b2ca      	uxtb	r2, r1
 8002604:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->position_length >> (8 * 1)) & 0xFF;
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800260a:	0a19      	lsrs	r1, r3, #8
 800260c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800260e:	3301      	adds	r3, #1
 8002610:	683a      	ldr	r2, [r7, #0]
 8002612:	4413      	add	r3, r2
 8002614:	b2ca      	uxtb	r2, r1
 8002616:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->position_length >> (8 * 2)) & 0xFF;
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800261c:	0c19      	lsrs	r1, r3, #16
 800261e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002620:	3302      	adds	r3, #2
 8002622:	683a      	ldr	r2, [r7, #0]
 8002624:	4413      	add	r3, r2
 8002626:	b2ca      	uxtb	r2, r1
 8002628:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->position_length >> (8 * 3)) & 0xFF;
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800262e:	0e19      	lsrs	r1, r3, #24
 8002630:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002632:	3303      	adds	r3, #3
 8002634:	683a      	ldr	r2, [r7, #0]
 8002636:	4413      	add	r3, r2
 8002638:	b2ca      	uxtb	r2, r1
 800263a:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->position_length);
 800263c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800263e:	3304      	adds	r3, #4
 8002640:	637b      	str	r3, [r7, #52]	; 0x34
      for( uint32_t i = 0; i < position_length; i++){
 8002642:	2300      	movs	r3, #0
 8002644:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800264a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800264c:	429a      	cmp	r2, r3
 800264e:	d27e      	bcs.n	800274e <_ZNK11sensor_msgs10JointState9serializeEPh+0x226>
      union {
        double real;
        uint64_t base;
      } u_positioni;
      u_positioni.real = this->position[i];
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002654:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002656:	00db      	lsls	r3, r3, #3
 8002658:	4413      	add	r3, r2
 800265a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800265e:	e9c7 2306 	strd	r2, r3, [r7, #24]
      *(outbuffer + offset + 0) = (u_positioni.base >> (8 * 0)) & 0xFF;
 8002662:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002666:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8002668:	6838      	ldr	r0, [r7, #0]
 800266a:	4401      	add	r1, r0
 800266c:	b2d3      	uxtb	r3, r2
 800266e:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 1) = (u_positioni.base >> (8 * 1)) & 0xFF;
 8002670:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8002674:	f04f 0200 	mov.w	r2, #0
 8002678:	f04f 0300 	mov.w	r3, #0
 800267c:	0a02      	lsrs	r2, r0, #8
 800267e:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 8002682:	0a0b      	lsrs	r3, r1, #8
 8002684:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8002686:	3101      	adds	r1, #1
 8002688:	6838      	ldr	r0, [r7, #0]
 800268a:	4401      	add	r1, r0
 800268c:	b2d3      	uxtb	r3, r2
 800268e:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 2) = (u_positioni.base >> (8 * 2)) & 0xFF;
 8002690:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8002694:	f04f 0200 	mov.w	r2, #0
 8002698:	f04f 0300 	mov.w	r3, #0
 800269c:	0c02      	lsrs	r2, r0, #16
 800269e:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80026a2:	0c0b      	lsrs	r3, r1, #16
 80026a4:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80026a6:	3102      	adds	r1, #2
 80026a8:	6838      	ldr	r0, [r7, #0]
 80026aa:	4401      	add	r1, r0
 80026ac:	b2d3      	uxtb	r3, r2
 80026ae:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 3) = (u_positioni.base >> (8 * 3)) & 0xFF;
 80026b0:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80026b4:	f04f 0200 	mov.w	r2, #0
 80026b8:	f04f 0300 	mov.w	r3, #0
 80026bc:	0e02      	lsrs	r2, r0, #24
 80026be:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 80026c2:	0e0b      	lsrs	r3, r1, #24
 80026c4:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80026c6:	3103      	adds	r1, #3
 80026c8:	6838      	ldr	r0, [r7, #0]
 80026ca:	4401      	add	r1, r0
 80026cc:	b2d3      	uxtb	r3, r2
 80026ce:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 4) = (u_positioni.base >> (8 * 4)) & 0xFF;
 80026d0:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80026d4:	f04f 0200 	mov.w	r2, #0
 80026d8:	f04f 0300 	mov.w	r3, #0
 80026dc:	000a      	movs	r2, r1
 80026de:	2300      	movs	r3, #0
 80026e0:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80026e2:	3104      	adds	r1, #4
 80026e4:	6838      	ldr	r0, [r7, #0]
 80026e6:	4401      	add	r1, r0
 80026e8:	b2d3      	uxtb	r3, r2
 80026ea:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 5) = (u_positioni.base >> (8 * 5)) & 0xFF;
 80026ec:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80026f0:	f04f 0200 	mov.w	r2, #0
 80026f4:	f04f 0300 	mov.w	r3, #0
 80026f8:	0a0a      	lsrs	r2, r1, #8
 80026fa:	2300      	movs	r3, #0
 80026fc:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80026fe:	3105      	adds	r1, #5
 8002700:	6838      	ldr	r0, [r7, #0]
 8002702:	4401      	add	r1, r0
 8002704:	b2d3      	uxtb	r3, r2
 8002706:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 6) = (u_positioni.base >> (8 * 6)) & 0xFF;
 8002708:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800270c:	f04f 0200 	mov.w	r2, #0
 8002710:	f04f 0300 	mov.w	r3, #0
 8002714:	0c0a      	lsrs	r2, r1, #16
 8002716:	2300      	movs	r3, #0
 8002718:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800271a:	3106      	adds	r1, #6
 800271c:	6838      	ldr	r0, [r7, #0]
 800271e:	4401      	add	r1, r0
 8002720:	b2d3      	uxtb	r3, r2
 8002722:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 7) = (u_positioni.base >> (8 * 7)) & 0xFF;
 8002724:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8002728:	f04f 0200 	mov.w	r2, #0
 800272c:	f04f 0300 	mov.w	r3, #0
 8002730:	0e0a      	lsrs	r2, r1, #24
 8002732:	2300      	movs	r3, #0
 8002734:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8002736:	3107      	adds	r1, #7
 8002738:	6838      	ldr	r0, [r7, #0]
 800273a:	4401      	add	r1, r0
 800273c:	b2d3      	uxtb	r3, r2
 800273e:	700b      	strb	r3, [r1, #0]
      offset += sizeof(this->position[i]);
 8002740:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002742:	3308      	adds	r3, #8
 8002744:	637b      	str	r3, [r7, #52]	; 0x34
      for( uint32_t i = 0; i < position_length; i++){
 8002746:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002748:	3301      	adds	r3, #1
 800274a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800274c:	e77b      	b.n	8002646 <_ZNK11sensor_msgs10JointState9serializeEPh+0x11e>
      }
      *(outbuffer + offset + 0) = (this->velocity_length >> (8 * 0)) & 0xFF;
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002752:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002754:	683a      	ldr	r2, [r7, #0]
 8002756:	4413      	add	r3, r2
 8002758:	b2ca      	uxtb	r2, r1
 800275a:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->velocity_length >> (8 * 1)) & 0xFF;
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002760:	0a19      	lsrs	r1, r3, #8
 8002762:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002764:	3301      	adds	r3, #1
 8002766:	683a      	ldr	r2, [r7, #0]
 8002768:	4413      	add	r3, r2
 800276a:	b2ca      	uxtb	r2, r1
 800276c:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->velocity_length >> (8 * 2)) & 0xFF;
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002772:	0c19      	lsrs	r1, r3, #16
 8002774:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002776:	3302      	adds	r3, #2
 8002778:	683a      	ldr	r2, [r7, #0]
 800277a:	4413      	add	r3, r2
 800277c:	b2ca      	uxtb	r2, r1
 800277e:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->velocity_length >> (8 * 3)) & 0xFF;
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002784:	0e19      	lsrs	r1, r3, #24
 8002786:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002788:	3303      	adds	r3, #3
 800278a:	683a      	ldr	r2, [r7, #0]
 800278c:	4413      	add	r3, r2
 800278e:	b2ca      	uxtb	r2, r1
 8002790:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->velocity_length);
 8002792:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002794:	3304      	adds	r3, #4
 8002796:	637b      	str	r3, [r7, #52]	; 0x34
      for( uint32_t i = 0; i < velocity_length; i++){
 8002798:	2300      	movs	r3, #0
 800279a:	62bb      	str	r3, [r7, #40]	; 0x28
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80027a0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80027a2:	429a      	cmp	r2, r3
 80027a4:	d27e      	bcs.n	80028a4 <_ZNK11sensor_msgs10JointState9serializeEPh+0x37c>
      union {
        double real;
        uint64_t base;
      } u_velocityi;
      u_velocityi.real = this->velocity[i];
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80027aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80027ac:	00db      	lsls	r3, r3, #3
 80027ae:	4413      	add	r3, r2
 80027b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80027b4:	e9c7 2304 	strd	r2, r3, [r7, #16]
      *(outbuffer + offset + 0) = (u_velocityi.base >> (8 * 0)) & 0xFF;
 80027b8:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80027bc:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80027be:	6838      	ldr	r0, [r7, #0]
 80027c0:	4401      	add	r1, r0
 80027c2:	b2d3      	uxtb	r3, r2
 80027c4:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 1) = (u_velocityi.base >> (8 * 1)) & 0xFF;
 80027c6:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80027ca:	f04f 0200 	mov.w	r2, #0
 80027ce:	f04f 0300 	mov.w	r3, #0
 80027d2:	0a02      	lsrs	r2, r0, #8
 80027d4:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 80027d8:	0a0b      	lsrs	r3, r1, #8
 80027da:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80027dc:	3101      	adds	r1, #1
 80027de:	6838      	ldr	r0, [r7, #0]
 80027e0:	4401      	add	r1, r0
 80027e2:	b2d3      	uxtb	r3, r2
 80027e4:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 2) = (u_velocityi.base >> (8 * 2)) & 0xFF;
 80027e6:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80027ea:	f04f 0200 	mov.w	r2, #0
 80027ee:	f04f 0300 	mov.w	r3, #0
 80027f2:	0c02      	lsrs	r2, r0, #16
 80027f4:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80027f8:	0c0b      	lsrs	r3, r1, #16
 80027fa:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80027fc:	3102      	adds	r1, #2
 80027fe:	6838      	ldr	r0, [r7, #0]
 8002800:	4401      	add	r1, r0
 8002802:	b2d3      	uxtb	r3, r2
 8002804:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 3) = (u_velocityi.base >> (8 * 3)) & 0xFF;
 8002806:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800280a:	f04f 0200 	mov.w	r2, #0
 800280e:	f04f 0300 	mov.w	r3, #0
 8002812:	0e02      	lsrs	r2, r0, #24
 8002814:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8002818:	0e0b      	lsrs	r3, r1, #24
 800281a:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800281c:	3103      	adds	r1, #3
 800281e:	6838      	ldr	r0, [r7, #0]
 8002820:	4401      	add	r1, r0
 8002822:	b2d3      	uxtb	r3, r2
 8002824:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 4) = (u_velocityi.base >> (8 * 4)) & 0xFF;
 8002826:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800282a:	f04f 0200 	mov.w	r2, #0
 800282e:	f04f 0300 	mov.w	r3, #0
 8002832:	000a      	movs	r2, r1
 8002834:	2300      	movs	r3, #0
 8002836:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8002838:	3104      	adds	r1, #4
 800283a:	6838      	ldr	r0, [r7, #0]
 800283c:	4401      	add	r1, r0
 800283e:	b2d3      	uxtb	r3, r2
 8002840:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 5) = (u_velocityi.base >> (8 * 5)) & 0xFF;
 8002842:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8002846:	f04f 0200 	mov.w	r2, #0
 800284a:	f04f 0300 	mov.w	r3, #0
 800284e:	0a0a      	lsrs	r2, r1, #8
 8002850:	2300      	movs	r3, #0
 8002852:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8002854:	3105      	adds	r1, #5
 8002856:	6838      	ldr	r0, [r7, #0]
 8002858:	4401      	add	r1, r0
 800285a:	b2d3      	uxtb	r3, r2
 800285c:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 6) = (u_velocityi.base >> (8 * 6)) & 0xFF;
 800285e:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8002862:	f04f 0200 	mov.w	r2, #0
 8002866:	f04f 0300 	mov.w	r3, #0
 800286a:	0c0a      	lsrs	r2, r1, #16
 800286c:	2300      	movs	r3, #0
 800286e:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8002870:	3106      	adds	r1, #6
 8002872:	6838      	ldr	r0, [r7, #0]
 8002874:	4401      	add	r1, r0
 8002876:	b2d3      	uxtb	r3, r2
 8002878:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 7) = (u_velocityi.base >> (8 * 7)) & 0xFF;
 800287a:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800287e:	f04f 0200 	mov.w	r2, #0
 8002882:	f04f 0300 	mov.w	r3, #0
 8002886:	0e0a      	lsrs	r2, r1, #24
 8002888:	2300      	movs	r3, #0
 800288a:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800288c:	3107      	adds	r1, #7
 800288e:	6838      	ldr	r0, [r7, #0]
 8002890:	4401      	add	r1, r0
 8002892:	b2d3      	uxtb	r3, r2
 8002894:	700b      	strb	r3, [r1, #0]
      offset += sizeof(this->velocity[i]);
 8002896:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002898:	3308      	adds	r3, #8
 800289a:	637b      	str	r3, [r7, #52]	; 0x34
      for( uint32_t i = 0; i < velocity_length; i++){
 800289c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800289e:	3301      	adds	r3, #1
 80028a0:	62bb      	str	r3, [r7, #40]	; 0x28
 80028a2:	e77b      	b.n	800279c <_ZNK11sensor_msgs10JointState9serializeEPh+0x274>
      }
      *(outbuffer + offset + 0) = (this->effort_length >> (8 * 0)) & 0xFF;
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	6c59      	ldr	r1, [r3, #68]	; 0x44
 80028a8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80028aa:	683a      	ldr	r2, [r7, #0]
 80028ac:	4413      	add	r3, r2
 80028ae:	b2ca      	uxtb	r2, r1
 80028b0:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->effort_length >> (8 * 1)) & 0xFF;
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80028b6:	0a19      	lsrs	r1, r3, #8
 80028b8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80028ba:	3301      	adds	r3, #1
 80028bc:	683a      	ldr	r2, [r7, #0]
 80028be:	4413      	add	r3, r2
 80028c0:	b2ca      	uxtb	r2, r1
 80028c2:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->effort_length >> (8 * 2)) & 0xFF;
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80028c8:	0c19      	lsrs	r1, r3, #16
 80028ca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80028cc:	3302      	adds	r3, #2
 80028ce:	683a      	ldr	r2, [r7, #0]
 80028d0:	4413      	add	r3, r2
 80028d2:	b2ca      	uxtb	r2, r1
 80028d4:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->effort_length >> (8 * 3)) & 0xFF;
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80028da:	0e19      	lsrs	r1, r3, #24
 80028dc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80028de:	3303      	adds	r3, #3
 80028e0:	683a      	ldr	r2, [r7, #0]
 80028e2:	4413      	add	r3, r2
 80028e4:	b2ca      	uxtb	r2, r1
 80028e6:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->effort_length);
 80028e8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80028ea:	3304      	adds	r3, #4
 80028ec:	637b      	str	r3, [r7, #52]	; 0x34
      for( uint32_t i = 0; i < effort_length; i++){
 80028ee:	2300      	movs	r3, #0
 80028f0:	627b      	str	r3, [r7, #36]	; 0x24
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80028f6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80028f8:	429a      	cmp	r2, r3
 80028fa:	d27e      	bcs.n	80029fa <_ZNK11sensor_msgs10JointState9serializeEPh+0x4d2>
      union {
        double real;
        uint64_t base;
      } u_efforti;
      u_efforti.real = this->effort[i];
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002900:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002902:	00db      	lsls	r3, r3, #3
 8002904:	4413      	add	r3, r2
 8002906:	e9d3 2300 	ldrd	r2, r3, [r3]
 800290a:	e9c7 2302 	strd	r2, r3, [r7, #8]
      *(outbuffer + offset + 0) = (u_efforti.base >> (8 * 0)) & 0xFF;
 800290e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002912:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8002914:	6838      	ldr	r0, [r7, #0]
 8002916:	4401      	add	r1, r0
 8002918:	b2d3      	uxtb	r3, r2
 800291a:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 1) = (u_efforti.base >> (8 * 1)) & 0xFF;
 800291c:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8002920:	f04f 0200 	mov.w	r2, #0
 8002924:	f04f 0300 	mov.w	r3, #0
 8002928:	0a02      	lsrs	r2, r0, #8
 800292a:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 800292e:	0a0b      	lsrs	r3, r1, #8
 8002930:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8002932:	3101      	adds	r1, #1
 8002934:	6838      	ldr	r0, [r7, #0]
 8002936:	4401      	add	r1, r0
 8002938:	b2d3      	uxtb	r3, r2
 800293a:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 2) = (u_efforti.base >> (8 * 2)) & 0xFF;
 800293c:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8002940:	f04f 0200 	mov.w	r2, #0
 8002944:	f04f 0300 	mov.w	r3, #0
 8002948:	0c02      	lsrs	r2, r0, #16
 800294a:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800294e:	0c0b      	lsrs	r3, r1, #16
 8002950:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8002952:	3102      	adds	r1, #2
 8002954:	6838      	ldr	r0, [r7, #0]
 8002956:	4401      	add	r1, r0
 8002958:	b2d3      	uxtb	r3, r2
 800295a:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 3) = (u_efforti.base >> (8 * 3)) & 0xFF;
 800295c:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8002960:	f04f 0200 	mov.w	r2, #0
 8002964:	f04f 0300 	mov.w	r3, #0
 8002968:	0e02      	lsrs	r2, r0, #24
 800296a:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 800296e:	0e0b      	lsrs	r3, r1, #24
 8002970:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8002972:	3103      	adds	r1, #3
 8002974:	6838      	ldr	r0, [r7, #0]
 8002976:	4401      	add	r1, r0
 8002978:	b2d3      	uxtb	r3, r2
 800297a:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 4) = (u_efforti.base >> (8 * 4)) & 0xFF;
 800297c:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8002980:	f04f 0200 	mov.w	r2, #0
 8002984:	f04f 0300 	mov.w	r3, #0
 8002988:	000a      	movs	r2, r1
 800298a:	2300      	movs	r3, #0
 800298c:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800298e:	3104      	adds	r1, #4
 8002990:	6838      	ldr	r0, [r7, #0]
 8002992:	4401      	add	r1, r0
 8002994:	b2d3      	uxtb	r3, r2
 8002996:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 5) = (u_efforti.base >> (8 * 5)) & 0xFF;
 8002998:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800299c:	f04f 0200 	mov.w	r2, #0
 80029a0:	f04f 0300 	mov.w	r3, #0
 80029a4:	0a0a      	lsrs	r2, r1, #8
 80029a6:	2300      	movs	r3, #0
 80029a8:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80029aa:	3105      	adds	r1, #5
 80029ac:	6838      	ldr	r0, [r7, #0]
 80029ae:	4401      	add	r1, r0
 80029b0:	b2d3      	uxtb	r3, r2
 80029b2:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 6) = (u_efforti.base >> (8 * 6)) & 0xFF;
 80029b4:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80029b8:	f04f 0200 	mov.w	r2, #0
 80029bc:	f04f 0300 	mov.w	r3, #0
 80029c0:	0c0a      	lsrs	r2, r1, #16
 80029c2:	2300      	movs	r3, #0
 80029c4:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80029c6:	3106      	adds	r1, #6
 80029c8:	6838      	ldr	r0, [r7, #0]
 80029ca:	4401      	add	r1, r0
 80029cc:	b2d3      	uxtb	r3, r2
 80029ce:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 7) = (u_efforti.base >> (8 * 7)) & 0xFF;
 80029d0:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80029d4:	f04f 0200 	mov.w	r2, #0
 80029d8:	f04f 0300 	mov.w	r3, #0
 80029dc:	0e0a      	lsrs	r2, r1, #24
 80029de:	2300      	movs	r3, #0
 80029e0:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80029e2:	3107      	adds	r1, #7
 80029e4:	6838      	ldr	r0, [r7, #0]
 80029e6:	4401      	add	r1, r0
 80029e8:	b2d3      	uxtb	r3, r2
 80029ea:	700b      	strb	r3, [r1, #0]
      offset += sizeof(this->effort[i]);
 80029ec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80029ee:	3308      	adds	r3, #8
 80029f0:	637b      	str	r3, [r7, #52]	; 0x34
      for( uint32_t i = 0; i < effort_length; i++){
 80029f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029f4:	3301      	adds	r3, #1
 80029f6:	627b      	str	r3, [r7, #36]	; 0x24
 80029f8:	e77b      	b.n	80028f2 <_ZNK11sensor_msgs10JointState9serializeEPh+0x3ca>
      }
      return offset;
 80029fa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    }
 80029fc:	4618      	mov	r0, r3
 80029fe:	3738      	adds	r7, #56	; 0x38
 8002a00:	46bd      	mov	sp, r7
 8002a02:	bd80      	pop	{r7, pc}

08002a04 <_ZN11sensor_msgs10JointState11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer)
 8002a04:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002a08:	b0c6      	sub	sp, #280	; 0x118
 8002a0a:	af00      	add	r7, sp, #0
 8002a0c:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
 8002a10:	f8c7 10c8 	str.w	r1, [r7, #200]	; 0xc8
    {
      int offset = 0;
 8002a14:	2300      	movs	r3, #0
 8002a16:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
      offset += this->header.deserialize(inbuffer + offset);
 8002a1a:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8002a1e:	1d18      	adds	r0, r3, #4
 8002a20:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 8002a24:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8002a28:	4413      	add	r3, r2
 8002a2a:	4619      	mov	r1, r3
 8002a2c:	f7ff fc74 	bl	8002318 <_ZN8std_msgs6Header11deserializeEPh>
 8002a30:	4602      	mov	r2, r0
 8002a32:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002a36:	4413      	add	r3, r2
 8002a38:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
      uint32_t name_lengthT = ((uint32_t) (*(inbuffer + offset))); 
 8002a3c:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 8002a40:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8002a44:	4413      	add	r3, r2
 8002a46:	781b      	ldrb	r3, [r3, #0]
 8002a48:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
      name_lengthT |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1); 
 8002a4c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002a50:	1c5a      	adds	r2, r3, #1
 8002a52:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8002a56:	4413      	add	r3, r2
 8002a58:	781b      	ldrb	r3, [r3, #0]
 8002a5a:	021a      	lsls	r2, r3, #8
 8002a5c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002a60:	4313      	orrs	r3, r2
 8002a62:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
      name_lengthT |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2); 
 8002a66:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002a6a:	1c9a      	adds	r2, r3, #2
 8002a6c:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8002a70:	4413      	add	r3, r2
 8002a72:	781b      	ldrb	r3, [r3, #0]
 8002a74:	041a      	lsls	r2, r3, #16
 8002a76:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002a7a:	4313      	orrs	r3, r2
 8002a7c:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
      name_lengthT |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3); 
 8002a80:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002a84:	1cda      	adds	r2, r3, #3
 8002a86:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8002a8a:	4413      	add	r3, r2
 8002a8c:	781b      	ldrb	r3, [r3, #0]
 8002a8e:	061a      	lsls	r2, r3, #24
 8002a90:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002a94:	4313      	orrs	r3, r2
 8002a96:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
      offset += sizeof(this->name_length);
 8002a9a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002a9e:	3304      	adds	r3, #4
 8002aa0:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
      if(name_lengthT > name_length)
 8002aa4:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8002aa8:	699a      	ldr	r2, [r3, #24]
 8002aaa:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002aae:	4293      	cmp	r3, r2
 8002ab0:	d90d      	bls.n	8002ace <_ZN11sensor_msgs10JointState11deserializeEPh+0xca>
        this->name = (char**)realloc(this->name, name_lengthT * sizeof(char*));
 8002ab2:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8002ab6:	6a1a      	ldr	r2, [r3, #32]
 8002ab8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002abc:	009b      	lsls	r3, r3, #2
 8002abe:	4619      	mov	r1, r3
 8002ac0:	4610      	mov	r0, r2
 8002ac2:	f006 f8d9 	bl	8008c78 <realloc>
 8002ac6:	4602      	mov	r2, r0
 8002ac8:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8002acc:	621a      	str	r2, [r3, #32]
      name_length = name_lengthT;
 8002ace:	f8d7 20cc 	ldr.w	r2, [r7, #204]	; 0xcc
 8002ad2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002ad6:	6193      	str	r3, [r2, #24]
      for( uint32_t i = 0; i < name_length; i++){
 8002ad8:	2300      	movs	r3, #0
 8002ada:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 8002ade:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8002ae2:	699a      	ldr	r2, [r3, #24]
 8002ae4:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8002ae8:	4293      	cmp	r3, r2
 8002aea:	d25c      	bcs.n	8002ba6 <_ZN11sensor_msgs10JointState11deserializeEPh+0x1a2>
      uint32_t length_st_name;
      arrToVar(length_st_name, (inbuffer + offset));
 8002aec:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 8002af0:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8002af4:	441a      	add	r2, r3
 8002af6:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8002afa:	4611      	mov	r1, r2
 8002afc:	4618      	mov	r0, r3
 8002afe:	f000 fff0 	bl	8003ae2 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 8002b02:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002b06:	3304      	adds	r3, #4
 8002b08:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
      for(unsigned int k= offset; k< offset+length_st_name; ++k){
 8002b0c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002b10:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8002b14:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 8002b18:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8002b1c:	441a      	add	r2, r3
 8002b1e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002b22:	4293      	cmp	r3, r2
 8002b24:	d212      	bcs.n	8002b4c <_ZN11sensor_msgs10JointState11deserializeEPh+0x148>
          inbuffer[k-1]=inbuffer[k];
 8002b26:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8002b2a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002b2e:	18d1      	adds	r1, r2, r3
 8002b30:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002b34:	1e5a      	subs	r2, r3, #1
 8002b36:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8002b3a:	441a      	add	r2, r3
 8002b3c:	780b      	ldrb	r3, [r1, #0]
 8002b3e:	7013      	strb	r3, [r2, #0]
      for(unsigned int k= offset; k< offset+length_st_name; ++k){
 8002b40:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002b44:	3301      	adds	r3, #1
 8002b46:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8002b4a:	e7e3      	b.n	8002b14 <_ZN11sensor_msgs10JointState11deserializeEPh+0x110>
      }
      inbuffer[offset+length_st_name-1]=0;
 8002b4c:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 8002b50:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8002b54:	4413      	add	r3, r2
 8002b56:	1e5a      	subs	r2, r3, #1
 8002b58:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8002b5c:	441a      	add	r2, r3
 8002b5e:	2300      	movs	r3, #0
 8002b60:	7013      	strb	r3, [r2, #0]
      this->st_name = (char *)(inbuffer + offset-1);
 8002b62:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002b66:	1e5a      	subs	r2, r3, #1
 8002b68:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8002b6c:	441a      	add	r2, r3
 8002b6e:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8002b72:	61da      	str	r2, [r3, #28]
      offset += length_st_name;
 8002b74:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 8002b78:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8002b7c:	4413      	add	r3, r2
 8002b7e:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
        memcpy( &(this->name[i]), &(this->st_name), sizeof(char*));
 8002b82:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8002b86:	6a1a      	ldr	r2, [r3, #32]
 8002b88:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8002b8c:	009b      	lsls	r3, r3, #2
 8002b8e:	441a      	add	r2, r3
 8002b90:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8002b94:	331c      	adds	r3, #28
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	6013      	str	r3, [r2, #0]
      for( uint32_t i = 0; i < name_length; i++){
 8002b9a:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8002b9e:	3301      	adds	r3, #1
 8002ba0:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 8002ba4:	e79b      	b.n	8002ade <_ZN11sensor_msgs10JointState11deserializeEPh+0xda>
      }
      uint32_t position_lengthT = ((uint32_t) (*(inbuffer + offset))); 
 8002ba6:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 8002baa:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8002bae:	4413      	add	r3, r2
 8002bb0:	781b      	ldrb	r3, [r3, #0]
 8002bb2:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
      position_lengthT |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1); 
 8002bb6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002bba:	1c5a      	adds	r2, r3, #1
 8002bbc:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8002bc0:	4413      	add	r3, r2
 8002bc2:	781b      	ldrb	r3, [r3, #0]
 8002bc4:	021a      	lsls	r2, r3, #8
 8002bc6:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8002bca:	4313      	orrs	r3, r2
 8002bcc:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
      position_lengthT |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2); 
 8002bd0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002bd4:	1c9a      	adds	r2, r3, #2
 8002bd6:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8002bda:	4413      	add	r3, r2
 8002bdc:	781b      	ldrb	r3, [r3, #0]
 8002bde:	041a      	lsls	r2, r3, #16
 8002be0:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8002be4:	4313      	orrs	r3, r2
 8002be6:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
      position_lengthT |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3); 
 8002bea:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002bee:	1cda      	adds	r2, r3, #3
 8002bf0:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8002bf4:	4413      	add	r3, r2
 8002bf6:	781b      	ldrb	r3, [r3, #0]
 8002bf8:	061a      	lsls	r2, r3, #24
 8002bfa:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8002bfe:	4313      	orrs	r3, r2
 8002c00:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
      offset += sizeof(this->position_length);
 8002c04:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002c08:	3304      	adds	r3, #4
 8002c0a:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
      if(position_lengthT > position_length)
 8002c0e:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8002c12:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002c14:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8002c18:	4293      	cmp	r3, r2
 8002c1a:	d90d      	bls.n	8002c38 <_ZN11sensor_msgs10JointState11deserializeEPh+0x234>
        this->position = (double*)realloc(this->position, position_lengthT * sizeof(double));
 8002c1c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8002c20:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002c22:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8002c26:	00db      	lsls	r3, r3, #3
 8002c28:	4619      	mov	r1, r3
 8002c2a:	4610      	mov	r0, r2
 8002c2c:	f006 f824 	bl	8008c78 <realloc>
 8002c30:	4602      	mov	r2, r0
 8002c32:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8002c36:	631a      	str	r2, [r3, #48]	; 0x30
      position_length = position_lengthT;
 8002c38:	f8d7 20cc 	ldr.w	r2, [r7, #204]	; 0xcc
 8002c3c:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8002c40:	6253      	str	r3, [r2, #36]	; 0x24
      for( uint32_t i = 0; i < position_length; i++){
 8002c42:	2300      	movs	r3, #0
 8002c44:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 8002c48:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8002c4c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002c4e:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8002c52:	4293      	cmp	r3, r2
 8002c54:	f080 810f 	bcs.w	8002e76 <_ZN11sensor_msgs10JointState11deserializeEPh+0x472>
      union {
        double real;
        uint64_t base;
      } u_st_position;
      u_st_position.base = 0;
 8002c58:	f04f 0200 	mov.w	r2, #0
 8002c5c:	f04f 0300 	mov.w	r3, #0
 8002c60:	e9c7 2338 	strd	r2, r3, [r7, #224]	; 0xe0
      u_st_position.base |= ((uint64_t) (*(inbuffer + offset + 0))) << (8 * 0);
 8002c64:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8002c68:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 8002c6c:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8002c70:	4413      	add	r3, r2
 8002c72:	781b      	ldrb	r3, [r3, #0]
 8002c74:	b2da      	uxtb	r2, r3
 8002c76:	f04f 0300 	mov.w	r3, #0
 8002c7a:	ea40 0402 	orr.w	r4, r0, r2
 8002c7e:	f8c7 40c0 	str.w	r4, [r7, #192]	; 0xc0
 8002c82:	430b      	orrs	r3, r1
 8002c84:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8002c88:	e9d7 3430 	ldrd	r3, r4, [r7, #192]	; 0xc0
 8002c8c:	e9c7 3438 	strd	r3, r4, [r7, #224]	; 0xe0
      u_st_position.base |= ((uint64_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8002c90:	e9d7 4538 	ldrd	r4, r5, [r7, #224]	; 0xe0
 8002c94:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002c98:	1c5a      	adds	r2, r3, #1
 8002c9a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8002c9e:	4413      	add	r3, r2
 8002ca0:	781b      	ldrb	r3, [r3, #0]
 8002ca2:	b2da      	uxtb	r2, r3
 8002ca4:	f04f 0300 	mov.w	r3, #0
 8002ca8:	f04f 0000 	mov.w	r0, #0
 8002cac:	f04f 0100 	mov.w	r1, #0
 8002cb0:	0219      	lsls	r1, r3, #8
 8002cb2:	ea41 6112 	orr.w	r1, r1, r2, lsr #24
 8002cb6:	0210      	lsls	r0, r2, #8
 8002cb8:	ea44 0300 	orr.w	r3, r4, r0
 8002cbc:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8002cc0:	ea45 0301 	orr.w	r3, r5, r1
 8002cc4:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8002cc8:	e9d7 342e 	ldrd	r3, r4, [r7, #184]	; 0xb8
 8002ccc:	e9c7 3438 	strd	r3, r4, [r7, #224]	; 0xe0
      u_st_position.base |= ((uint64_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8002cd0:	e9d7 4538 	ldrd	r4, r5, [r7, #224]	; 0xe0
 8002cd4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002cd8:	1c9a      	adds	r2, r3, #2
 8002cda:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8002cde:	4413      	add	r3, r2
 8002ce0:	781b      	ldrb	r3, [r3, #0]
 8002ce2:	b2da      	uxtb	r2, r3
 8002ce4:	f04f 0300 	mov.w	r3, #0
 8002ce8:	f04f 0000 	mov.w	r0, #0
 8002cec:	f04f 0100 	mov.w	r1, #0
 8002cf0:	0419      	lsls	r1, r3, #16
 8002cf2:	ea41 4112 	orr.w	r1, r1, r2, lsr #16
 8002cf6:	0410      	lsls	r0, r2, #16
 8002cf8:	ea44 0300 	orr.w	r3, r4, r0
 8002cfc:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8002d00:	ea45 0301 	orr.w	r3, r5, r1
 8002d04:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8002d08:	e9d7 342c 	ldrd	r3, r4, [r7, #176]	; 0xb0
 8002d0c:	e9c7 3438 	strd	r3, r4, [r7, #224]	; 0xe0
      u_st_position.base |= ((uint64_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8002d10:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8002d14:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002d18:	1cda      	adds	r2, r3, #3
 8002d1a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8002d1e:	4413      	add	r3, r2
 8002d20:	781b      	ldrb	r3, [r3, #0]
 8002d22:	b2da      	uxtb	r2, r3
 8002d24:	f04f 0300 	mov.w	r3, #0
 8002d28:	ea4f 2912 	mov.w	r9, r2, lsr #8
 8002d2c:	ea4f 6802 	mov.w	r8, r2, lsl #24
 8002d30:	ea40 0308 	orr.w	r3, r0, r8
 8002d34:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8002d38:	ea41 0309 	orr.w	r3, r1, r9
 8002d3c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8002d40:	e9d7 342a 	ldrd	r3, r4, [r7, #168]	; 0xa8
 8002d44:	e9c7 3438 	strd	r3, r4, [r7, #224]	; 0xe0
      u_st_position.base |= ((uint64_t) (*(inbuffer + offset + 4))) << (8 * 4);
 8002d48:	e9d7 4538 	ldrd	r4, r5, [r7, #224]	; 0xe0
 8002d4c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002d50:	1d1a      	adds	r2, r3, #4
 8002d52:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8002d56:	4413      	add	r3, r2
 8002d58:	781b      	ldrb	r3, [r3, #0]
 8002d5a:	b2da      	uxtb	r2, r3
 8002d5c:	f04f 0300 	mov.w	r3, #0
 8002d60:	f04f 0000 	mov.w	r0, #0
 8002d64:	f04f 0100 	mov.w	r1, #0
 8002d68:	0011      	movs	r1, r2
 8002d6a:	2000      	movs	r0, #0
 8002d6c:	ea44 0300 	orr.w	r3, r4, r0
 8002d70:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8002d74:	ea45 0301 	orr.w	r3, r5, r1
 8002d78:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8002d7c:	e9d7 3428 	ldrd	r3, r4, [r7, #160]	; 0xa0
 8002d80:	e9c7 3438 	strd	r3, r4, [r7, #224]	; 0xe0
      u_st_position.base |= ((uint64_t) (*(inbuffer + offset + 5))) << (8 * 5);
 8002d84:	e9d7 4538 	ldrd	r4, r5, [r7, #224]	; 0xe0
 8002d88:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002d8c:	1d5a      	adds	r2, r3, #5
 8002d8e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8002d92:	4413      	add	r3, r2
 8002d94:	781b      	ldrb	r3, [r3, #0]
 8002d96:	b2da      	uxtb	r2, r3
 8002d98:	f04f 0300 	mov.w	r3, #0
 8002d9c:	f04f 0000 	mov.w	r0, #0
 8002da0:	f04f 0100 	mov.w	r1, #0
 8002da4:	0211      	lsls	r1, r2, #8
 8002da6:	2000      	movs	r0, #0
 8002da8:	ea44 0300 	orr.w	r3, r4, r0
 8002dac:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8002db0:	ea45 0301 	orr.w	r3, r5, r1
 8002db4:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8002db8:	e9d7 3426 	ldrd	r3, r4, [r7, #152]	; 0x98
 8002dbc:	e9c7 3438 	strd	r3, r4, [r7, #224]	; 0xe0
      u_st_position.base |= ((uint64_t) (*(inbuffer + offset + 6))) << (8 * 6);
 8002dc0:	e9d7 4538 	ldrd	r4, r5, [r7, #224]	; 0xe0
 8002dc4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002dc8:	1d9a      	adds	r2, r3, #6
 8002dca:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8002dce:	4413      	add	r3, r2
 8002dd0:	781b      	ldrb	r3, [r3, #0]
 8002dd2:	b2da      	uxtb	r2, r3
 8002dd4:	f04f 0300 	mov.w	r3, #0
 8002dd8:	f04f 0000 	mov.w	r0, #0
 8002ddc:	f04f 0100 	mov.w	r1, #0
 8002de0:	0411      	lsls	r1, r2, #16
 8002de2:	2000      	movs	r0, #0
 8002de4:	ea44 0300 	orr.w	r3, r4, r0
 8002de8:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8002dec:	ea45 0301 	orr.w	r3, r5, r1
 8002df0:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8002df4:	e9d7 3424 	ldrd	r3, r4, [r7, #144]	; 0x90
 8002df8:	e9c7 3438 	strd	r3, r4, [r7, #224]	; 0xe0
      u_st_position.base |= ((uint64_t) (*(inbuffer + offset + 7))) << (8 * 7);
 8002dfc:	e9d7 4538 	ldrd	r4, r5, [r7, #224]	; 0xe0
 8002e00:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002e04:	1dda      	adds	r2, r3, #7
 8002e06:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8002e0a:	4413      	add	r3, r2
 8002e0c:	781b      	ldrb	r3, [r3, #0]
 8002e0e:	b2da      	uxtb	r2, r3
 8002e10:	f04f 0300 	mov.w	r3, #0
 8002e14:	f04f 0000 	mov.w	r0, #0
 8002e18:	f04f 0100 	mov.w	r1, #0
 8002e1c:	0611      	lsls	r1, r2, #24
 8002e1e:	2000      	movs	r0, #0
 8002e20:	ea44 0300 	orr.w	r3, r4, r0
 8002e24:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8002e28:	ea45 0301 	orr.w	r3, r5, r1
 8002e2c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8002e30:	e9d7 3422 	ldrd	r3, r4, [r7, #136]	; 0x88
 8002e34:	e9c7 3438 	strd	r3, r4, [r7, #224]	; 0xe0
      this->st_position = u_st_position.real;
 8002e38:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8002e3c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8002e40:	e9c3 010a 	strd	r0, r1, [r3, #40]	; 0x28
      offset += sizeof(this->st_position);
 8002e44:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002e48:	3308      	adds	r3, #8
 8002e4a:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
        memcpy( &(this->position[i]), &(this->st_position), sizeof(double));
 8002e4e:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8002e52:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002e54:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8002e58:	00db      	lsls	r3, r3, #3
 8002e5a:	18d0      	adds	r0, r2, r3
 8002e5c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8002e60:	3328      	adds	r3, #40	; 0x28
 8002e62:	2208      	movs	r2, #8
 8002e64:	4619      	mov	r1, r3
 8002e66:	f005 fef1 	bl	8008c4c <memcpy>
      for( uint32_t i = 0; i < position_length; i++){
 8002e6a:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8002e6e:	3301      	adds	r3, #1
 8002e70:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 8002e74:	e6e8      	b.n	8002c48 <_ZN11sensor_msgs10JointState11deserializeEPh+0x244>
      }
      uint32_t velocity_lengthT = ((uint32_t) (*(inbuffer + offset))); 
 8002e76:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 8002e7a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8002e7e:	4413      	add	r3, r2
 8002e80:	781b      	ldrb	r3, [r3, #0]
 8002e82:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
      velocity_lengthT |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1); 
 8002e86:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002e8a:	1c5a      	adds	r2, r3, #1
 8002e8c:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8002e90:	4413      	add	r3, r2
 8002e92:	781b      	ldrb	r3, [r3, #0]
 8002e94:	021a      	lsls	r2, r3, #8
 8002e96:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002e9a:	4313      	orrs	r3, r2
 8002e9c:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
      velocity_lengthT |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2); 
 8002ea0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002ea4:	1c9a      	adds	r2, r3, #2
 8002ea6:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8002eaa:	4413      	add	r3, r2
 8002eac:	781b      	ldrb	r3, [r3, #0]
 8002eae:	041a      	lsls	r2, r3, #16
 8002eb0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002eb4:	4313      	orrs	r3, r2
 8002eb6:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
      velocity_lengthT |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3); 
 8002eba:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002ebe:	1cda      	adds	r2, r3, #3
 8002ec0:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8002ec4:	4413      	add	r3, r2
 8002ec6:	781b      	ldrb	r3, [r3, #0]
 8002ec8:	061a      	lsls	r2, r3, #24
 8002eca:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002ece:	4313      	orrs	r3, r2
 8002ed0:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
      offset += sizeof(this->velocity_length);
 8002ed4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002ed8:	3304      	adds	r3, #4
 8002eda:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
      if(velocity_lengthT > velocity_length)
 8002ede:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8002ee2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002ee4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002ee8:	4293      	cmp	r3, r2
 8002eea:	d90d      	bls.n	8002f08 <_ZN11sensor_msgs10JointState11deserializeEPh+0x504>
        this->velocity = (double*)realloc(this->velocity, velocity_lengthT * sizeof(double));
 8002eec:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8002ef0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002ef2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002ef6:	00db      	lsls	r3, r3, #3
 8002ef8:	4619      	mov	r1, r3
 8002efa:	4610      	mov	r0, r2
 8002efc:	f005 febc 	bl	8008c78 <realloc>
 8002f00:	4602      	mov	r2, r0
 8002f02:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8002f06:	641a      	str	r2, [r3, #64]	; 0x40
      velocity_length = velocity_lengthT;
 8002f08:	f8d7 20cc 	ldr.w	r2, [r7, #204]	; 0xcc
 8002f0c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002f10:	6353      	str	r3, [r2, #52]	; 0x34
      for( uint32_t i = 0; i < velocity_length; i++){
 8002f12:	2300      	movs	r3, #0
 8002f14:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8002f18:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8002f1c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002f1e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8002f22:	4293      	cmp	r3, r2
 8002f24:	f080 8101 	bcs.w	800312a <_ZN11sensor_msgs10JointState11deserializeEPh+0x726>
      union {
        double real;
        uint64_t base;
      } u_st_velocity;
      u_st_velocity.base = 0;
 8002f28:	f04f 0200 	mov.w	r2, #0
 8002f2c:	f04f 0300 	mov.w	r3, #0
 8002f30:	e9c7 2336 	strd	r2, r3, [r7, #216]	; 0xd8
      u_st_velocity.base |= ((uint64_t) (*(inbuffer + offset + 0))) << (8 * 0);
 8002f34:	e9d7 0136 	ldrd	r0, r1, [r7, #216]	; 0xd8
 8002f38:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 8002f3c:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8002f40:	4413      	add	r3, r2
 8002f42:	781b      	ldrb	r3, [r3, #0]
 8002f44:	b2da      	uxtb	r2, r3
 8002f46:	f04f 0300 	mov.w	r3, #0
 8002f4a:	ea40 0402 	orr.w	r4, r0, r2
 8002f4e:	f8c7 4080 	str.w	r4, [r7, #128]	; 0x80
 8002f52:	430b      	orrs	r3, r1
 8002f54:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8002f58:	e9d7 3420 	ldrd	r3, r4, [r7, #128]	; 0x80
 8002f5c:	e9c7 3436 	strd	r3, r4, [r7, #216]	; 0xd8
      u_st_velocity.base |= ((uint64_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8002f60:	e9d7 4536 	ldrd	r4, r5, [r7, #216]	; 0xd8
 8002f64:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002f68:	1c5a      	adds	r2, r3, #1
 8002f6a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8002f6e:	4413      	add	r3, r2
 8002f70:	781b      	ldrb	r3, [r3, #0]
 8002f72:	b2da      	uxtb	r2, r3
 8002f74:	f04f 0300 	mov.w	r3, #0
 8002f78:	f04f 0000 	mov.w	r0, #0
 8002f7c:	f04f 0100 	mov.w	r1, #0
 8002f80:	0219      	lsls	r1, r3, #8
 8002f82:	ea41 6112 	orr.w	r1, r1, r2, lsr #24
 8002f86:	0210      	lsls	r0, r2, #8
 8002f88:	ea44 0300 	orr.w	r3, r4, r0
 8002f8c:	67bb      	str	r3, [r7, #120]	; 0x78
 8002f8e:	ea45 0301 	orr.w	r3, r5, r1
 8002f92:	67fb      	str	r3, [r7, #124]	; 0x7c
 8002f94:	e9d7 341e 	ldrd	r3, r4, [r7, #120]	; 0x78
 8002f98:	e9c7 3436 	strd	r3, r4, [r7, #216]	; 0xd8
      u_st_velocity.base |= ((uint64_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8002f9c:	e9d7 4536 	ldrd	r4, r5, [r7, #216]	; 0xd8
 8002fa0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002fa4:	1c9a      	adds	r2, r3, #2
 8002fa6:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8002faa:	4413      	add	r3, r2
 8002fac:	781b      	ldrb	r3, [r3, #0]
 8002fae:	b2da      	uxtb	r2, r3
 8002fb0:	f04f 0300 	mov.w	r3, #0
 8002fb4:	f04f 0000 	mov.w	r0, #0
 8002fb8:	f04f 0100 	mov.w	r1, #0
 8002fbc:	0419      	lsls	r1, r3, #16
 8002fbe:	ea41 4112 	orr.w	r1, r1, r2, lsr #16
 8002fc2:	0410      	lsls	r0, r2, #16
 8002fc4:	ea44 0300 	orr.w	r3, r4, r0
 8002fc8:	673b      	str	r3, [r7, #112]	; 0x70
 8002fca:	ea45 0301 	orr.w	r3, r5, r1
 8002fce:	677b      	str	r3, [r7, #116]	; 0x74
 8002fd0:	e9d7 341c 	ldrd	r3, r4, [r7, #112]	; 0x70
 8002fd4:	e9c7 3436 	strd	r3, r4, [r7, #216]	; 0xd8
      u_st_velocity.base |= ((uint64_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8002fd8:	e9d7 0136 	ldrd	r0, r1, [r7, #216]	; 0xd8
 8002fdc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002fe0:	1cda      	adds	r2, r3, #3
 8002fe2:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8002fe6:	4413      	add	r3, r2
 8002fe8:	781b      	ldrb	r3, [r3, #0]
 8002fea:	b2da      	uxtb	r2, r3
 8002fec:	f04f 0300 	mov.w	r3, #0
 8002ff0:	ea4f 2b12 	mov.w	fp, r2, lsr #8
 8002ff4:	ea4f 6a02 	mov.w	sl, r2, lsl #24
 8002ff8:	ea40 030a 	orr.w	r3, r0, sl
 8002ffc:	66bb      	str	r3, [r7, #104]	; 0x68
 8002ffe:	ea41 030b 	orr.w	r3, r1, fp
 8003002:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003004:	e9d7 341a 	ldrd	r3, r4, [r7, #104]	; 0x68
 8003008:	e9c7 3436 	strd	r3, r4, [r7, #216]	; 0xd8
      u_st_velocity.base |= ((uint64_t) (*(inbuffer + offset + 4))) << (8 * 4);
 800300c:	e9d7 4536 	ldrd	r4, r5, [r7, #216]	; 0xd8
 8003010:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003014:	1d1a      	adds	r2, r3, #4
 8003016:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800301a:	4413      	add	r3, r2
 800301c:	781b      	ldrb	r3, [r3, #0]
 800301e:	b2da      	uxtb	r2, r3
 8003020:	f04f 0300 	mov.w	r3, #0
 8003024:	f04f 0000 	mov.w	r0, #0
 8003028:	f04f 0100 	mov.w	r1, #0
 800302c:	0011      	movs	r1, r2
 800302e:	2000      	movs	r0, #0
 8003030:	ea44 0300 	orr.w	r3, r4, r0
 8003034:	663b      	str	r3, [r7, #96]	; 0x60
 8003036:	ea45 0301 	orr.w	r3, r5, r1
 800303a:	667b      	str	r3, [r7, #100]	; 0x64
 800303c:	e9d7 3418 	ldrd	r3, r4, [r7, #96]	; 0x60
 8003040:	e9c7 3436 	strd	r3, r4, [r7, #216]	; 0xd8
      u_st_velocity.base |= ((uint64_t) (*(inbuffer + offset + 5))) << (8 * 5);
 8003044:	e9d7 4536 	ldrd	r4, r5, [r7, #216]	; 0xd8
 8003048:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800304c:	1d5a      	adds	r2, r3, #5
 800304e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8003052:	4413      	add	r3, r2
 8003054:	781b      	ldrb	r3, [r3, #0]
 8003056:	b2da      	uxtb	r2, r3
 8003058:	f04f 0300 	mov.w	r3, #0
 800305c:	f04f 0000 	mov.w	r0, #0
 8003060:	f04f 0100 	mov.w	r1, #0
 8003064:	0211      	lsls	r1, r2, #8
 8003066:	2000      	movs	r0, #0
 8003068:	ea44 0300 	orr.w	r3, r4, r0
 800306c:	65bb      	str	r3, [r7, #88]	; 0x58
 800306e:	ea45 0301 	orr.w	r3, r5, r1
 8003072:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003074:	e9d7 3416 	ldrd	r3, r4, [r7, #88]	; 0x58
 8003078:	e9c7 3436 	strd	r3, r4, [r7, #216]	; 0xd8
      u_st_velocity.base |= ((uint64_t) (*(inbuffer + offset + 6))) << (8 * 6);
 800307c:	e9d7 4536 	ldrd	r4, r5, [r7, #216]	; 0xd8
 8003080:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003084:	1d9a      	adds	r2, r3, #6
 8003086:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800308a:	4413      	add	r3, r2
 800308c:	781b      	ldrb	r3, [r3, #0]
 800308e:	b2da      	uxtb	r2, r3
 8003090:	f04f 0300 	mov.w	r3, #0
 8003094:	f04f 0000 	mov.w	r0, #0
 8003098:	f04f 0100 	mov.w	r1, #0
 800309c:	0411      	lsls	r1, r2, #16
 800309e:	2000      	movs	r0, #0
 80030a0:	ea44 0300 	orr.w	r3, r4, r0
 80030a4:	653b      	str	r3, [r7, #80]	; 0x50
 80030a6:	ea45 0301 	orr.w	r3, r5, r1
 80030aa:	657b      	str	r3, [r7, #84]	; 0x54
 80030ac:	e9d7 3414 	ldrd	r3, r4, [r7, #80]	; 0x50
 80030b0:	e9c7 3436 	strd	r3, r4, [r7, #216]	; 0xd8
      u_st_velocity.base |= ((uint64_t) (*(inbuffer + offset + 7))) << (8 * 7);
 80030b4:	e9d7 4536 	ldrd	r4, r5, [r7, #216]	; 0xd8
 80030b8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80030bc:	1dda      	adds	r2, r3, #7
 80030be:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80030c2:	4413      	add	r3, r2
 80030c4:	781b      	ldrb	r3, [r3, #0]
 80030c6:	b2da      	uxtb	r2, r3
 80030c8:	f04f 0300 	mov.w	r3, #0
 80030cc:	f04f 0000 	mov.w	r0, #0
 80030d0:	f04f 0100 	mov.w	r1, #0
 80030d4:	0611      	lsls	r1, r2, #24
 80030d6:	2000      	movs	r0, #0
 80030d8:	ea44 0300 	orr.w	r3, r4, r0
 80030dc:	64bb      	str	r3, [r7, #72]	; 0x48
 80030de:	ea45 0301 	orr.w	r3, r5, r1
 80030e2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80030e4:	e9d7 3412 	ldrd	r3, r4, [r7, #72]	; 0x48
 80030e8:	e9c7 3436 	strd	r3, r4, [r7, #216]	; 0xd8
      this->st_velocity = u_st_velocity.real;
 80030ec:	e9d7 0136 	ldrd	r0, r1, [r7, #216]	; 0xd8
 80030f0:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80030f4:	e9c3 010e 	strd	r0, r1, [r3, #56]	; 0x38
      offset += sizeof(this->st_velocity);
 80030f8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80030fc:	3308      	adds	r3, #8
 80030fe:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
        memcpy( &(this->velocity[i]), &(this->st_velocity), sizeof(double));
 8003102:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8003106:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003108:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800310c:	00db      	lsls	r3, r3, #3
 800310e:	18d0      	adds	r0, r2, r3
 8003110:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8003114:	3338      	adds	r3, #56	; 0x38
 8003116:	2208      	movs	r2, #8
 8003118:	4619      	mov	r1, r3
 800311a:	f005 fd97 	bl	8008c4c <memcpy>
      for( uint32_t i = 0; i < velocity_length; i++){
 800311e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003122:	3301      	adds	r3, #1
 8003124:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8003128:	e6f6      	b.n	8002f18 <_ZN11sensor_msgs10JointState11deserializeEPh+0x514>
      }
      uint32_t effort_lengthT = ((uint32_t) (*(inbuffer + offset))); 
 800312a:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 800312e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8003132:	4413      	add	r3, r2
 8003134:	781b      	ldrb	r3, [r3, #0]
 8003136:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
      effort_lengthT |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1); 
 800313a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800313e:	1c5a      	adds	r2, r3, #1
 8003140:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8003144:	4413      	add	r3, r2
 8003146:	781b      	ldrb	r3, [r3, #0]
 8003148:	021a      	lsls	r2, r3, #8
 800314a:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800314e:	4313      	orrs	r3, r2
 8003150:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
      effort_lengthT |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2); 
 8003154:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003158:	1c9a      	adds	r2, r3, #2
 800315a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800315e:	4413      	add	r3, r2
 8003160:	781b      	ldrb	r3, [r3, #0]
 8003162:	041a      	lsls	r2, r3, #16
 8003164:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8003168:	4313      	orrs	r3, r2
 800316a:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
      effort_lengthT |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3); 
 800316e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003172:	1cda      	adds	r2, r3, #3
 8003174:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8003178:	4413      	add	r3, r2
 800317a:	781b      	ldrb	r3, [r3, #0]
 800317c:	061a      	lsls	r2, r3, #24
 800317e:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8003182:	4313      	orrs	r3, r2
 8003184:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
      offset += sizeof(this->effort_length);
 8003188:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800318c:	3304      	adds	r3, #4
 800318e:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
      if(effort_lengthT > effort_length)
 8003192:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8003196:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003198:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800319c:	4293      	cmp	r3, r2
 800319e:	d90d      	bls.n	80031bc <_ZN11sensor_msgs10JointState11deserializeEPh+0x7b8>
        this->effort = (double*)realloc(this->effort, effort_lengthT * sizeof(double));
 80031a0:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80031a4:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80031a6:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 80031aa:	00db      	lsls	r3, r3, #3
 80031ac:	4619      	mov	r1, r3
 80031ae:	4610      	mov	r0, r2
 80031b0:	f005 fd62 	bl	8008c78 <realloc>
 80031b4:	4602      	mov	r2, r0
 80031b6:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80031ba:	651a      	str	r2, [r3, #80]	; 0x50
      effort_length = effort_lengthT;
 80031bc:	f8d7 20cc 	ldr.w	r2, [r7, #204]	; 0xcc
 80031c0:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 80031c4:	6453      	str	r3, [r2, #68]	; 0x44
      for( uint32_t i = 0; i < effort_length; i++){
 80031c6:	2300      	movs	r3, #0
 80031c8:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 80031cc:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80031d0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80031d2:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 80031d6:	4293      	cmp	r3, r2
 80031d8:	f080 8101 	bcs.w	80033de <_ZN11sensor_msgs10JointState11deserializeEPh+0x9da>
      union {
        double real;
        uint64_t base;
      } u_st_effort;
      u_st_effort.base = 0;
 80031dc:	f04f 0200 	mov.w	r2, #0
 80031e0:	f04f 0300 	mov.w	r3, #0
 80031e4:	e9c7 2334 	strd	r2, r3, [r7, #208]	; 0xd0
      u_st_effort.base |= ((uint64_t) (*(inbuffer + offset + 0))) << (8 * 0);
 80031e8:	e9d7 0134 	ldrd	r0, r1, [r7, #208]	; 0xd0
 80031ec:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 80031f0:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80031f4:	4413      	add	r3, r2
 80031f6:	781b      	ldrb	r3, [r3, #0]
 80031f8:	b2da      	uxtb	r2, r3
 80031fa:	f04f 0300 	mov.w	r3, #0
 80031fe:	ea40 0402 	orr.w	r4, r0, r2
 8003202:	643c      	str	r4, [r7, #64]	; 0x40
 8003204:	430b      	orrs	r3, r1
 8003206:	647b      	str	r3, [r7, #68]	; 0x44
 8003208:	e9d7 3410 	ldrd	r3, r4, [r7, #64]	; 0x40
 800320c:	e9c7 3434 	strd	r3, r4, [r7, #208]	; 0xd0
      u_st_effort.base |= ((uint64_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8003210:	e9d7 4534 	ldrd	r4, r5, [r7, #208]	; 0xd0
 8003214:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003218:	1c5a      	adds	r2, r3, #1
 800321a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800321e:	4413      	add	r3, r2
 8003220:	781b      	ldrb	r3, [r3, #0]
 8003222:	b2da      	uxtb	r2, r3
 8003224:	f04f 0300 	mov.w	r3, #0
 8003228:	f04f 0000 	mov.w	r0, #0
 800322c:	f04f 0100 	mov.w	r1, #0
 8003230:	0219      	lsls	r1, r3, #8
 8003232:	ea41 6112 	orr.w	r1, r1, r2, lsr #24
 8003236:	0210      	lsls	r0, r2, #8
 8003238:	ea44 0300 	orr.w	r3, r4, r0
 800323c:	63bb      	str	r3, [r7, #56]	; 0x38
 800323e:	ea45 0301 	orr.w	r3, r5, r1
 8003242:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003244:	e9d7 340e 	ldrd	r3, r4, [r7, #56]	; 0x38
 8003248:	e9c7 3434 	strd	r3, r4, [r7, #208]	; 0xd0
      u_st_effort.base |= ((uint64_t) (*(inbuffer + offset + 2))) << (8 * 2);
 800324c:	e9d7 4534 	ldrd	r4, r5, [r7, #208]	; 0xd0
 8003250:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003254:	1c9a      	adds	r2, r3, #2
 8003256:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800325a:	4413      	add	r3, r2
 800325c:	781b      	ldrb	r3, [r3, #0]
 800325e:	b2da      	uxtb	r2, r3
 8003260:	f04f 0300 	mov.w	r3, #0
 8003264:	f04f 0000 	mov.w	r0, #0
 8003268:	f04f 0100 	mov.w	r1, #0
 800326c:	0419      	lsls	r1, r3, #16
 800326e:	ea41 4112 	orr.w	r1, r1, r2, lsr #16
 8003272:	0410      	lsls	r0, r2, #16
 8003274:	ea44 0300 	orr.w	r3, r4, r0
 8003278:	633b      	str	r3, [r7, #48]	; 0x30
 800327a:	ea45 0301 	orr.w	r3, r5, r1
 800327e:	637b      	str	r3, [r7, #52]	; 0x34
 8003280:	e9d7 340c 	ldrd	r3, r4, [r7, #48]	; 0x30
 8003284:	e9c7 3434 	strd	r3, r4, [r7, #208]	; 0xd0
      u_st_effort.base |= ((uint64_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8003288:	e9d7 0134 	ldrd	r0, r1, [r7, #208]	; 0xd0
 800328c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003290:	1cda      	adds	r2, r3, #3
 8003292:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8003296:	4413      	add	r3, r2
 8003298:	781b      	ldrb	r3, [r3, #0]
 800329a:	b2da      	uxtb	r2, r3
 800329c:	f04f 0300 	mov.w	r3, #0
 80032a0:	0a14      	lsrs	r4, r2, #8
 80032a2:	62fc      	str	r4, [r7, #44]	; 0x2c
 80032a4:	0613      	lsls	r3, r2, #24
 80032a6:	62bb      	str	r3, [r7, #40]	; 0x28
 80032a8:	e9d7 450a 	ldrd	r4, r5, [r7, #40]	; 0x28
 80032ac:	4623      	mov	r3, r4
 80032ae:	4303      	orrs	r3, r0
 80032b0:	623b      	str	r3, [r7, #32]
 80032b2:	462b      	mov	r3, r5
 80032b4:	430b      	orrs	r3, r1
 80032b6:	627b      	str	r3, [r7, #36]	; 0x24
 80032b8:	e9d7 3408 	ldrd	r3, r4, [r7, #32]
 80032bc:	e9c7 3434 	strd	r3, r4, [r7, #208]	; 0xd0
      u_st_effort.base |= ((uint64_t) (*(inbuffer + offset + 4))) << (8 * 4);
 80032c0:	e9d7 4534 	ldrd	r4, r5, [r7, #208]	; 0xd0
 80032c4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80032c8:	1d1a      	adds	r2, r3, #4
 80032ca:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80032ce:	4413      	add	r3, r2
 80032d0:	781b      	ldrb	r3, [r3, #0]
 80032d2:	b2da      	uxtb	r2, r3
 80032d4:	f04f 0300 	mov.w	r3, #0
 80032d8:	f04f 0000 	mov.w	r0, #0
 80032dc:	f04f 0100 	mov.w	r1, #0
 80032e0:	0011      	movs	r1, r2
 80032e2:	2000      	movs	r0, #0
 80032e4:	ea44 0300 	orr.w	r3, r4, r0
 80032e8:	61bb      	str	r3, [r7, #24]
 80032ea:	ea45 0301 	orr.w	r3, r5, r1
 80032ee:	61fb      	str	r3, [r7, #28]
 80032f0:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
 80032f4:	e9c7 3434 	strd	r3, r4, [r7, #208]	; 0xd0
      u_st_effort.base |= ((uint64_t) (*(inbuffer + offset + 5))) << (8 * 5);
 80032f8:	e9d7 4534 	ldrd	r4, r5, [r7, #208]	; 0xd0
 80032fc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003300:	1d5a      	adds	r2, r3, #5
 8003302:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8003306:	4413      	add	r3, r2
 8003308:	781b      	ldrb	r3, [r3, #0]
 800330a:	b2da      	uxtb	r2, r3
 800330c:	f04f 0300 	mov.w	r3, #0
 8003310:	f04f 0000 	mov.w	r0, #0
 8003314:	f04f 0100 	mov.w	r1, #0
 8003318:	0211      	lsls	r1, r2, #8
 800331a:	2000      	movs	r0, #0
 800331c:	ea44 0300 	orr.w	r3, r4, r0
 8003320:	613b      	str	r3, [r7, #16]
 8003322:	ea45 0301 	orr.w	r3, r5, r1
 8003326:	617b      	str	r3, [r7, #20]
 8003328:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 800332c:	e9c7 3434 	strd	r3, r4, [r7, #208]	; 0xd0
      u_st_effort.base |= ((uint64_t) (*(inbuffer + offset + 6))) << (8 * 6);
 8003330:	e9d7 4534 	ldrd	r4, r5, [r7, #208]	; 0xd0
 8003334:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003338:	1d9a      	adds	r2, r3, #6
 800333a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800333e:	4413      	add	r3, r2
 8003340:	781b      	ldrb	r3, [r3, #0]
 8003342:	b2da      	uxtb	r2, r3
 8003344:	f04f 0300 	mov.w	r3, #0
 8003348:	f04f 0000 	mov.w	r0, #0
 800334c:	f04f 0100 	mov.w	r1, #0
 8003350:	0411      	lsls	r1, r2, #16
 8003352:	2000      	movs	r0, #0
 8003354:	ea44 0300 	orr.w	r3, r4, r0
 8003358:	60bb      	str	r3, [r7, #8]
 800335a:	ea45 0301 	orr.w	r3, r5, r1
 800335e:	60fb      	str	r3, [r7, #12]
 8003360:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 8003364:	e9c7 3434 	strd	r3, r4, [r7, #208]	; 0xd0
      u_st_effort.base |= ((uint64_t) (*(inbuffer + offset + 7))) << (8 * 7);
 8003368:	e9d7 4534 	ldrd	r4, r5, [r7, #208]	; 0xd0
 800336c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003370:	1dda      	adds	r2, r3, #7
 8003372:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8003376:	4413      	add	r3, r2
 8003378:	781b      	ldrb	r3, [r3, #0]
 800337a:	b2da      	uxtb	r2, r3
 800337c:	f04f 0300 	mov.w	r3, #0
 8003380:	f04f 0000 	mov.w	r0, #0
 8003384:	f04f 0100 	mov.w	r1, #0
 8003388:	0611      	lsls	r1, r2, #24
 800338a:	2000      	movs	r0, #0
 800338c:	ea44 0300 	orr.w	r3, r4, r0
 8003390:	603b      	str	r3, [r7, #0]
 8003392:	ea45 0301 	orr.w	r3, r5, r1
 8003396:	607b      	str	r3, [r7, #4]
 8003398:	e9d7 3400 	ldrd	r3, r4, [r7]
 800339c:	e9c7 3434 	strd	r3, r4, [r7, #208]	; 0xd0
      this->st_effort = u_st_effort.real;
 80033a0:	e9d7 0134 	ldrd	r0, r1, [r7, #208]	; 0xd0
 80033a4:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80033a8:	e9c3 0112 	strd	r0, r1, [r3, #72]	; 0x48
      offset += sizeof(this->st_effort);
 80033ac:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80033b0:	3308      	adds	r3, #8
 80033b2:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
        memcpy( &(this->effort[i]), &(this->st_effort), sizeof(double));
 80033b6:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80033ba:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80033bc:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 80033c0:	00db      	lsls	r3, r3, #3
 80033c2:	18d0      	adds	r0, r2, r3
 80033c4:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80033c8:	3348      	adds	r3, #72	; 0x48
 80033ca:	2208      	movs	r2, #8
 80033cc:	4619      	mov	r1, r3
 80033ce:	f005 fc3d 	bl	8008c4c <memcpy>
      for( uint32_t i = 0; i < effort_length; i++){
 80033d2:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 80033d6:	3301      	adds	r3, #1
 80033d8:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 80033dc:	e6f6      	b.n	80031cc <_ZN11sensor_msgs10JointState11deserializeEPh+0x7c8>
      }
     return offset;
 80033de:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
    }
 80033e2:	4618      	mov	r0, r3
 80033e4:	f507 778c 	add.w	r7, r7, #280	; 0x118
 80033e8:	46bd      	mov	sp, r7
 80033ea:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
	...

080033f0 <_ZN11sensor_msgs10JointState7getTypeEv>:

    const char * getType(){ return "sensor_msgs/JointState"; };
 80033f0:	b480      	push	{r7}
 80033f2:	b083      	sub	sp, #12
 80033f4:	af00      	add	r7, sp, #0
 80033f6:	6078      	str	r0, [r7, #4]
 80033f8:	4b02      	ldr	r3, [pc, #8]	; (8003404 <_ZN11sensor_msgs10JointState7getTypeEv+0x14>)
 80033fa:	4618      	mov	r0, r3
 80033fc:	370c      	adds	r7, #12
 80033fe:	46bd      	mov	sp, r7
 8003400:	bc80      	pop	{r7}
 8003402:	4770      	bx	lr
 8003404:	080090b4 	.word	0x080090b4

08003408 <_ZN11sensor_msgs10JointState6getMD5Ev>:
    const char * getMD5(){ return "3066dcd76a6cfaef579bd0f34173e9fd"; };
 8003408:	b480      	push	{r7}
 800340a:	b083      	sub	sp, #12
 800340c:	af00      	add	r7, sp, #0
 800340e:	6078      	str	r0, [r7, #4]
 8003410:	4b02      	ldr	r3, [pc, #8]	; (800341c <_ZN11sensor_msgs10JointState6getMD5Ev+0x14>)
 8003412:	4618      	mov	r0, r3
 8003414:	370c      	adds	r7, #12
 8003416:	46bd      	mov	sp, r7
 8003418:	bc80      	pop	{r7}
 800341a:	4770      	bx	lr
 800341c:	080090cc 	.word	0x080090cc

08003420 <_Z6dbg_cbRKN8std_msgs7Float32E>:
uint8_t MODE = 1;
/* MODES:  0 - manual control
 * 		   1 - ROS control    */

// A debug callback for servo testing purposes
void dbg_cb( const std_msgs::Float32& cmd_msg){
 8003420:	b580      	push	{r7, lr}
 8003422:	b082      	sub	sp, #8
 8003424:	af00      	add	r7, sp, #0
 8003426:	6078      	str	r0, [r7, #4]
          HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
 8003428:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800342c:	481f      	ldr	r0, [pc, #124]	; (80034ac <_Z6dbg_cbRKN8std_msgs7Float32E+0x8c>)
 800342e:	f002 fee6 	bl	80061fe <HAL_GPIO_TogglePin>

          if (cmd_msg.data == 11.0) {SERVO_Sweep(SERVO_Motor1); }
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	685b      	ldr	r3, [r3, #4]
 8003436:	491e      	ldr	r1, [pc, #120]	; (80034b0 <_Z6dbg_cbRKN8std_msgs7Float32E+0x90>)
 8003438:	4618      	mov	r0, r3
 800343a:	f7fd fcd5 	bl	8000de8 <__aeabi_fcmpeq>
 800343e:	4603      	mov	r3, r0
 8003440:	2b00      	cmp	r3, #0
 8003442:	d003      	beq.n	800344c <_Z6dbg_cbRKN8std_msgs7Float32E+0x2c>
 8003444:	2000      	movs	r0, #0
 8003446:	f005 fab5 	bl	80089b4 <SERVO_Sweep>
				SERVO_MoveTo(SERVO_Motor3, cmd_msg.data);
				SERVO_MoveTo(SERVO_Motor4, cmd_msg.data);
				SERVO_MoveTo(SERVO_Motor5, cmd_msg.data);
          }

}
 800344a:	e02a      	b.n	80034a2 <_Z6dbg_cbRKN8std_msgs7Float32E+0x82>
          else if (cmd_msg.data == 22.0)
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	685b      	ldr	r3, [r3, #4]
 8003450:	4918      	ldr	r1, [pc, #96]	; (80034b4 <_Z6dbg_cbRKN8std_msgs7Float32E+0x94>)
 8003452:	4618      	mov	r0, r3
 8003454:	f7fd fcc8 	bl	8000de8 <__aeabi_fcmpeq>
 8003458:	4603      	mov	r3, r0
 800345a:	2b00      	cmp	r3, #0
 800345c:	d003      	beq.n	8003466 <_Z6dbg_cbRKN8std_msgs7Float32E+0x46>
				SERVO_Sweep(SERVO_Motor2);
 800345e:	2001      	movs	r0, #1
 8003460:	f005 faa8 	bl	80089b4 <SERVO_Sweep>
}
 8003464:	e01d      	b.n	80034a2 <_Z6dbg_cbRKN8std_msgs7Float32E+0x82>
				SERVO_MoveTo(SERVO_Motor1, cmd_msg.data);
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	685b      	ldr	r3, [r3, #4]
 800346a:	4619      	mov	r1, r3
 800346c:	2000      	movs	r0, #0
 800346e:	f005 fa07 	bl	8008880 <SERVO_MoveTo>
				SERVO_MoveTo(SERVO_Motor2, cmd_msg.data);
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	685b      	ldr	r3, [r3, #4]
 8003476:	4619      	mov	r1, r3
 8003478:	2001      	movs	r0, #1
 800347a:	f005 fa01 	bl	8008880 <SERVO_MoveTo>
				SERVO_MoveTo(SERVO_Motor3, cmd_msg.data);
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	685b      	ldr	r3, [r3, #4]
 8003482:	4619      	mov	r1, r3
 8003484:	2002      	movs	r0, #2
 8003486:	f005 f9fb 	bl	8008880 <SERVO_MoveTo>
				SERVO_MoveTo(SERVO_Motor4, cmd_msg.data);
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	685b      	ldr	r3, [r3, #4]
 800348e:	4619      	mov	r1, r3
 8003490:	2003      	movs	r0, #3
 8003492:	f005 f9f5 	bl	8008880 <SERVO_MoveTo>
				SERVO_MoveTo(SERVO_Motor5, cmd_msg.data);
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	685b      	ldr	r3, [r3, #4]
 800349a:	4619      	mov	r1, r3
 800349c:	2004      	movs	r0, #4
 800349e:	f005 f9ef 	bl	8008880 <SERVO_MoveTo>
}
 80034a2:	bf00      	nop
 80034a4:	3708      	adds	r7, #8
 80034a6:	46bd      	mov	sp, r7
 80034a8:	bd80      	pop	{r7, pc}
 80034aa:	bf00      	nop
 80034ac:	40011000 	.word	0x40011000
 80034b0:	41300000 	.word	0x41300000
 80034b4:	41b00000 	.word	0x41b00000

080034b8 <_Z9move_axisRKN11sensor_msgs10JointStateE>:

// A callback for joint operatiion in response to ROS msg
#define TO_DEGREES 57.3		//	180 / Pi
void move_axis( const sensor_msgs::JointState& virt_joints){
 80034b8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80034bc:	b08e      	sub	sp, #56	; 0x38
 80034be:	af00      	add	r7, sp, #0
 80034c0:	60f8      	str	r0, [r7, #12]
          double base   = DIR_base * virt_joints.position[0] * TO_DEGREES + BASE_base;
 80034c2:	68fb      	ldr	r3, [r7, #12]
 80034c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80034c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80034ca:	603a      	str	r2, [r7, #0]
 80034cc:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 80034d0:	607b      	str	r3, [r7, #4]
 80034d2:	a359      	add	r3, pc, #356	; (adr r3, 8003638 <_Z9move_axisRKN11sensor_msgs10JointStateE+0x180>)
 80034d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80034d8:	e9d7 0100 	ldrd	r0, r1, [r7]
 80034dc:	f7fd f8b0 	bl	8000640 <__aeabi_dmul>
 80034e0:	4602      	mov	r2, r0
 80034e2:	460b      	mov	r3, r1
 80034e4:	4610      	mov	r0, r2
 80034e6:	4619      	mov	r1, r3
 80034e8:	f04f 0200 	mov.w	r2, #0
 80034ec:	4b56      	ldr	r3, [pc, #344]	; (8003648 <_Z9move_axisRKN11sensor_msgs10JointStateE+0x190>)
 80034ee:	f7fc fef1 	bl	80002d4 <__adddf3>
 80034f2:	4602      	mov	r2, r0
 80034f4:	460b      	mov	r3, r1
 80034f6:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
          double axis1  = DIR_axis1 * virt_joints.position[1] * TO_DEGREES + BASE_axis1;
 80034fa:	68fb      	ldr	r3, [r7, #12]
 80034fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80034fe:	3308      	adds	r3, #8
 8003500:	e9d3 0100 	ldrd	r0, r1, [r3]
 8003504:	a34c      	add	r3, pc, #304	; (adr r3, 8003638 <_Z9move_axisRKN11sensor_msgs10JointStateE+0x180>)
 8003506:	e9d3 2300 	ldrd	r2, r3, [r3]
 800350a:	f7fd f899 	bl	8000640 <__aeabi_dmul>
 800350e:	4602      	mov	r2, r0
 8003510:	460b      	mov	r3, r1
 8003512:	4610      	mov	r0, r2
 8003514:	4619      	mov	r1, r3
 8003516:	f04f 0200 	mov.w	r2, #0
 800351a:	4b4c      	ldr	r3, [pc, #304]	; (800364c <_Z9move_axisRKN11sensor_msgs10JointStateE+0x194>)
 800351c:	f7fc feda 	bl	80002d4 <__adddf3>
 8003520:	4602      	mov	r2, r0
 8003522:	460b      	mov	r3, r1
 8003524:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
          double axis2  = DIR_axis2 * virt_joints.position[2] * TO_DEGREES + BASE_axis2;
 8003528:	68fb      	ldr	r3, [r7, #12]
 800352a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800352c:	3310      	adds	r3, #16
 800352e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003532:	4692      	mov	sl, r2
 8003534:	f083 4b00 	eor.w	fp, r3, #2147483648	; 0x80000000
 8003538:	a33f      	add	r3, pc, #252	; (adr r3, 8003638 <_Z9move_axisRKN11sensor_msgs10JointStateE+0x180>)
 800353a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800353e:	4650      	mov	r0, sl
 8003540:	4659      	mov	r1, fp
 8003542:	f7fd f87d 	bl	8000640 <__aeabi_dmul>
 8003546:	4602      	mov	r2, r0
 8003548:	460b      	mov	r3, r1
 800354a:	4610      	mov	r0, r2
 800354c:	4619      	mov	r1, r3
 800354e:	f04f 0200 	mov.w	r2, #0
 8003552:	4b3f      	ldr	r3, [pc, #252]	; (8003650 <_Z9move_axisRKN11sensor_msgs10JointStateE+0x198>)
 8003554:	f7fc febe 	bl	80002d4 <__adddf3>
 8003558:	4602      	mov	r2, r0
 800355a:	460b      	mov	r3, r1
 800355c:	e9c7 2308 	strd	r2, r3, [r7, #32]
          double thingy = DIR_thingy * virt_joints.position[3] * TO_DEGREES + BASE_thingy;
 8003560:	68fb      	ldr	r3, [r7, #12]
 8003562:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003564:	3318      	adds	r3, #24
 8003566:	e9d3 2300 	ldrd	r2, r3, [r3]
 800356a:	4690      	mov	r8, r2
 800356c:	f083 4900 	eor.w	r9, r3, #2147483648	; 0x80000000
 8003570:	a331      	add	r3, pc, #196	; (adr r3, 8003638 <_Z9move_axisRKN11sensor_msgs10JointStateE+0x180>)
 8003572:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003576:	4640      	mov	r0, r8
 8003578:	4649      	mov	r1, r9
 800357a:	f7fd f861 	bl	8000640 <__aeabi_dmul>
 800357e:	4602      	mov	r2, r0
 8003580:	460b      	mov	r3, r1
 8003582:	4610      	mov	r0, r2
 8003584:	4619      	mov	r1, r3
 8003586:	f04f 0200 	mov.w	r2, #0
 800358a:	4b31      	ldr	r3, [pc, #196]	; (8003650 <_Z9move_axisRKN11sensor_msgs10JointStateE+0x198>)
 800358c:	f7fc fea2 	bl	80002d4 <__adddf3>
 8003590:	4602      	mov	r2, r0
 8003592:	460b      	mov	r3, r1
 8003594:	e9c7 2306 	strd	r2, r3, [r7, #24]
          double tip 	= DIR_tip * virt_joints.position[4] * TO_DEGREES + BASE_tip;
 8003598:	68fb      	ldr	r3, [r7, #12]
 800359a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800359c:	3320      	adds	r3, #32
 800359e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80035a2:	4614      	mov	r4, r2
 80035a4:	f083 4500 	eor.w	r5, r3, #2147483648	; 0x80000000
 80035a8:	a323      	add	r3, pc, #140	; (adr r3, 8003638 <_Z9move_axisRKN11sensor_msgs10JointStateE+0x180>)
 80035aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80035ae:	4620      	mov	r0, r4
 80035b0:	4629      	mov	r1, r5
 80035b2:	f7fd f845 	bl	8000640 <__aeabi_dmul>
 80035b6:	4602      	mov	r2, r0
 80035b8:	460b      	mov	r3, r1
 80035ba:	4610      	mov	r0, r2
 80035bc:	4619      	mov	r1, r3
 80035be:	a320      	add	r3, pc, #128	; (adr r3, 8003640 <_Z9move_axisRKN11sensor_msgs10JointStateE+0x188>)
 80035c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80035c4:	f7fc fe86 	bl	80002d4 <__adddf3>
 80035c8:	4602      	mov	r2, r0
 80035ca:	460b      	mov	r3, r1
 80035cc:	e9c7 2304 	strd	r2, r3, [r7, #16]

          SERVO_MoveTo(SERVO_Motor1, base);
 80035d0:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 80035d4:	f7fd fa66 	bl	8000aa4 <__aeabi_d2f>
 80035d8:	4603      	mov	r3, r0
 80035da:	4619      	mov	r1, r3
 80035dc:	2000      	movs	r0, #0
 80035de:	f005 f94f 	bl	8008880 <SERVO_MoveTo>
          SERVO_MoveTo(SERVO_Motor2, axis1);
 80035e2:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 80035e6:	f7fd fa5d 	bl	8000aa4 <__aeabi_d2f>
 80035ea:	4603      	mov	r3, r0
 80035ec:	4619      	mov	r1, r3
 80035ee:	2001      	movs	r0, #1
 80035f0:	f005 f946 	bl	8008880 <SERVO_MoveTo>
          SERVO_MoveTo(SERVO_Motor3, axis2);
 80035f4:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 80035f8:	f7fd fa54 	bl	8000aa4 <__aeabi_d2f>
 80035fc:	4603      	mov	r3, r0
 80035fe:	4619      	mov	r1, r3
 8003600:	2002      	movs	r0, #2
 8003602:	f005 f93d 	bl	8008880 <SERVO_MoveTo>
          SERVO_MoveTo(SERVO_Motor4, thingy);
 8003606:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800360a:	f7fd fa4b 	bl	8000aa4 <__aeabi_d2f>
 800360e:	4603      	mov	r3, r0
 8003610:	4619      	mov	r1, r3
 8003612:	2003      	movs	r0, #3
 8003614:	f005 f934 	bl	8008880 <SERVO_MoveTo>
          SERVO_MoveTo(SERVO_Motor5, tip);
 8003618:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800361c:	f7fd fa42 	bl	8000aa4 <__aeabi_d2f>
 8003620:	4603      	mov	r3, r0
 8003622:	4619      	mov	r1, r3
 8003624:	2004      	movs	r0, #4
 8003626:	f005 f92b 	bl	8008880 <SERVO_MoveTo>
}
 800362a:	bf00      	nop
 800362c:	3738      	adds	r7, #56	; 0x38
 800362e:	46bd      	mov	sp, r7
 8003630:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003634:	f3af 8000 	nop.w
 8003638:	66666666 	.word	0x66666666
 800363c:	404ca666 	.word	0x404ca666
 8003640:	00000000 	.word	0x00000000
 8003644:	4052c000 	.word	0x4052c000
 8003648:	405b8000 	.word	0x405b8000
 800364c:	40518000 	.word	0x40518000
 8003650:	40540000 	.word	0x40540000

08003654 <_Z3MAPmmmmm>:

uint32_t MAP(uint32_t IN, uint32_t INmin, uint32_t INmax, uint32_t OUTmin, uint32_t OUTmax)
{
 8003654:	b480      	push	{r7}
 8003656:	b085      	sub	sp, #20
 8003658:	af00      	add	r7, sp, #0
 800365a:	60f8      	str	r0, [r7, #12]
 800365c:	60b9      	str	r1, [r7, #8]
 800365e:	607a      	str	r2, [r7, #4]
 8003660:	603b      	str	r3, [r7, #0]
	return ((	((IN - INmin)*(OUTmax - OUTmin)) / (INmax - INmin)	) + OUTmin);
 8003662:	68fa      	ldr	r2, [r7, #12]
 8003664:	68bb      	ldr	r3, [r7, #8]
 8003666:	1ad3      	subs	r3, r2, r3
 8003668:	69b9      	ldr	r1, [r7, #24]
 800366a:	683a      	ldr	r2, [r7, #0]
 800366c:	1a8a      	subs	r2, r1, r2
 800366e:	fb02 f203 	mul.w	r2, r2, r3
 8003672:	6879      	ldr	r1, [r7, #4]
 8003674:	68bb      	ldr	r3, [r7, #8]
 8003676:	1acb      	subs	r3, r1, r3
 8003678:	fbb2 f2f3 	udiv	r2, r2, r3
 800367c:	683b      	ldr	r3, [r7, #0]
 800367e:	4413      	add	r3, r2
}
 8003680:	4618      	mov	r0, r3
 8003682:	3714      	adds	r7, #20
 8003684:	46bd      	mov	sp, r7
 8003686:	bc80      	pop	{r7}
 8003688:	4770      	bx	lr
	...

0800368c <main>:

//uint8_t BTN_State[1] = {0};		replaced with global variable in button.c

int main(void)
{
 800368c:	b580      	push	{r7, lr}
 800368e:	b08a      	sub	sp, #40	; 0x28
 8003690:	af02      	add	r7, sp, #8
  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8003692:	f001 fb75 	bl	8004d80 <HAL_Init>
  /* Configure the system clock */
  SystemClock_Config();
 8003696:	f000 f8e5 	bl	8003864 <_Z18SystemClock_Configv>
  GPIO_Init();
 800369a:	f000 f987 	bl	80039ac <_ZL9GPIO_Initv>
  DMA_Init();
 800369e:	f000 f95f 	bl	8003960 <_ZL8DMA_Initv>
  USART_UART_Init();
 80036a2:	f000 f92f 	bl	8003904 <_ZL15USART_UART_Initv>
  HW_Init();
 80036a6:	f000 f8c1 	bl	800382c <HW_Init>

  nh.initNode();
 80036aa:	4852      	ldr	r0, [pc, #328]	; (80037f4 <main+0x168>)
 80036ac:	f000 fb32 	bl	8003d14 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi2048ELi2048EE8initNodeEv>
  nh.advertise(chatter);
 80036b0:	4951      	ldr	r1, [pc, #324]	; (80037f8 <main+0x16c>)
 80036b2:	4850      	ldr	r0, [pc, #320]	; (80037f4 <main+0x168>)
 80036b4:	f000 fb52 	bl	8003d5c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi2048ELi2048EE9advertiseERNS_9PublisherE>
  nh.advertise(servoTelemetry);
 80036b8:	4950      	ldr	r1, [pc, #320]	; (80037fc <main+0x170>)
 80036ba:	484e      	ldr	r0, [pc, #312]	; (80037f4 <main+0x168>)
 80036bc:	f000 fb4e 	bl	8003d5c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi2048ELi2048EE9advertiseERNS_9PublisherE>
  nh.advertise(translatorTelemetry);
 80036c0:	494f      	ldr	r1, [pc, #316]	; (8003800 <main+0x174>)
 80036c2:	484c      	ldr	r0, [pc, #304]	; (80037f4 <main+0x168>)
 80036c4:	f000 fb4a 	bl	8003d5c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi2048ELi2048EE9advertiseERNS_9PublisherE>
  nh.subscribe(sub);
 80036c8:	494e      	ldr	r1, [pc, #312]	; (8003804 <main+0x178>)
 80036ca:	484a      	ldr	r0, [pc, #296]	; (80037f4 <main+0x168>)
 80036cc:	f000 fb73 	bl	8003db6 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi2048ELi2048EE9subscribeINS_10SubscriberIN8std_msgs7Float32EvEEEEbRT_>
  nh.subscribe(joint);
 80036d0:	494d      	ldr	r1, [pc, #308]	; (8003808 <main+0x17c>)
 80036d2:	4848      	ldr	r0, [pc, #288]	; (80037f4 <main+0x168>)
 80036d4:	f000 fb9b 	bl	8003e0e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi2048ELi2048EE9subscribeINS_10SubscriberIN11sensor_msgs10JointStateEvEEEEbRT_>


  const char * hello = "Hello World!!";
 80036d8:	4b4c      	ldr	r3, [pc, #304]	; (800380c <main+0x180>)
 80036da:	617b      	str	r3, [r7, #20]

  int chatter_interval = 1000.0 / 10;
 80036dc:	2364      	movs	r3, #100	; 0x64
 80036de:	613b      	str	r3, [r7, #16]
  int chatter_last = HAL_GetTick();
 80036e0:	f001 fba6 	bl	8004e30 <HAL_GetTick>
 80036e4:	4603      	mov	r3, r0
 80036e6:	61fb      	str	r3, [r7, #28]

  /*	 PRE-LAUNCH HOMING		*/
  HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
 80036e8:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80036ec:	4848      	ldr	r0, [pc, #288]	; (8003810 <main+0x184>)
 80036ee:	f002 fd86 	bl	80061fe <HAL_GPIO_TogglePin>
  SERVO_MoveTo(SERVO_Motor1, BASE_base);
 80036f2:	4948      	ldr	r1, [pc, #288]	; (8003814 <main+0x188>)
 80036f4:	2000      	movs	r0, #0
 80036f6:	f005 f8c3 	bl	8008880 <SERVO_MoveTo>
  SERVO_MoveTo(SERVO_Motor2, BASE_axis1);
 80036fa:	4947      	ldr	r1, [pc, #284]	; (8003818 <main+0x18c>)
 80036fc:	2001      	movs	r0, #1
 80036fe:	f005 f8bf 	bl	8008880 <SERVO_MoveTo>
  SERVO_MoveTo(SERVO_Motor3, BASE_axis2);
 8003702:	4946      	ldr	r1, [pc, #280]	; (800381c <main+0x190>)
 8003704:	2002      	movs	r0, #2
 8003706:	f005 f8bb 	bl	8008880 <SERVO_MoveTo>
  SERVO_MoveTo(SERVO_Motor4, BASE_thingy);
 800370a:	4944      	ldr	r1, [pc, #272]	; (800381c <main+0x190>)
 800370c:	2003      	movs	r0, #3
 800370e:	f005 f8b7 	bl	8008880 <SERVO_MoveTo>
  SERVO_MoveTo(SERVO_Motor5, BASE_tip);
 8003712:	4943      	ldr	r1, [pc, #268]	; (8003820 <main+0x194>)
 8003714:	2004      	movs	r0, #4
 8003716:	f005 f8b3 	bl	8008880 <SERVO_MoveTo>
  HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
 800371a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800371e:	483c      	ldr	r0, [pc, #240]	; (8003810 <main+0x184>)
 8003720:	f002 fd6d 	bl	80061fe <HAL_GPIO_TogglePin>


  uint16_t JoyStick_XY[2] = {0};
 8003724:	2300      	movs	r3, #0
 8003726:	607b      	str	r3, [r7, #4]
  uint16_t ServoIndex = 1;
 8003728:	2301      	movs	r3, #1
 800372a:	837b      	strh	r3, [r7, #26]
  uint16_t CurServoMinPulse = SERVO_Get_MinPulse(ServoIndex);
 800372c:	8b7b      	ldrh	r3, [r7, #26]
 800372e:	4618      	mov	r0, r3
 8003730:	f005 f930 	bl	8008994 <SERVO_Get_MinPulse>
 8003734:	4603      	mov	r3, r0
 8003736:	81fb      	strh	r3, [r7, #14]
  uint16_t CurServoMaxPulse = SERVO_Get_MaxPulse(ServoIndex);
 8003738:	8b7b      	ldrh	r3, [r7, #26]
 800373a:	4618      	mov	r0, r3
 800373c:	f005 f918 	bl	8008970 <SERVO_Get_MaxPulse>
 8003740:	4603      	mov	r3, r0
 8003742:	81bb      	strh	r3, [r7, #12]
  uint16_t ServoPulse = 0;
 8003744:	2300      	movs	r3, #0
 8003746:	817b      	strh	r3, [r7, #10]
  bool BeenPressed = false;
 8003748:	2300      	movs	r3, #0
 800374a:	767b      	strb	r3, [r7, #25]

  uint8_t dbg = 0;
 800374c:	2300      	movs	r3, #0
 800374e:	727b      	strb	r3, [r7, #9]

  while (1)
  {
	  //dbg = HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_14);
	  if (BTN_State== BTN_PRESSED)
 8003750:	4b34      	ldr	r3, [pc, #208]	; (8003824 <main+0x198>)
 8003752:	781b      	ldrb	r3, [r3, #0]
 8003754:	2b01      	cmp	r3, #1
 8003756:	d101      	bne.n	800375c <main+0xd0>
	  {
		  BeenPressed = true;
 8003758:	2301      	movs	r3, #1
 800375a:	767b      	strb	r3, [r7, #25]
	  }
	  if (BTN_State == BTN_RELEASED && BeenPressed == true)
 800375c:	4b31      	ldr	r3, [pc, #196]	; (8003824 <main+0x198>)
 800375e:	781b      	ldrb	r3, [r3, #0]
 8003760:	2b00      	cmp	r3, #0
 8003762:	d10c      	bne.n	800377e <main+0xf2>
 8003764:	7e7b      	ldrb	r3, [r7, #25]
 8003766:	2b01      	cmp	r3, #1
 8003768:	d109      	bne.n	800377e <main+0xf2>
	  {
		  ServoIndex++;
 800376a:	8b7b      	ldrh	r3, [r7, #26]
 800376c:	3301      	adds	r3, #1
 800376e:	837b      	strh	r3, [r7, #26]
		  if (ServoIndex >= 4)
 8003770:	8b7b      	ldrh	r3, [r7, #26]
 8003772:	2b03      	cmp	r3, #3
 8003774:	d901      	bls.n	800377a <main+0xee>
		  {
			  ServoIndex = 0;
 8003776:	2300      	movs	r3, #0
 8003778:	837b      	strh	r3, [r7, #26]
		  }
		  BeenPressed = false;
 800377a:	2300      	movs	r3, #0
 800377c:	767b      	strb	r3, [r7, #25]
	  }
	  if (MODE == 0)
 800377e:	4b2a      	ldr	r3, [pc, #168]	; (8003828 <main+0x19c>)
 8003780:	781b      	ldrb	r3, [r3, #0]
 8003782:	2b00      	cmp	r3, #0
 8003784:	d11a      	bne.n	80037bc <main+0x130>
	  {
		  JoyStick_Read(JoyStick_XY);
 8003786:	1d3b      	adds	r3, r7, #4
 8003788:	4618      	mov	r0, r3
 800378a:	f004 fe75 	bl	8008478 <JoyStick_Read>
		  ServoPulse = MAP(JoyStick_XY[0], 0, 4095, CurServoMinPulse, CurServoMaxPulse);
 800378e:	88bb      	ldrh	r3, [r7, #4]
 8003790:	4618      	mov	r0, r3
 8003792:	89fa      	ldrh	r2, [r7, #14]
 8003794:	89bb      	ldrh	r3, [r7, #12]
 8003796:	9300      	str	r3, [sp, #0]
 8003798:	4613      	mov	r3, r2
 800379a:	f640 72ff 	movw	r2, #4095	; 0xfff
 800379e:	2100      	movs	r1, #0
 80037a0:	f7ff ff58 	bl	8003654 <_Z3MAPmmmmm>
 80037a4:	4603      	mov	r3, r0
 80037a6:	817b      	strh	r3, [r7, #10]
		  SERVO_RawMove(ServoIndex, ServoPulse);
 80037a8:	897a      	ldrh	r2, [r7, #10]
 80037aa:	8b7b      	ldrh	r3, [r7, #26]
 80037ac:	4611      	mov	r1, r2
 80037ae:	4618      	mov	r0, r3
 80037b0:	f005 f8b6 	bl	8008920 <SERVO_RawMove>
		  //SERVO_MoveTo(ServoIndex, ServoPulse);
		  HAL_Delay(10);
 80037b4:	200a      	movs	r0, #10
 80037b6:	f001 fb45 	bl	8004e44 <HAL_Delay>
 80037ba:	e016      	b.n	80037ea <main+0x15e>
	  }
	  else if (nh.connected())		// ROS control mode
 80037bc:	480d      	ldr	r0, [pc, #52]	; (80037f4 <main+0x168>)
 80037be:	f000 fb52 	bl	8003e66 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi2048ELi2048EE9connectedEv>
 80037c2:	4603      	mov	r3, r0
 80037c4:	2b00      	cmp	r3, #0
 80037c6:	d010      	beq.n	80037ea <main+0x15e>
	  {
		  if(HAL_GetTick() - chatter_last > chatter_interval)
 80037c8:	f001 fb32 	bl	8004e30 <HAL_GetTick>
 80037cc:	4602      	mov	r2, r0
 80037ce:	69fb      	ldr	r3, [r7, #28]
 80037d0:	1ad2      	subs	r2, r2, r3
 80037d2:	693b      	ldr	r3, [r7, #16]
 80037d4:	429a      	cmp	r2, r3
 80037d6:	bf8c      	ite	hi
 80037d8:	2301      	movhi	r3, #1
 80037da:	2300      	movls	r3, #0
 80037dc:	b2db      	uxtb	r3, r3
 80037de:	2b00      	cmp	r3, #0
 80037e0:	d003      	beq.n	80037ea <main+0x15e>
		  {

			  //TODO: proper telemetry publishing for manual mode
			  chatter_last = HAL_GetTick();
 80037e2:	f001 fb25 	bl	8004e30 <HAL_GetTick>
 80037e6:	4603      	mov	r3, r0
 80037e8:	61fb      	str	r3, [r7, #28]
		  }
	  }

	  nh.spinOnce();
 80037ea:	4802      	ldr	r0, [pc, #8]	; (80037f4 <main+0x168>)
 80037ec:	f000 fb49 	bl	8003e82 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi2048ELi2048EE8spinOnceEv>
	  if (BTN_State== BTN_PRESSED)
 80037f0:	e7ae      	b.n	8003750 <main+0xc4>
 80037f2:	bf00      	nop
 80037f4:	200011b4 	.word	0x200011b4
 80037f8:	200022fc 	.word	0x200022fc
 80037fc:	20002310 	.word	0x20002310
 8003800:	20002324 	.word	0x20002324
 8003804:	20002338 	.word	0x20002338
 8003808:	20002358 	.word	0x20002358
 800380c:	080090f0 	.word	0x080090f0
 8003810:	40011000 	.word	0x40011000
 8003814:	42dc0000 	.word	0x42dc0000
 8003818:	428c0000 	.word	0x428c0000
 800381c:	42a00000 	.word	0x42a00000
 8003820:	42960000 	.word	0x42960000
 8003824:	200010a0 	.word	0x200010a0
 8003828:	20000000 	.word	0x20000000

0800382c <HW_Init>:

}


void HW_Init()
{
 800382c:	b580      	push	{r7, lr}
 800382e:	af00      	add	r7, sp, #0
	  JoyStick_Init();
 8003830:	f004 fdc6 	bl	80083c0 <JoyStick_Init>
	  SERVO_Init(SERVO_Motor1);
 8003834:	2000      	movs	r0, #0
 8003836:	f004 fe7f 	bl	8008538 <SERVO_Init>
	  SERVO_Init(SERVO_Motor2);
 800383a:	2001      	movs	r0, #1
 800383c:	f004 fe7c 	bl	8008538 <SERVO_Init>
	  SERVO_Init(SERVO_Motor3);
 8003840:	2002      	movs	r0, #2
 8003842:	f004 fe79 	bl	8008538 <SERVO_Init>
	  SERVO_Init(SERVO_Motor4);
 8003846:	2003      	movs	r0, #3
 8003848:	f004 fe76 	bl	8008538 <SERVO_Init>
	  SERVO_Init(SERVO_Motor5);
 800384c:	2004      	movs	r0, #4
 800384e:	f004 fe73 	bl	8008538 <SERVO_Init>
	  BTN_Init(BTN_State);
 8003852:	4b03      	ldr	r3, [pc, #12]	; (8003860 <HW_Init+0x34>)
 8003854:	781b      	ldrb	r3, [r3, #0]
 8003856:	4618      	mov	r0, r3
 8003858:	f005 f91a 	bl	8008a90 <BTN_Init>
}
 800385c:	bf00      	nop
 800385e:	bd80      	pop	{r7, pc}
 8003860:	200010a0 	.word	0x200010a0

08003864 <_Z18SystemClock_Configv>:

void SystemClock_Config(void)
{
 8003864:	b580      	push	{r7, lr}
 8003866:	b090      	sub	sp, #64	; 0x40
 8003868:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800386a:	f107 0318 	add.w	r3, r7, #24
 800386e:	2228      	movs	r2, #40	; 0x28
 8003870:	2100      	movs	r1, #0
 8003872:	4618      	mov	r0, r3
 8003874:	f005 f9f8 	bl	8008c68 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8003878:	1d3b      	adds	r3, r7, #4
 800387a:	2200      	movs	r2, #0
 800387c:	601a      	str	r2, [r3, #0]
 800387e:	605a      	str	r2, [r3, #4]
 8003880:	609a      	str	r2, [r3, #8]
 8003882:	60da      	str	r2, [r3, #12]
 8003884:	611a      	str	r2, [r3, #16]

  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8003886:	2301      	movs	r3, #1
 8003888:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800388a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800388e:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8003890:	2300      	movs	r3, #0
 8003892:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8003894:	2301      	movs	r3, #1
 8003896:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8003898:	2302      	movs	r3, #2
 800389a:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800389c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80038a0:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80038a2:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 80038a6:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80038a8:	f107 0318 	add.w	r3, r7, #24
 80038ac:	4618      	mov	r0, r3
 80038ae:	f002 fcbf 	bl	8006230 <HAL_RCC_OscConfig>
 80038b2:	4603      	mov	r3, r0
 80038b4:	2b00      	cmp	r3, #0
 80038b6:	bf14      	ite	ne
 80038b8:	2301      	movne	r3, #1
 80038ba:	2300      	moveq	r3, #0
 80038bc:	b2db      	uxtb	r3, r3
 80038be:	2b00      	cmp	r3, #0
 80038c0:	d001      	beq.n	80038c6 <_Z18SystemClock_Configv+0x62>
  {
    Error_Handler();
 80038c2:	f000 f8df 	bl	8003a84 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80038c6:	230f      	movs	r3, #15
 80038c8:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80038ca:	2302      	movs	r3, #2
 80038cc:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80038ce:	2300      	movs	r3, #0
 80038d0:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80038d2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80038d6:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80038d8:	2300      	movs	r3, #0
 80038da:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80038dc:	1d3b      	adds	r3, r7, #4
 80038de:	2102      	movs	r1, #2
 80038e0:	4618      	mov	r0, r3
 80038e2:	f002 ff25 	bl	8006730 <HAL_RCC_ClockConfig>
 80038e6:	4603      	mov	r3, r0
 80038e8:	2b00      	cmp	r3, #0
 80038ea:	bf14      	ite	ne
 80038ec:	2301      	movne	r3, #1
 80038ee:	2300      	moveq	r3, #0
 80038f0:	b2db      	uxtb	r3, r3
 80038f2:	2b00      	cmp	r3, #0
 80038f4:	d001      	beq.n	80038fa <_Z18SystemClock_Configv+0x96>
  {
    Error_Handler();
 80038f6:	f000 f8c5 	bl	8003a84 <Error_Handler>
  }
}
 80038fa:	bf00      	nop
 80038fc:	3740      	adds	r7, #64	; 0x40
 80038fe:	46bd      	mov	sp, r7
 8003900:	bd80      	pop	{r7, pc}
	...

08003904 <_ZL15USART_UART_Initv>:

}

//USART1 Initialization Function
static void USART_UART_Init(void)
{
 8003904:	b580      	push	{r7, lr}
 8003906:	af00      	add	r7, sp, #0
  huart1.Instance = USART1;
 8003908:	4b13      	ldr	r3, [pc, #76]	; (8003958 <_ZL15USART_UART_Initv+0x54>)
 800390a:	4a14      	ldr	r2, [pc, #80]	; (800395c <_ZL15USART_UART_Initv+0x58>)
 800390c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;//57600;
 800390e:	4b12      	ldr	r3, [pc, #72]	; (8003958 <_ZL15USART_UART_Initv+0x54>)
 8003910:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8003914:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8003916:	4b10      	ldr	r3, [pc, #64]	; (8003958 <_ZL15USART_UART_Initv+0x54>)
 8003918:	2200      	movs	r2, #0
 800391a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800391c:	4b0e      	ldr	r3, [pc, #56]	; (8003958 <_ZL15USART_UART_Initv+0x54>)
 800391e:	2200      	movs	r2, #0
 8003920:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8003922:	4b0d      	ldr	r3, [pc, #52]	; (8003958 <_ZL15USART_UART_Initv+0x54>)
 8003924:	2200      	movs	r2, #0
 8003926:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8003928:	4b0b      	ldr	r3, [pc, #44]	; (8003958 <_ZL15USART_UART_Initv+0x54>)
 800392a:	220c      	movs	r2, #12
 800392c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800392e:	4b0a      	ldr	r3, [pc, #40]	; (8003958 <_ZL15USART_UART_Initv+0x54>)
 8003930:	2200      	movs	r2, #0
 8003932:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8003934:	4b08      	ldr	r3, [pc, #32]	; (8003958 <_ZL15USART_UART_Initv+0x54>)
 8003936:	2200      	movs	r2, #0
 8003938:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800393a:	4807      	ldr	r0, [pc, #28]	; (8003958 <_ZL15USART_UART_Initv+0x54>)
 800393c:	f004 f86c 	bl	8007a18 <HAL_UART_Init>
 8003940:	4603      	mov	r3, r0
 8003942:	2b00      	cmp	r3, #0
 8003944:	bf14      	ite	ne
 8003946:	2301      	movne	r3, #1
 8003948:	2300      	moveq	r3, #0
 800394a:	b2db      	uxtb	r3, r3
 800394c:	2b00      	cmp	r3, #0
 800394e:	d001      	beq.n	8003954 <_ZL15USART_UART_Initv+0x50>
  {
    Error_Handler();
 8003950:	f000 f898 	bl	8003a84 <Error_Handler>
  }

}
 8003954:	bf00      	nop
 8003956:	bd80      	pop	{r7, pc}
 8003958:	200010ec 	.word	0x200010ec
 800395c:	40013800 	.word	0x40013800

08003960 <_ZL8DMA_Initv>:


//	Enable DMA controller clock
static void DMA_Init(void)
{
 8003960:	b580      	push	{r7, lr}
 8003962:	b082      	sub	sp, #8
 8003964:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8003966:	4b10      	ldr	r3, [pc, #64]	; (80039a8 <_ZL8DMA_Initv+0x48>)
 8003968:	695b      	ldr	r3, [r3, #20]
 800396a:	4a0f      	ldr	r2, [pc, #60]	; (80039a8 <_ZL8DMA_Initv+0x48>)
 800396c:	f043 0301 	orr.w	r3, r3, #1
 8003970:	6153      	str	r3, [r2, #20]
 8003972:	4b0d      	ldr	r3, [pc, #52]	; (80039a8 <_ZL8DMA_Initv+0x48>)
 8003974:	695b      	ldr	r3, [r3, #20]
 8003976:	f003 0301 	and.w	r3, r3, #1
 800397a:	607b      	str	r3, [r7, #4]
 800397c:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  HAL_NVIC_SetPriority(DMA1_Channel4_IRQn, 0, 0);
 800397e:	2200      	movs	r2, #0
 8003980:	2100      	movs	r1, #0
 8003982:	200e      	movs	r0, #14
 8003984:	f002 f805 	bl	8005992 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel4_IRQn);
 8003988:	200e      	movs	r0, #14
 800398a:	f002 f81e 	bl	80059ca <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(DMA1_Channel5_IRQn, 0, 0);
 800398e:	2200      	movs	r2, #0
 8003990:	2100      	movs	r1, #0
 8003992:	200f      	movs	r0, #15
 8003994:	f001 fffd 	bl	8005992 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel5_IRQn);
 8003998:	200f      	movs	r0, #15
 800399a:	f002 f816 	bl	80059ca <HAL_NVIC_EnableIRQ>
}
 800399e:	bf00      	nop
 80039a0:	3708      	adds	r7, #8
 80039a2:	46bd      	mov	sp, r7
 80039a4:	bd80      	pop	{r7, pc}
 80039a6:	bf00      	nop
 80039a8:	40021000 	.word	0x40021000

080039ac <_ZL9GPIO_Initv>:

//	GPIO Initialization Function
static void GPIO_Init(void)
{
 80039ac:	b580      	push	{r7, lr}
 80039ae:	b088      	sub	sp, #32
 80039b0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80039b2:	f107 0310 	add.w	r3, r7, #16
 80039b6:	2200      	movs	r2, #0
 80039b8:	601a      	str	r2, [r3, #0]
 80039ba:	605a      	str	r2, [r3, #4]
 80039bc:	609a      	str	r2, [r3, #8]
 80039be:	60da      	str	r2, [r3, #12]

  // GPIO clock
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80039c0:	4b2d      	ldr	r3, [pc, #180]	; (8003a78 <_ZL9GPIO_Initv+0xcc>)
 80039c2:	699b      	ldr	r3, [r3, #24]
 80039c4:	4a2c      	ldr	r2, [pc, #176]	; (8003a78 <_ZL9GPIO_Initv+0xcc>)
 80039c6:	f043 0310 	orr.w	r3, r3, #16
 80039ca:	6193      	str	r3, [r2, #24]
 80039cc:	4b2a      	ldr	r3, [pc, #168]	; (8003a78 <_ZL9GPIO_Initv+0xcc>)
 80039ce:	699b      	ldr	r3, [r3, #24]
 80039d0:	f003 0310 	and.w	r3, r3, #16
 80039d4:	60fb      	str	r3, [r7, #12]
 80039d6:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80039d8:	4b27      	ldr	r3, [pc, #156]	; (8003a78 <_ZL9GPIO_Initv+0xcc>)
 80039da:	699b      	ldr	r3, [r3, #24]
 80039dc:	4a26      	ldr	r2, [pc, #152]	; (8003a78 <_ZL9GPIO_Initv+0xcc>)
 80039de:	f043 0320 	orr.w	r3, r3, #32
 80039e2:	6193      	str	r3, [r2, #24]
 80039e4:	4b24      	ldr	r3, [pc, #144]	; (8003a78 <_ZL9GPIO_Initv+0xcc>)
 80039e6:	699b      	ldr	r3, [r3, #24]
 80039e8:	f003 0320 	and.w	r3, r3, #32
 80039ec:	60bb      	str	r3, [r7, #8]
 80039ee:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80039f0:	4b21      	ldr	r3, [pc, #132]	; (8003a78 <_ZL9GPIO_Initv+0xcc>)
 80039f2:	699b      	ldr	r3, [r3, #24]
 80039f4:	4a20      	ldr	r2, [pc, #128]	; (8003a78 <_ZL9GPIO_Initv+0xcc>)
 80039f6:	f043 0304 	orr.w	r3, r3, #4
 80039fa:	6193      	str	r3, [r2, #24]
 80039fc:	4b1e      	ldr	r3, [pc, #120]	; (8003a78 <_ZL9GPIO_Initv+0xcc>)
 80039fe:	699b      	ldr	r3, [r3, #24]
 8003a00:	f003 0304 	and.w	r3, r3, #4
 8003a04:	607b      	str	r3, [r7, #4]
 8003a06:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8003a08:	4b1b      	ldr	r3, [pc, #108]	; (8003a78 <_ZL9GPIO_Initv+0xcc>)
 8003a0a:	699b      	ldr	r3, [r3, #24]
 8003a0c:	4a1a      	ldr	r2, [pc, #104]	; (8003a78 <_ZL9GPIO_Initv+0xcc>)
 8003a0e:	f043 0308 	orr.w	r3, r3, #8
 8003a12:	6193      	str	r3, [r2, #24]
 8003a14:	4b18      	ldr	r3, [pc, #96]	; (8003a78 <_ZL9GPIO_Initv+0xcc>)
 8003a16:	699b      	ldr	r3, [r3, #24]
 8003a18:	f003 0308 	and.w	r3, r3, #8
 8003a1c:	603b      	str	r3, [r7, #0]
 8003a1e:	683b      	ldr	r3, [r7, #0]

  //
  //HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_SET);

  //	Onboard LED
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8003a20:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003a24:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003a26:	2301      	movs	r3, #1
 8003a28:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003a2a:	2300      	movs	r3, #0
 8003a2c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003a2e:	2302      	movs	r3, #2
 8003a30:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003a32:	f107 0310 	add.w	r3, r7, #16
 8003a36:	4619      	mov	r1, r3
 8003a38:	4810      	ldr	r0, [pc, #64]	; (8003a7c <_ZL9GPIO_Initv+0xd0>)
 8003a3a:	f002 fa45 	bl	8005ec8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB6 */
  GPIO_InitStruct.Pin = GPIO_PIN_6;
 8003a3e:	2340      	movs	r3, #64	; 0x40
 8003a40:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003a42:	2302      	movs	r3, #2
 8003a44:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003a46:	2302      	movs	r3, #2
 8003a48:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003a4a:	f107 0310 	add.w	r3, r7, #16
 8003a4e:	4619      	mov	r1, r3
 8003a50:	480b      	ldr	r0, [pc, #44]	; (8003a80 <_ZL9GPIO_Initv+0xd4>)
 8003a52:	f002 fa39 	bl	8005ec8 <HAL_GPIO_Init>


  /*	MODE BUTTON		*/
  GPIO_InitStruct.Pin = GPIO_PIN_14;
 8003a56:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8003a5a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003a5c:	2300      	movs	r3, #0
 8003a5e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8003a60:	2302      	movs	r3, #2
 8003a62:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003a64:	f107 0310 	add.w	r3, r7, #16
 8003a68:	4619      	mov	r1, r3
 8003a6a:	4804      	ldr	r0, [pc, #16]	; (8003a7c <_ZL9GPIO_Initv+0xd0>)
 8003a6c:	f002 fa2c 	bl	8005ec8 <HAL_GPIO_Init>

}
 8003a70:	bf00      	nop
 8003a72:	3720      	adds	r7, #32
 8003a74:	46bd      	mov	sp, r7
 8003a76:	bd80      	pop	{r7, pc}
 8003a78:	40021000 	.word	0x40021000
 8003a7c:	40011000 	.word	0x40011000
 8003a80:	40010c00 	.word	0x40010c00

08003a84 <Error_Handler>:


void Error_Handler(void)
{
 8003a84:	b580      	push	{r7, lr}
 8003a86:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8003a88:	b672      	cpsid	i
}
 8003a8a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
  {
	  HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
 8003a8c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8003a90:	4801      	ldr	r0, [pc, #4]	; (8003a98 <Error_Handler+0x14>)
 8003a92:	f002 fbb4 	bl	80061fe <HAL_GPIO_TogglePin>
 8003a96:	e7f9      	b.n	8003a8c <Error_Handler+0x8>
 8003a98:	40011000 	.word	0x40011000

08003a9c <SysTick_CallBack>:
  }
  /* USER CODE END Error_Handler_Debug */
}

void SysTick_CallBack()
{
 8003a9c:	b580      	push	{r7, lr}
 8003a9e:	af00      	add	r7, sp, #0
    // Each SysTick: Call BTN_Main()
    BTN_Main();
 8003aa0:	f005 f80e 	bl	8008ac0 <BTN_Main>
}
 8003aa4:	bf00      	nop
 8003aa6:	bd80      	pop	{r7, pc}

08003aa8 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>:
    return 8;
  }

  // Copy data from variable into a byte array
  template<typename A, typename V>
  static void varToArr(A arr, const V var)
 8003aa8:	b480      	push	{r7}
 8003aaa:	b085      	sub	sp, #20
 8003aac:	af00      	add	r7, sp, #0
 8003aae:	6078      	str	r0, [r7, #4]
 8003ab0:	6039      	str	r1, [r7, #0]
  {
    for (size_t i = 0; i < sizeof(V); i++)
 8003ab2:	2300      	movs	r3, #0
 8003ab4:	60fb      	str	r3, [r7, #12]
 8003ab6:	68fb      	ldr	r3, [r7, #12]
 8003ab8:	2b03      	cmp	r3, #3
 8003aba:	d80d      	bhi.n	8003ad8 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_+0x30>
      arr[i] = (var >> (8 * i));
 8003abc:	68fb      	ldr	r3, [r7, #12]
 8003abe:	00db      	lsls	r3, r3, #3
 8003ac0:	683a      	ldr	r2, [r7, #0]
 8003ac2:	fa22 f103 	lsr.w	r1, r2, r3
 8003ac6:	687a      	ldr	r2, [r7, #4]
 8003ac8:	68fb      	ldr	r3, [r7, #12]
 8003aca:	4413      	add	r3, r2
 8003acc:	b2ca      	uxtb	r2, r1
 8003ace:	701a      	strb	r2, [r3, #0]
    for (size_t i = 0; i < sizeof(V); i++)
 8003ad0:	68fb      	ldr	r3, [r7, #12]
 8003ad2:	3301      	adds	r3, #1
 8003ad4:	60fb      	str	r3, [r7, #12]
 8003ad6:	e7ee      	b.n	8003ab6 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_+0xe>
  }
 8003ad8:	bf00      	nop
 8003ada:	3714      	adds	r7, #20
 8003adc:	46bd      	mov	sp, r7
 8003ade:	bc80      	pop	{r7}
 8003ae0:	4770      	bx	lr

08003ae2 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>:

  // Copy data from a byte array into variable
  template<typename V, typename A>
  static void arrToVar(V& var, const A arr)
 8003ae2:	b480      	push	{r7}
 8003ae4:	b085      	sub	sp, #20
 8003ae6:	af00      	add	r7, sp, #0
 8003ae8:	6078      	str	r0, [r7, #4]
 8003aea:	6039      	str	r1, [r7, #0]
  {
    var = 0;
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	2200      	movs	r2, #0
 8003af0:	601a      	str	r2, [r3, #0]
    for (size_t i = 0; i < sizeof(V); i++)
 8003af2:	2300      	movs	r3, #0
 8003af4:	60fb      	str	r3, [r7, #12]
 8003af6:	68fb      	ldr	r3, [r7, #12]
 8003af8:	2b03      	cmp	r3, #3
 8003afa:	d811      	bhi.n	8003b20 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_+0x3e>
      var |= (arr[i] << (8 * i));
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	681b      	ldr	r3, [r3, #0]
 8003b00:	6839      	ldr	r1, [r7, #0]
 8003b02:	68fa      	ldr	r2, [r7, #12]
 8003b04:	440a      	add	r2, r1
 8003b06:	7812      	ldrb	r2, [r2, #0]
 8003b08:	4611      	mov	r1, r2
 8003b0a:	68fa      	ldr	r2, [r7, #12]
 8003b0c:	00d2      	lsls	r2, r2, #3
 8003b0e:	fa01 f202 	lsl.w	r2, r1, r2
 8003b12:	431a      	orrs	r2, r3
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	601a      	str	r2, [r3, #0]
    for (size_t i = 0; i < sizeof(V); i++)
 8003b18:	68fb      	ldr	r3, [r7, #12]
 8003b1a:	3301      	adds	r3, #1
 8003b1c:	60fb      	str	r3, [r7, #12]
 8003b1e:	e7ea      	b.n	8003af6 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_+0x14>
  }
 8003b20:	bf00      	nop
 8003b22:	3714      	adds	r7, #20
 8003b24:	46bd      	mov	sp, r7
 8003b26:	bc80      	pop	{r7}
 8003b28:	4770      	bx	lr
	...

08003b2c <_ZN3ros15NodeHandleBase_C1Ev>:
#include "ros/msg.h"

namespace ros
{

class NodeHandleBase_
 8003b2c:	b480      	push	{r7}
 8003b2e:	b083      	sub	sp, #12
 8003b30:	af00      	add	r7, sp, #0
 8003b32:	6078      	str	r0, [r7, #4]
 8003b34:	4a04      	ldr	r2, [pc, #16]	; (8003b48 <_ZN3ros15NodeHandleBase_C1Ev+0x1c>)
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	601a      	str	r2, [r3, #0]
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	4618      	mov	r0, r3
 8003b3e:	370c      	adds	r7, #12
 8003b40:	46bd      	mov	sp, r7
 8003b42:	bc80      	pop	{r7}
 8003b44:	4770      	bx	lr
 8003b46:	bf00      	nop
 8003b48:	080092a4 	.word	0x080092a4

08003b4c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi2048ELi2048EEC1Ev>:

  /*
   * Setup Functions
   */
public:
  NodeHandle_() : configured_(false)
 8003b4c:	b580      	push	{r7, lr}
 8003b4e:	b086      	sub	sp, #24
 8003b50:	af00      	add	r7, sp, #0
 8003b52:	6078      	str	r0, [r7, #4]
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	4618      	mov	r0, r3
 8003b58:	f7ff ffe8 	bl	8003b2c <_ZN3ros15NodeHandleBase_C1Ev>
 8003b5c:	4a40      	ldr	r2, [pc, #256]	; (8003c60 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi2048ELi2048EEC1Ev+0x114>)
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	601a      	str	r2, [r3, #0]
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	3304      	adds	r3, #4
 8003b66:	4618      	mov	r0, r3
 8003b68:	f7fe f912 	bl	8001d90 <_ZN13STM32HardwareC1Ev>
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	f503 5387 	add.w	r3, r3, #4320	; 0x10e0
 8003b72:	3314      	adds	r3, #20
 8003b74:	2200      	movs	r2, #0
 8003b76:	701a      	strb	r2, [r3, #0]
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	f503 5388 	add.w	r3, r3, #4352	; 0x1100
 8003b7e:	3308      	adds	r3, #8
 8003b80:	4618      	mov	r0, r3
 8003b82:	f7fd fcf9 	bl	8001578 <_ZN14rosserial_msgs20RequestParamResponseC1Ev>
  {

    for (unsigned int i = 0; i < MAX_PUBLISHERS; i++)
 8003b86:	2300      	movs	r3, #0
 8003b88:	617b      	str	r3, [r7, #20]
 8003b8a:	697b      	ldr	r3, [r7, #20]
 8003b8c:	2b18      	cmp	r3, #24
 8003b8e:	d80a      	bhi.n	8003ba6 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi2048ELi2048EEC1Ev+0x5a>
      publishers[i] = 0;
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	697a      	ldr	r2, [r7, #20]
 8003b94:	f202 4206 	addw	r2, r2, #1030	; 0x406
 8003b98:	2100      	movs	r1, #0
 8003b9a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    for (unsigned int i = 0; i < MAX_PUBLISHERS; i++)
 8003b9e:	697b      	ldr	r3, [r7, #20]
 8003ba0:	3301      	adds	r3, #1
 8003ba2:	617b      	str	r3, [r7, #20]
 8003ba4:	e7f1      	b.n	8003b8a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi2048ELi2048EEC1Ev+0x3e>

    for (unsigned int i = 0; i < MAX_SUBSCRIBERS; i++)
 8003ba6:	2300      	movs	r3, #0
 8003ba8:	613b      	str	r3, [r7, #16]
 8003baa:	693b      	ldr	r3, [r7, #16]
 8003bac:	2b18      	cmp	r3, #24
 8003bae:	d80b      	bhi.n	8003bc8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi2048ELi2048EEC1Ev+0x7c>
      subscribers[i] = 0;
 8003bb0:	687a      	ldr	r2, [r7, #4]
 8003bb2:	693b      	ldr	r3, [r7, #16]
 8003bb4:	f203 431e 	addw	r3, r3, #1054	; 0x41e
 8003bb8:	009b      	lsls	r3, r3, #2
 8003bba:	4413      	add	r3, r2
 8003bbc:	2200      	movs	r2, #0
 8003bbe:	605a      	str	r2, [r3, #4]
    for (unsigned int i = 0; i < MAX_SUBSCRIBERS; i++)
 8003bc0:	693b      	ldr	r3, [r7, #16]
 8003bc2:	3301      	adds	r3, #1
 8003bc4:	613b      	str	r3, [r7, #16]
 8003bc6:	e7f0      	b.n	8003baa <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi2048ELi2048EEC1Ev+0x5e>

    for (unsigned int i = 0; i < INPUT_SIZE; i++)
 8003bc8:	2300      	movs	r3, #0
 8003bca:	60fb      	str	r3, [r7, #12]
 8003bcc:	68fb      	ldr	r3, [r7, #12]
 8003bce:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003bd2:	d209      	bcs.n	8003be8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi2048ELi2048EEC1Ev+0x9c>
      message_in[i] = 0;
 8003bd4:	687a      	ldr	r2, [r7, #4]
 8003bd6:	68fb      	ldr	r3, [r7, #12]
 8003bd8:	4413      	add	r3, r2
 8003bda:	3318      	adds	r3, #24
 8003bdc:	2200      	movs	r2, #0
 8003bde:	701a      	strb	r2, [r3, #0]
    for (unsigned int i = 0; i < INPUT_SIZE; i++)
 8003be0:	68fb      	ldr	r3, [r7, #12]
 8003be2:	3301      	adds	r3, #1
 8003be4:	60fb      	str	r3, [r7, #12]
 8003be6:	e7f1      	b.n	8003bcc <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi2048ELi2048EEC1Ev+0x80>

    for (unsigned int i = 0; i < OUTPUT_SIZE; i++)
 8003be8:	2300      	movs	r3, #0
 8003bea:	60bb      	str	r3, [r7, #8]
 8003bec:	68bb      	ldr	r3, [r7, #8]
 8003bee:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003bf2:	d20a      	bcs.n	8003c0a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi2048ELi2048EEC1Ev+0xbe>
      message_out[i] = 0;
 8003bf4:	687a      	ldr	r2, [r7, #4]
 8003bf6:	68bb      	ldr	r3, [r7, #8]
 8003bf8:	4413      	add	r3, r2
 8003bfa:	f603 0318 	addw	r3, r3, #2072	; 0x818
 8003bfe:	2200      	movs	r2, #0
 8003c00:	701a      	strb	r2, [r3, #0]
    for (unsigned int i = 0; i < OUTPUT_SIZE; i++)
 8003c02:	68bb      	ldr	r3, [r7, #8]
 8003c04:	3301      	adds	r3, #1
 8003c06:	60bb      	str	r3, [r7, #8]
 8003c08:	e7f0      	b.n	8003bec <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi2048ELi2048EEC1Ev+0xa0>

    req_param_resp.ints_length = 0;
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	f503 5388 	add.w	r3, r3, #4352	; 0x1100
 8003c10:	330c      	adds	r3, #12
 8003c12:	2200      	movs	r2, #0
 8003c14:	601a      	str	r2, [r3, #0]
    req_param_resp.ints = NULL;
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	f503 5388 	add.w	r3, r3, #4352	; 0x1100
 8003c1c:	3314      	adds	r3, #20
 8003c1e:	2200      	movs	r2, #0
 8003c20:	601a      	str	r2, [r3, #0]
    req_param_resp.floats_length = 0;
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	f503 5388 	add.w	r3, r3, #4352	; 0x1100
 8003c28:	3318      	adds	r3, #24
 8003c2a:	2200      	movs	r2, #0
 8003c2c:	601a      	str	r2, [r3, #0]
    req_param_resp.floats = NULL;
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	f503 5389 	add.w	r3, r3, #4384	; 0x1120
 8003c34:	2200      	movs	r2, #0
 8003c36:	601a      	str	r2, [r3, #0]
    req_param_resp.ints_length = 0;
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	f503 5388 	add.w	r3, r3, #4352	; 0x1100
 8003c3e:	330c      	adds	r3, #12
 8003c40:	2200      	movs	r2, #0
 8003c42:	601a      	str	r2, [r3, #0]
    req_param_resp.ints = NULL;
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	f503 5388 	add.w	r3, r3, #4352	; 0x1100
 8003c4a:	3314      	adds	r3, #20
 8003c4c:	2200      	movs	r2, #0
 8003c4e:	601a      	str	r2, [r3, #0]

    spin_timeout_ = 0;
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	2200      	movs	r2, #0
 8003c54:	615a      	str	r2, [r3, #20]
  }
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	4618      	mov	r0, r3
 8003c5a:	3718      	adds	r7, #24
 8003c5c:	46bd      	mov	sp, r7
 8003c5e:	bd80      	pop	{r7, pc}
 8003c60:	08009200 	.word	0x08009200

08003c64 <_ZN3ros11Subscriber_C1Ev>:

namespace ros
{

/* Base class for objects subscribers. */
class Subscriber_
 8003c64:	b480      	push	{r7}
 8003c66:	b083      	sub	sp, #12
 8003c68:	af00      	add	r7, sp, #0
 8003c6a:	6078      	str	r0, [r7, #4]
 8003c6c:	4a04      	ldr	r2, [pc, #16]	; (8003c80 <_ZN3ros11Subscriber_C1Ev+0x1c>)
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	601a      	str	r2, [r3, #0]
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	4618      	mov	r0, r3
 8003c76:	370c      	adds	r7, #12
 8003c78:	46bd      	mov	sp, r7
 8003c7a:	bc80      	pop	{r7}
 8003c7c:	4770      	bx	lr
 8003c7e:	bf00      	nop
 8003c80:	0800928c 	.word	0x0800928c

08003c84 <_ZN3ros10SubscriberIN8std_msgs7Float32EvEC1EPKcPFvRKS2_Ei>:
{
public:
  typedef void(*CallbackT)(const MsgT&);
  MsgT msg;

  Subscriber(const char * topic_name, CallbackT cb, int endpoint = rosserial_msgs::TopicInfo::ID_SUBSCRIBER) :
 8003c84:	b580      	push	{r7, lr}
 8003c86:	b084      	sub	sp, #16
 8003c88:	af00      	add	r7, sp, #0
 8003c8a:	60f8      	str	r0, [r7, #12]
 8003c8c:	60b9      	str	r1, [r7, #8]
 8003c8e:	607a      	str	r2, [r7, #4]
 8003c90:	603b      	str	r3, [r7, #0]
    cb_(cb),
    endpoint_(endpoint)
 8003c92:	68fb      	ldr	r3, [r7, #12]
 8003c94:	4618      	mov	r0, r3
 8003c96:	f7ff ffe5 	bl	8003c64 <_ZN3ros11Subscriber_C1Ev>
 8003c9a:	4a0b      	ldr	r2, [pc, #44]	; (8003cc8 <_ZN3ros10SubscriberIN8std_msgs7Float32EvEC1EPKcPFvRKS2_Ei+0x44>)
 8003c9c:	68fb      	ldr	r3, [r7, #12]
 8003c9e:	601a      	str	r2, [r3, #0]
 8003ca0:	68fb      	ldr	r3, [r7, #12]
 8003ca2:	330c      	adds	r3, #12
 8003ca4:	4618      	mov	r0, r3
 8003ca6:	f7fe f953 	bl	8001f50 <_ZN8std_msgs7Float32C1Ev>
 8003caa:	68fb      	ldr	r3, [r7, #12]
 8003cac:	687a      	ldr	r2, [r7, #4]
 8003cae:	615a      	str	r2, [r3, #20]
 8003cb0:	68fb      	ldr	r3, [r7, #12]
 8003cb2:	683a      	ldr	r2, [r7, #0]
 8003cb4:	619a      	str	r2, [r3, #24]
  {
    topic_ = topic_name;
 8003cb6:	68fb      	ldr	r3, [r7, #12]
 8003cb8:	68ba      	ldr	r2, [r7, #8]
 8003cba:	609a      	str	r2, [r3, #8]
  };
 8003cbc:	68fb      	ldr	r3, [r7, #12]
 8003cbe:	4618      	mov	r0, r3
 8003cc0:	3710      	adds	r7, #16
 8003cc2:	46bd      	mov	sp, r7
 8003cc4:	bd80      	pop	{r7, pc}
 8003cc6:	bf00      	nop
 8003cc8:	080091e8 	.word	0x080091e8

08003ccc <_ZN3ros10SubscriberIN11sensor_msgs10JointStateEvEC1EPKcPFvRKS2_Ei>:
  Subscriber(const char * topic_name, CallbackT cb, int endpoint = rosserial_msgs::TopicInfo::ID_SUBSCRIBER) :
 8003ccc:	b580      	push	{r7, lr}
 8003cce:	b084      	sub	sp, #16
 8003cd0:	af00      	add	r7, sp, #0
 8003cd2:	60f8      	str	r0, [r7, #12]
 8003cd4:	60b9      	str	r1, [r7, #8]
 8003cd6:	607a      	str	r2, [r7, #4]
 8003cd8:	603b      	str	r3, [r7, #0]
    endpoint_(endpoint)
 8003cda:	68fb      	ldr	r3, [r7, #12]
 8003cdc:	4618      	mov	r0, r3
 8003cde:	f7ff ffc1 	bl	8003c64 <_ZN3ros11Subscriber_C1Ev>
 8003ce2:	4a0b      	ldr	r2, [pc, #44]	; (8003d10 <_ZN3ros10SubscriberIN11sensor_msgs10JointStateEvEC1EPKcPFvRKS2_Ei+0x44>)
 8003ce4:	68fb      	ldr	r3, [r7, #12]
 8003ce6:	601a      	str	r2, [r3, #0]
 8003ce8:	68fb      	ldr	r3, [r7, #12]
 8003cea:	3310      	adds	r3, #16
 8003cec:	4618      	mov	r0, r3
 8003cee:	f7fe fbeb 	bl	80024c8 <_ZN11sensor_msgs10JointStateC1Ev>
 8003cf2:	68fb      	ldr	r3, [r7, #12]
 8003cf4:	687a      	ldr	r2, [r7, #4]
 8003cf6:	669a      	str	r2, [r3, #104]	; 0x68
 8003cf8:	68fb      	ldr	r3, [r7, #12]
 8003cfa:	683a      	ldr	r2, [r7, #0]
 8003cfc:	66da      	str	r2, [r3, #108]	; 0x6c
    topic_ = topic_name;
 8003cfe:	68fb      	ldr	r3, [r7, #12]
 8003d00:	68ba      	ldr	r2, [r7, #8]
 8003d02:	609a      	str	r2, [r3, #8]
  };
 8003d04:	68fb      	ldr	r3, [r7, #12]
 8003d06:	4618      	mov	r0, r3
 8003d08:	3710      	adds	r7, #16
 8003d0a:	46bd      	mov	sp, r7
 8003d0c:	bd80      	pop	{r7, pc}
 8003d0e:	bf00      	nop
 8003d10:	080091d0 	.word	0x080091d0

08003d14 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi2048ELi2048EE8initNodeEv>:
  {
    return &hardware_;
  }

  /* Start serial, initialize buffers */
  void initNode()
 8003d14:	b580      	push	{r7, lr}
 8003d16:	b082      	sub	sp, #8
 8003d18:	af00      	add	r7, sp, #0
 8003d1a:	6078      	str	r0, [r7, #4]
  {
    hardware_.init();
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	3304      	adds	r3, #4
 8003d20:	4618      	mov	r0, r3
 8003d22:	f7fe f845 	bl	8001db0 <_ZN13STM32Hardware4initEv>
    mode_ = 0;
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	f503 5387 	add.w	r3, r3, #4320	; 0x10e0
 8003d2c:	2200      	movs	r2, #0
 8003d2e:	601a      	str	r2, [r3, #0]
    bytes_ = 0;
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	f503 5387 	add.w	r3, r3, #4320	; 0x10e0
 8003d36:	3304      	adds	r3, #4
 8003d38:	2200      	movs	r2, #0
 8003d3a:	601a      	str	r2, [r3, #0]
    index_ = 0;
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	f503 5387 	add.w	r3, r3, #4320	; 0x10e0
 8003d42:	330c      	adds	r3, #12
 8003d44:	2200      	movs	r2, #0
 8003d46:	601a      	str	r2, [r3, #0]
    topic_ = 0;
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	f503 5387 	add.w	r3, r3, #4320	; 0x10e0
 8003d4e:	3308      	adds	r3, #8
 8003d50:	2200      	movs	r2, #0
 8003d52:	601a      	str	r2, [r3, #0]
  };
 8003d54:	bf00      	nop
 8003d56:	3708      	adds	r7, #8
 8003d58:	46bd      	mov	sp, r7
 8003d5a:	bd80      	pop	{r7, pc}

08003d5c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi2048ELi2048EE9advertiseERNS_9PublisherE>:
  /********************************************************************
   * Topic Management
   */

  /* Register a new publisher */
  bool advertise(Publisher & p)
 8003d5c:	b480      	push	{r7}
 8003d5e:	b085      	sub	sp, #20
 8003d60:	af00      	add	r7, sp, #0
 8003d62:	6078      	str	r0, [r7, #4]
 8003d64:	6039      	str	r1, [r7, #0]
  {
    for (int i = 0; i < MAX_PUBLISHERS; i++)
 8003d66:	2300      	movs	r3, #0
 8003d68:	60fb      	str	r3, [r7, #12]
 8003d6a:	68fb      	ldr	r3, [r7, #12]
 8003d6c:	2b18      	cmp	r3, #24
 8003d6e:	dc1c      	bgt.n	8003daa <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi2048ELi2048EE9advertiseERNS_9PublisherE+0x4e>
    {
      if (publishers[i] == 0) // empty slot
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	68fa      	ldr	r2, [r7, #12]
 8003d74:	f202 4206 	addw	r2, r2, #1030	; 0x406
 8003d78:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003d7c:	2b00      	cmp	r3, #0
 8003d7e:	d110      	bne.n	8003da2 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi2048ELi2048EE9advertiseERNS_9PublisherE+0x46>
      {
        publishers[i] = &p;
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	68fa      	ldr	r2, [r7, #12]
 8003d84:	f202 4206 	addw	r2, r2, #1030	; 0x406
 8003d88:	6839      	ldr	r1, [r7, #0]
 8003d8a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
        p.id_ = i + 100 + MAX_SUBSCRIBERS;
 8003d8e:	68fb      	ldr	r3, [r7, #12]
 8003d90:	f103 027d 	add.w	r2, r3, #125	; 0x7d
 8003d94:	683b      	ldr	r3, [r7, #0]
 8003d96:	609a      	str	r2, [r3, #8]
        p.nh_ = this;
 8003d98:	687a      	ldr	r2, [r7, #4]
 8003d9a:	683b      	ldr	r3, [r7, #0]
 8003d9c:	60da      	str	r2, [r3, #12]
        return true;
 8003d9e:	2301      	movs	r3, #1
 8003da0:	e004      	b.n	8003dac <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi2048ELi2048EE9advertiseERNS_9PublisherE+0x50>
    for (int i = 0; i < MAX_PUBLISHERS; i++)
 8003da2:	68fb      	ldr	r3, [r7, #12]
 8003da4:	3301      	adds	r3, #1
 8003da6:	60fb      	str	r3, [r7, #12]
 8003da8:	e7df      	b.n	8003d6a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi2048ELi2048EE9advertiseERNS_9PublisherE+0xe>
      }
    }
    return false;
 8003daa:	2300      	movs	r3, #0
  }
 8003dac:	4618      	mov	r0, r3
 8003dae:	3714      	adds	r7, #20
 8003db0:	46bd      	mov	sp, r7
 8003db2:	bc80      	pop	{r7}
 8003db4:	4770      	bx	lr

08003db6 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi2048ELi2048EE9subscribeINS_10SubscriberIN8std_msgs7Float32EvEEEEbRT_>:

  /* Register a new subscriber */
  template<typename SubscriberT>
  bool subscribe(SubscriberT& s)
 8003db6:	b480      	push	{r7}
 8003db8:	b085      	sub	sp, #20
 8003dba:	af00      	add	r7, sp, #0
 8003dbc:	6078      	str	r0, [r7, #4]
 8003dbe:	6039      	str	r1, [r7, #0]
  {
    for (int i = 0; i < MAX_SUBSCRIBERS; i++)
 8003dc0:	2300      	movs	r3, #0
 8003dc2:	60fb      	str	r3, [r7, #12]
 8003dc4:	68fb      	ldr	r3, [r7, #12]
 8003dc6:	2b18      	cmp	r3, #24
 8003dc8:	dc1b      	bgt.n	8003e02 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi2048ELi2048EE9subscribeINS_10SubscriberIN8std_msgs7Float32EvEEEEbRT_+0x4c>
    {
      if (subscribers[i] == 0) // empty slot
 8003dca:	687a      	ldr	r2, [r7, #4]
 8003dcc:	68fb      	ldr	r3, [r7, #12]
 8003dce:	f203 431e 	addw	r3, r3, #1054	; 0x41e
 8003dd2:	009b      	lsls	r3, r3, #2
 8003dd4:	4413      	add	r3, r2
 8003dd6:	685b      	ldr	r3, [r3, #4]
 8003dd8:	2b00      	cmp	r3, #0
 8003dda:	d10e      	bne.n	8003dfa <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi2048ELi2048EE9subscribeINS_10SubscriberIN8std_msgs7Float32EvEEEEbRT_+0x44>
      {
        subscribers[i] = static_cast<Subscriber_*>(&s);
 8003ddc:	683a      	ldr	r2, [r7, #0]
 8003dde:	6879      	ldr	r1, [r7, #4]
 8003de0:	68fb      	ldr	r3, [r7, #12]
 8003de2:	f203 431e 	addw	r3, r3, #1054	; 0x41e
 8003de6:	009b      	lsls	r3, r3, #2
 8003de8:	440b      	add	r3, r1
 8003dea:	605a      	str	r2, [r3, #4]
        s.id_ = i + 100;
 8003dec:	68fb      	ldr	r3, [r7, #12]
 8003dee:	f103 0264 	add.w	r2, r3, #100	; 0x64
 8003df2:	683b      	ldr	r3, [r7, #0]
 8003df4:	605a      	str	r2, [r3, #4]
        return true;
 8003df6:	2301      	movs	r3, #1
 8003df8:	e004      	b.n	8003e04 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi2048ELi2048EE9subscribeINS_10SubscriberIN8std_msgs7Float32EvEEEEbRT_+0x4e>
    for (int i = 0; i < MAX_SUBSCRIBERS; i++)
 8003dfa:	68fb      	ldr	r3, [r7, #12]
 8003dfc:	3301      	adds	r3, #1
 8003dfe:	60fb      	str	r3, [r7, #12]
 8003e00:	e7e0      	b.n	8003dc4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi2048ELi2048EE9subscribeINS_10SubscriberIN8std_msgs7Float32EvEEEEbRT_+0xe>
      }
    }
    return false;
 8003e02:	2300      	movs	r3, #0
  }
 8003e04:	4618      	mov	r0, r3
 8003e06:	3714      	adds	r7, #20
 8003e08:	46bd      	mov	sp, r7
 8003e0a:	bc80      	pop	{r7}
 8003e0c:	4770      	bx	lr

08003e0e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi2048ELi2048EE9subscribeINS_10SubscriberIN11sensor_msgs10JointStateEvEEEEbRT_>:
  bool subscribe(SubscriberT& s)
 8003e0e:	b480      	push	{r7}
 8003e10:	b085      	sub	sp, #20
 8003e12:	af00      	add	r7, sp, #0
 8003e14:	6078      	str	r0, [r7, #4]
 8003e16:	6039      	str	r1, [r7, #0]
    for (int i = 0; i < MAX_SUBSCRIBERS; i++)
 8003e18:	2300      	movs	r3, #0
 8003e1a:	60fb      	str	r3, [r7, #12]
 8003e1c:	68fb      	ldr	r3, [r7, #12]
 8003e1e:	2b18      	cmp	r3, #24
 8003e20:	dc1b      	bgt.n	8003e5a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi2048ELi2048EE9subscribeINS_10SubscriberIN11sensor_msgs10JointStateEvEEEEbRT_+0x4c>
      if (subscribers[i] == 0) // empty slot
 8003e22:	687a      	ldr	r2, [r7, #4]
 8003e24:	68fb      	ldr	r3, [r7, #12]
 8003e26:	f203 431e 	addw	r3, r3, #1054	; 0x41e
 8003e2a:	009b      	lsls	r3, r3, #2
 8003e2c:	4413      	add	r3, r2
 8003e2e:	685b      	ldr	r3, [r3, #4]
 8003e30:	2b00      	cmp	r3, #0
 8003e32:	d10e      	bne.n	8003e52 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi2048ELi2048EE9subscribeINS_10SubscriberIN11sensor_msgs10JointStateEvEEEEbRT_+0x44>
        subscribers[i] = static_cast<Subscriber_*>(&s);
 8003e34:	683a      	ldr	r2, [r7, #0]
 8003e36:	6879      	ldr	r1, [r7, #4]
 8003e38:	68fb      	ldr	r3, [r7, #12]
 8003e3a:	f203 431e 	addw	r3, r3, #1054	; 0x41e
 8003e3e:	009b      	lsls	r3, r3, #2
 8003e40:	440b      	add	r3, r1
 8003e42:	605a      	str	r2, [r3, #4]
        s.id_ = i + 100;
 8003e44:	68fb      	ldr	r3, [r7, #12]
 8003e46:	f103 0264 	add.w	r2, r3, #100	; 0x64
 8003e4a:	683b      	ldr	r3, [r7, #0]
 8003e4c:	605a      	str	r2, [r3, #4]
        return true;
 8003e4e:	2301      	movs	r3, #1
 8003e50:	e004      	b.n	8003e5c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi2048ELi2048EE9subscribeINS_10SubscriberIN11sensor_msgs10JointStateEvEEEEbRT_+0x4e>
    for (int i = 0; i < MAX_SUBSCRIBERS; i++)
 8003e52:	68fb      	ldr	r3, [r7, #12]
 8003e54:	3301      	adds	r3, #1
 8003e56:	60fb      	str	r3, [r7, #12]
 8003e58:	e7e0      	b.n	8003e1c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi2048ELi2048EE9subscribeINS_10SubscriberIN11sensor_msgs10JointStateEvEEEEbRT_+0xe>
    return false;
 8003e5a:	2300      	movs	r3, #0
  }
 8003e5c:	4618      	mov	r0, r3
 8003e5e:	3714      	adds	r7, #20
 8003e60:	46bd      	mov	sp, r7
 8003e62:	bc80      	pop	{r7}
 8003e64:	4770      	bx	lr

08003e66 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi2048ELi2048EE9connectedEv>:
  virtual bool connected()
 8003e66:	b480      	push	{r7}
 8003e68:	b083      	sub	sp, #12
 8003e6a:	af00      	add	r7, sp, #0
 8003e6c:	6078      	str	r0, [r7, #4]
    return configured_;
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	f503 5387 	add.w	r3, r3, #4320	; 0x10e0
 8003e74:	3314      	adds	r3, #20
 8003e76:	781b      	ldrb	r3, [r3, #0]
  };
 8003e78:	4618      	mov	r0, r3
 8003e7a:	370c      	adds	r7, #12
 8003e7c:	46bd      	mov	sp, r7
 8003e7e:	bc80      	pop	{r7}
 8003e80:	4770      	bx	lr

08003e82 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi2048ELi2048EE8spinOnceEv>:
  virtual int spinOnce()
 8003e82:	b580      	push	{r7, lr}
 8003e84:	b084      	sub	sp, #16
 8003e86:	af00      	add	r7, sp, #0
 8003e88:	6078      	str	r0, [r7, #4]
    uint32_t c_time = hardware_.time();
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	3304      	adds	r3, #4
 8003e8e:	4618      	mov	r0, r3
 8003e90:	f7fd ffba 	bl	8001e08 <_ZN13STM32Hardware4timeEv>
 8003e94:	60f8      	str	r0, [r7, #12]
    if ((c_time - last_sync_receive_time) > (SYNC_SECONDS * 2200))
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	f503 5387 	add.w	r3, r3, #4320	; 0x10e0
 8003e9c:	331c      	adds	r3, #28
 8003e9e:	681b      	ldr	r3, [r3, #0]
 8003ea0:	68fa      	ldr	r2, [r7, #12]
 8003ea2:	1ad3      	subs	r3, r2, r3
 8003ea4:	f642 22f8 	movw	r2, #11000	; 0x2af8
 8003ea8:	4293      	cmp	r3, r2
 8003eaa:	d905      	bls.n	8003eb8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi2048ELi2048EE8spinOnceEv+0x36>
      configured_ = false;
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	f503 5387 	add.w	r3, r3, #4320	; 0x10e0
 8003eb2:	3314      	adds	r3, #20
 8003eb4:	2200      	movs	r2, #0
 8003eb6:	701a      	strb	r2, [r3, #0]
    if (mode_ != MODE_FIRST_FF)
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	f503 5387 	add.w	r3, r3, #4320	; 0x10e0
 8003ebe:	681b      	ldr	r3, [r3, #0]
 8003ec0:	2b00      	cmp	r3, #0
 8003ec2:	d00b      	beq.n	8003edc <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi2048ELi2048EE8spinOnceEv+0x5a>
      if (c_time > last_msg_timeout_time)
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	f503 5388 	add.w	r3, r3, #4352	; 0x1100
 8003eca:	681b      	ldr	r3, [r3, #0]
 8003ecc:	68fa      	ldr	r2, [r7, #12]
 8003ece:	429a      	cmp	r2, r3
 8003ed0:	d904      	bls.n	8003edc <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi2048ELi2048EE8spinOnceEv+0x5a>
        mode_ = MODE_FIRST_FF;
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	f503 5387 	add.w	r3, r3, #4320	; 0x10e0
 8003ed8:	2200      	movs	r2, #0
 8003eda:	601a      	str	r2, [r3, #0]
      if (spin_timeout_ > 0)
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	695b      	ldr	r3, [r3, #20]
 8003ee0:	2b00      	cmp	r3, #0
 8003ee2:	d013      	beq.n	8003f0c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi2048ELi2048EE8spinOnceEv+0x8a>
        if ((hardware_.time() - c_time) > spin_timeout_)
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	3304      	adds	r3, #4
 8003ee8:	4618      	mov	r0, r3
 8003eea:	f7fd ff8d 	bl	8001e08 <_ZN13STM32Hardware4timeEv>
 8003eee:	4602      	mov	r2, r0
 8003ef0:	68fb      	ldr	r3, [r7, #12]
 8003ef2:	1ad2      	subs	r2, r2, r3
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	695b      	ldr	r3, [r3, #20]
 8003ef8:	429a      	cmp	r2, r3
 8003efa:	bf8c      	ite	hi
 8003efc:	2301      	movhi	r3, #1
 8003efe:	2300      	movls	r3, #0
 8003f00:	b2db      	uxtb	r3, r3
 8003f02:	2b00      	cmp	r3, #0
 8003f04:	d002      	beq.n	8003f0c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi2048ELi2048EE8spinOnceEv+0x8a>
          return SPIN_TIMEOUT;
 8003f06:	f06f 0301 	mvn.w	r3, #1
 8003f0a:	e1f4      	b.n	80042f6 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi2048ELi2048EE8spinOnceEv+0x474>
      int data = hardware_.read();
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	3304      	adds	r3, #4
 8003f10:	4618      	mov	r0, r3
 8003f12:	f7fd ff5a 	bl	8001dca <_ZN13STM32Hardware4readEv>
 8003f16:	60b8      	str	r0, [r7, #8]
      if (data < 0)
 8003f18:	68bb      	ldr	r3, [r7, #8]
 8003f1a:	2b00      	cmp	r3, #0
 8003f1c:	f2c0 81ce 	blt.w	80042bc <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi2048ELi2048EE8spinOnceEv+0x43a>
      checksum_ += data;
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	f503 5387 	add.w	r3, r3, #4320	; 0x10e0
 8003f26:	3310      	adds	r3, #16
 8003f28:	681a      	ldr	r2, [r3, #0]
 8003f2a:	68bb      	ldr	r3, [r7, #8]
 8003f2c:	441a      	add	r2, r3
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	f503 5387 	add.w	r3, r3, #4320	; 0x10e0
 8003f34:	3310      	adds	r3, #16
 8003f36:	601a      	str	r2, [r3, #0]
      if (mode_ == MODE_MESSAGE)          /* message data being recieved */
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	f503 5387 	add.w	r3, r3, #4320	; 0x10e0
 8003f3e:	681b      	ldr	r3, [r3, #0]
 8003f40:	2b07      	cmp	r3, #7
 8003f42:	d128      	bne.n	8003f96 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi2048ELi2048EE8spinOnceEv+0x114>
        message_in[index_++] = data;
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	f503 5387 	add.w	r3, r3, #4320	; 0x10e0
 8003f4a:	330c      	adds	r3, #12
 8003f4c:	681a      	ldr	r2, [r3, #0]
 8003f4e:	1c51      	adds	r1, r2, #1
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	f503 5387 	add.w	r3, r3, #4320	; 0x10e0
 8003f56:	330c      	adds	r3, #12
 8003f58:	6019      	str	r1, [r3, #0]
 8003f5a:	68bb      	ldr	r3, [r7, #8]
 8003f5c:	b2d9      	uxtb	r1, r3
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	4413      	add	r3, r2
 8003f62:	460a      	mov	r2, r1
 8003f64:	761a      	strb	r2, [r3, #24]
        bytes_--;
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	f503 5387 	add.w	r3, r3, #4320	; 0x10e0
 8003f6c:	3304      	adds	r3, #4
 8003f6e:	681b      	ldr	r3, [r3, #0]
 8003f70:	1e5a      	subs	r2, r3, #1
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	f503 5387 	add.w	r3, r3, #4320	; 0x10e0
 8003f78:	3304      	adds	r3, #4
 8003f7a:	601a      	str	r2, [r3, #0]
        if (bytes_ == 0)                 /* is message complete? if so, checksum */
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	f503 5387 	add.w	r3, r3, #4320	; 0x10e0
 8003f82:	3304      	adds	r3, #4
 8003f84:	681b      	ldr	r3, [r3, #0]
 8003f86:	2b00      	cmp	r3, #0
 8003f88:	d1a8      	bne.n	8003edc <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi2048ELi2048EE8spinOnceEv+0x5a>
          mode_ = MODE_MSG_CHECKSUM;
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	f503 5387 	add.w	r3, r3, #4320	; 0x10e0
 8003f90:	2208      	movs	r2, #8
 8003f92:	601a      	str	r2, [r3, #0]
 8003f94:	e7a2      	b.n	8003edc <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi2048ELi2048EE8spinOnceEv+0x5a>
      else if (mode_ == MODE_FIRST_FF)
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	f503 5387 	add.w	r3, r3, #4320	; 0x10e0
 8003f9c:	681b      	ldr	r3, [r3, #0]
 8003f9e:	2b00      	cmp	r3, #0
 8003fa0:	d12e      	bne.n	8004000 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi2048ELi2048EE8spinOnceEv+0x17e>
        if (data == 0xff)
 8003fa2:	68bb      	ldr	r3, [r7, #8]
 8003fa4:	2bff      	cmp	r3, #255	; 0xff
 8003fa6:	d110      	bne.n	8003fca <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi2048ELi2048EE8spinOnceEv+0x148>
          mode_++;
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	f503 5387 	add.w	r3, r3, #4320	; 0x10e0
 8003fae:	681b      	ldr	r3, [r3, #0]
 8003fb0:	1c5a      	adds	r2, r3, #1
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	f503 5387 	add.w	r3, r3, #4320	; 0x10e0
 8003fb8:	601a      	str	r2, [r3, #0]
          last_msg_timeout_time = c_time + SERIAL_MSG_TIMEOUT;
 8003fba:	68fb      	ldr	r3, [r7, #12]
 8003fbc:	f103 0214 	add.w	r2, r3, #20
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	f503 5388 	add.w	r3, r3, #4352	; 0x1100
 8003fc6:	601a      	str	r2, [r3, #0]
 8003fc8:	e788      	b.n	8003edc <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi2048ELi2048EE8spinOnceEv+0x5a>
        else if (hardware_.time() - c_time > (SYNC_SECONDS * 1000))
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	3304      	adds	r3, #4
 8003fce:	4618      	mov	r0, r3
 8003fd0:	f7fd ff1a 	bl	8001e08 <_ZN13STM32Hardware4timeEv>
 8003fd4:	4602      	mov	r2, r0
 8003fd6:	68fb      	ldr	r3, [r7, #12]
 8003fd8:	1ad3      	subs	r3, r2, r3
 8003fda:	f241 3288 	movw	r2, #5000	; 0x1388
 8003fde:	4293      	cmp	r3, r2
 8003fe0:	bf8c      	ite	hi
 8003fe2:	2301      	movhi	r3, #1
 8003fe4:	2300      	movls	r3, #0
 8003fe6:	b2db      	uxtb	r3, r3
 8003fe8:	2b00      	cmp	r3, #0
 8003fea:	f43f af77 	beq.w	8003edc <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi2048ELi2048EE8spinOnceEv+0x5a>
          configured_ = false;
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	f503 5387 	add.w	r3, r3, #4320	; 0x10e0
 8003ff4:	3314      	adds	r3, #20
 8003ff6:	2200      	movs	r2, #0
 8003ff8:	701a      	strb	r2, [r3, #0]
          return SPIN_TIMEOUT;
 8003ffa:	f06f 0301 	mvn.w	r3, #1
 8003ffe:	e17a      	b.n	80042f6 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi2048ELi2048EE8spinOnceEv+0x474>
      else if (mode_ == MODE_PROTOCOL_VER)
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	f503 5387 	add.w	r3, r3, #4320	; 0x10e0
 8004006:	681b      	ldr	r3, [r3, #0]
 8004008:	2b01      	cmp	r3, #1
 800400a:	d11d      	bne.n	8004048 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi2048ELi2048EE8spinOnceEv+0x1c6>
        if (data == PROTOCOL_VER)
 800400c:	68bb      	ldr	r3, [r7, #8]
 800400e:	2bfe      	cmp	r3, #254	; 0xfe
 8004010:	d109      	bne.n	8004026 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi2048ELi2048EE8spinOnceEv+0x1a4>
          mode_++;
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	f503 5387 	add.w	r3, r3, #4320	; 0x10e0
 8004018:	681b      	ldr	r3, [r3, #0]
 800401a:	1c5a      	adds	r2, r3, #1
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	f503 5387 	add.w	r3, r3, #4320	; 0x10e0
 8004022:	601a      	str	r2, [r3, #0]
 8004024:	e75a      	b.n	8003edc <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi2048ELi2048EE8spinOnceEv+0x5a>
          mode_ = MODE_FIRST_FF;
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	f503 5387 	add.w	r3, r3, #4320	; 0x10e0
 800402c:	2200      	movs	r2, #0
 800402e:	601a      	str	r2, [r3, #0]
          if (configured_ == false)
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	f503 5387 	add.w	r3, r3, #4320	; 0x10e0
 8004036:	3314      	adds	r3, #20
 8004038:	781b      	ldrb	r3, [r3, #0]
 800403a:	2b00      	cmp	r3, #0
 800403c:	f47f af4e 	bne.w	8003edc <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi2048ELi2048EE8spinOnceEv+0x5a>
            requestSyncTime();  /* send a msg back showing our protocol version */
 8004040:	6878      	ldr	r0, [r7, #4]
 8004042:	f000 f95c 	bl	80042fe <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi2048ELi2048EE15requestSyncTimeEv>
 8004046:	e749      	b.n	8003edc <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi2048ELi2048EE8spinOnceEv+0x5a>
      else if (mode_ == MODE_SIZE_L)      /* bottom half of message size */
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	f503 5387 	add.w	r3, r3, #4320	; 0x10e0
 800404e:	681b      	ldr	r3, [r3, #0]
 8004050:	2b02      	cmp	r3, #2
 8004052:	d11b      	bne.n	800408c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi2048ELi2048EE8spinOnceEv+0x20a>
        bytes_ = data;
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	f503 5387 	add.w	r3, r3, #4320	; 0x10e0
 800405a:	3304      	adds	r3, #4
 800405c:	68ba      	ldr	r2, [r7, #8]
 800405e:	601a      	str	r2, [r3, #0]
        index_ = 0;
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	f503 5387 	add.w	r3, r3, #4320	; 0x10e0
 8004066:	330c      	adds	r3, #12
 8004068:	2200      	movs	r2, #0
 800406a:	601a      	str	r2, [r3, #0]
        mode_++;
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	f503 5387 	add.w	r3, r3, #4320	; 0x10e0
 8004072:	681b      	ldr	r3, [r3, #0]
 8004074:	1c5a      	adds	r2, r3, #1
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	f503 5387 	add.w	r3, r3, #4320	; 0x10e0
 800407c:	601a      	str	r2, [r3, #0]
        checksum_ = data;               /* first byte for calculating size checksum */
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	f503 5387 	add.w	r3, r3, #4320	; 0x10e0
 8004084:	3310      	adds	r3, #16
 8004086:	68ba      	ldr	r2, [r7, #8]
 8004088:	601a      	str	r2, [r3, #0]
 800408a:	e727      	b.n	8003edc <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi2048ELi2048EE8spinOnceEv+0x5a>
      else if (mode_ == MODE_SIZE_H)      /* top half of message size */
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	f503 5387 	add.w	r3, r3, #4320	; 0x10e0
 8004092:	681b      	ldr	r3, [r3, #0]
 8004094:	2b03      	cmp	r3, #3
 8004096:	d116      	bne.n	80040c6 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi2048ELi2048EE8spinOnceEv+0x244>
        bytes_ += data << 8;
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	f503 5387 	add.w	r3, r3, #4320	; 0x10e0
 800409e:	3304      	adds	r3, #4
 80040a0:	681a      	ldr	r2, [r3, #0]
 80040a2:	68bb      	ldr	r3, [r7, #8]
 80040a4:	021b      	lsls	r3, r3, #8
 80040a6:	441a      	add	r2, r3
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	f503 5387 	add.w	r3, r3, #4320	; 0x10e0
 80040ae:	3304      	adds	r3, #4
 80040b0:	601a      	str	r2, [r3, #0]
        mode_++;
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	f503 5387 	add.w	r3, r3, #4320	; 0x10e0
 80040b8:	681b      	ldr	r3, [r3, #0]
 80040ba:	1c5a      	adds	r2, r3, #1
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	f503 5387 	add.w	r3, r3, #4320	; 0x10e0
 80040c2:	601a      	str	r2, [r3, #0]
 80040c4:	e70a      	b.n	8003edc <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi2048ELi2048EE8spinOnceEv+0x5a>
      else if (mode_ == MODE_SIZE_CHECKSUM)
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	f503 5387 	add.w	r3, r3, #4320	; 0x10e0
 80040cc:	681b      	ldr	r3, [r3, #0]
 80040ce:	2b04      	cmp	r3, #4
 80040d0:	d11b      	bne.n	800410a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi2048ELi2048EE8spinOnceEv+0x288>
        if ((checksum_ % 256) == 255)
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	f503 5387 	add.w	r3, r3, #4320	; 0x10e0
 80040d8:	3310      	adds	r3, #16
 80040da:	681b      	ldr	r3, [r3, #0]
 80040dc:	425a      	negs	r2, r3
 80040de:	b2db      	uxtb	r3, r3
 80040e0:	b2d2      	uxtb	r2, r2
 80040e2:	bf58      	it	pl
 80040e4:	4253      	negpl	r3, r2
 80040e6:	2bff      	cmp	r3, #255	; 0xff
 80040e8:	d109      	bne.n	80040fe <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi2048ELi2048EE8spinOnceEv+0x27c>
          mode_++;
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	f503 5387 	add.w	r3, r3, #4320	; 0x10e0
 80040f0:	681b      	ldr	r3, [r3, #0]
 80040f2:	1c5a      	adds	r2, r3, #1
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	f503 5387 	add.w	r3, r3, #4320	; 0x10e0
 80040fa:	601a      	str	r2, [r3, #0]
 80040fc:	e6ee      	b.n	8003edc <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi2048ELi2048EE8spinOnceEv+0x5a>
          mode_ = MODE_FIRST_FF;          /* Abandon the frame if the msg len is wrong */
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	f503 5387 	add.w	r3, r3, #4320	; 0x10e0
 8004104:	2200      	movs	r2, #0
 8004106:	601a      	str	r2, [r3, #0]
 8004108:	e6e8      	b.n	8003edc <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi2048ELi2048EE8spinOnceEv+0x5a>
      else if (mode_ == MODE_TOPIC_L)     /* bottom half of topic id */
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	f503 5387 	add.w	r3, r3, #4320	; 0x10e0
 8004110:	681b      	ldr	r3, [r3, #0]
 8004112:	2b05      	cmp	r3, #5
 8004114:	d115      	bne.n	8004142 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi2048ELi2048EE8spinOnceEv+0x2c0>
        topic_ = data;
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	f503 5387 	add.w	r3, r3, #4320	; 0x10e0
 800411c:	3308      	adds	r3, #8
 800411e:	68ba      	ldr	r2, [r7, #8]
 8004120:	601a      	str	r2, [r3, #0]
        mode_++;
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	f503 5387 	add.w	r3, r3, #4320	; 0x10e0
 8004128:	681b      	ldr	r3, [r3, #0]
 800412a:	1c5a      	adds	r2, r3, #1
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	f503 5387 	add.w	r3, r3, #4320	; 0x10e0
 8004132:	601a      	str	r2, [r3, #0]
        checksum_ = data;               /* first byte included in checksum */
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	f503 5387 	add.w	r3, r3, #4320	; 0x10e0
 800413a:	3310      	adds	r3, #16
 800413c:	68ba      	ldr	r2, [r7, #8]
 800413e:	601a      	str	r2, [r3, #0]
 8004140:	e6cc      	b.n	8003edc <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi2048ELi2048EE8spinOnceEv+0x5a>
      else if (mode_ == MODE_TOPIC_H)     /* top half of topic id */
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	f503 5387 	add.w	r3, r3, #4320	; 0x10e0
 8004148:	681b      	ldr	r3, [r3, #0]
 800414a:	2b06      	cmp	r3, #6
 800414c:	d11f      	bne.n	800418e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi2048ELi2048EE8spinOnceEv+0x30c>
        topic_ += data << 8;
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	f503 5387 	add.w	r3, r3, #4320	; 0x10e0
 8004154:	3308      	adds	r3, #8
 8004156:	681a      	ldr	r2, [r3, #0]
 8004158:	68bb      	ldr	r3, [r7, #8]
 800415a:	021b      	lsls	r3, r3, #8
 800415c:	441a      	add	r2, r3
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	f503 5387 	add.w	r3, r3, #4320	; 0x10e0
 8004164:	3308      	adds	r3, #8
 8004166:	601a      	str	r2, [r3, #0]
        mode_ = MODE_MESSAGE;
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	f503 5387 	add.w	r3, r3, #4320	; 0x10e0
 800416e:	2207      	movs	r2, #7
 8004170:	601a      	str	r2, [r3, #0]
        if (bytes_ == 0)
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	f503 5387 	add.w	r3, r3, #4320	; 0x10e0
 8004178:	3304      	adds	r3, #4
 800417a:	681b      	ldr	r3, [r3, #0]
 800417c:	2b00      	cmp	r3, #0
 800417e:	f47f aead 	bne.w	8003edc <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi2048ELi2048EE8spinOnceEv+0x5a>
          mode_ = MODE_MSG_CHECKSUM;
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	f503 5387 	add.w	r3, r3, #4320	; 0x10e0
 8004188:	2208      	movs	r2, #8
 800418a:	601a      	str	r2, [r3, #0]
 800418c:	e6a6      	b.n	8003edc <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi2048ELi2048EE8spinOnceEv+0x5a>
      else if (mode_ == MODE_MSG_CHECKSUM)    /* do checksum */
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	f503 5387 	add.w	r3, r3, #4320	; 0x10e0
 8004194:	681b      	ldr	r3, [r3, #0]
 8004196:	2b08      	cmp	r3, #8
 8004198:	f47f aea0 	bne.w	8003edc <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi2048ELi2048EE8spinOnceEv+0x5a>
        mode_ = MODE_FIRST_FF;
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	f503 5387 	add.w	r3, r3, #4320	; 0x10e0
 80041a2:	2200      	movs	r2, #0
 80041a4:	601a      	str	r2, [r3, #0]
        if ((checksum_ % 256) == 255)
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	f503 5387 	add.w	r3, r3, #4320	; 0x10e0
 80041ac:	3310      	adds	r3, #16
 80041ae:	681b      	ldr	r3, [r3, #0]
 80041b0:	425a      	negs	r2, r3
 80041b2:	b2db      	uxtb	r3, r3
 80041b4:	b2d2      	uxtb	r2, r2
 80041b6:	bf58      	it	pl
 80041b8:	4253      	negpl	r3, r2
 80041ba:	2bff      	cmp	r3, #255	; 0xff
 80041bc:	f47f ae8e 	bne.w	8003edc <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi2048ELi2048EE8spinOnceEv+0x5a>
          if (topic_ == TopicInfo::ID_PUBLISHER)
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	f503 5387 	add.w	r3, r3, #4320	; 0x10e0
 80041c6:	3308      	adds	r3, #8
 80041c8:	681b      	ldr	r3, [r3, #0]
 80041ca:	2b00      	cmp	r3, #0
 80041cc:	d114      	bne.n	80041f8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi2048ELi2048EE8spinOnceEv+0x376>
            requestSyncTime();
 80041ce:	6878      	ldr	r0, [r7, #4]
 80041d0:	f000 f895 	bl	80042fe <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi2048ELi2048EE15requestSyncTimeEv>
            negotiateTopics();
 80041d4:	6878      	ldr	r0, [r7, #4]
 80041d6:	f000 f8af 	bl	8004338 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi2048ELi2048EE15negotiateTopicsEv>
            last_sync_time = c_time;
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	f503 5387 	add.w	r3, r3, #4320	; 0x10e0
 80041e0:	3318      	adds	r3, #24
 80041e2:	68fa      	ldr	r2, [r7, #12]
 80041e4:	601a      	str	r2, [r3, #0]
            last_sync_receive_time = c_time;
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	f503 5387 	add.w	r3, r3, #4320	; 0x10e0
 80041ec:	331c      	adds	r3, #28
 80041ee:	68fa      	ldr	r2, [r7, #12]
 80041f0:	601a      	str	r2, [r3, #0]
            return SPIN_ERR;
 80041f2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80041f6:	e07e      	b.n	80042f6 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi2048ELi2048EE8spinOnceEv+0x474>
          else if (topic_ == TopicInfo::ID_TIME)
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	f503 5387 	add.w	r3, r3, #4320	; 0x10e0
 80041fe:	3308      	adds	r3, #8
 8004200:	681b      	ldr	r3, [r3, #0]
 8004202:	2b0a      	cmp	r3, #10
 8004204:	d106      	bne.n	8004214 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi2048ELi2048EE8spinOnceEv+0x392>
            syncTime(message_in);
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	3318      	adds	r3, #24
 800420a:	4619      	mov	r1, r3
 800420c:	6878      	ldr	r0, [r7, #4]
 800420e:	f000 f975 	bl	80044fc <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi2048ELi2048EE8syncTimeEPh>
 8004212:	e663      	b.n	8003edc <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi2048ELi2048EE8spinOnceEv+0x5a>
          else if (topic_ == TopicInfo::ID_PARAMETER_REQUEST)
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	f503 5387 	add.w	r3, r3, #4320	; 0x10e0
 800421a:	3308      	adds	r3, #8
 800421c:	681b      	ldr	r3, [r3, #0]
 800421e:	2b06      	cmp	r3, #6
 8004220:	d110      	bne.n	8004244 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi2048ELi2048EE8spinOnceEv+0x3c2>
            req_param_resp.deserialize(message_in);
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	f503 5388 	add.w	r3, r3, #4352	; 0x1100
 8004228:	3308      	adds	r3, #8
 800422a:	687a      	ldr	r2, [r7, #4]
 800422c:	3218      	adds	r2, #24
 800422e:	4611      	mov	r1, r2
 8004230:	4618      	mov	r0, r3
 8004232:	f7fd fad6 	bl	80017e2 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh>
            param_recieved = true;
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	f503 5388 	add.w	r3, r3, #4352	; 0x1100
 800423c:	3304      	adds	r3, #4
 800423e:	2201      	movs	r2, #1
 8004240:	701a      	strb	r2, [r3, #0]
 8004242:	e64b      	b.n	8003edc <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi2048ELi2048EE8spinOnceEv+0x5a>
          else if (topic_ == TopicInfo::ID_TX_STOP)
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	f503 5387 	add.w	r3, r3, #4320	; 0x10e0
 800424a:	3308      	adds	r3, #8
 800424c:	681b      	ldr	r3, [r3, #0]
 800424e:	2b0b      	cmp	r3, #11
 8004250:	d106      	bne.n	8004260 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi2048ELi2048EE8spinOnceEv+0x3de>
            configured_ = false;
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	f503 5387 	add.w	r3, r3, #4320	; 0x10e0
 8004258:	3314      	adds	r3, #20
 800425a:	2200      	movs	r2, #0
 800425c:	701a      	strb	r2, [r3, #0]
 800425e:	e63d      	b.n	8003edc <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi2048ELi2048EE8spinOnceEv+0x5a>
            if (subscribers[topic_ - 100])
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	f503 5387 	add.w	r3, r3, #4320	; 0x10e0
 8004266:	3308      	adds	r3, #8
 8004268:	681b      	ldr	r3, [r3, #0]
 800426a:	3b64      	subs	r3, #100	; 0x64
 800426c:	687a      	ldr	r2, [r7, #4]
 800426e:	f203 431e 	addw	r3, r3, #1054	; 0x41e
 8004272:	009b      	lsls	r3, r3, #2
 8004274:	4413      	add	r3, r2
 8004276:	685b      	ldr	r3, [r3, #4]
 8004278:	2b00      	cmp	r3, #0
 800427a:	f43f ae2f 	beq.w	8003edc <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi2048ELi2048EE8spinOnceEv+0x5a>
              subscribers[topic_ - 100]->callback(message_in);
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	f503 5387 	add.w	r3, r3, #4320	; 0x10e0
 8004284:	3308      	adds	r3, #8
 8004286:	681b      	ldr	r3, [r3, #0]
 8004288:	3b64      	subs	r3, #100	; 0x64
 800428a:	687a      	ldr	r2, [r7, #4]
 800428c:	f203 431e 	addw	r3, r3, #1054	; 0x41e
 8004290:	009b      	lsls	r3, r3, #2
 8004292:	4413      	add	r3, r2
 8004294:	6858      	ldr	r0, [r3, #4]
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	f503 5387 	add.w	r3, r3, #4320	; 0x10e0
 800429c:	3308      	adds	r3, #8
 800429e:	681b      	ldr	r3, [r3, #0]
 80042a0:	3b64      	subs	r3, #100	; 0x64
 80042a2:	687a      	ldr	r2, [r7, #4]
 80042a4:	f203 431e 	addw	r3, r3, #1054	; 0x41e
 80042a8:	009b      	lsls	r3, r3, #2
 80042aa:	4413      	add	r3, r2
 80042ac:	685b      	ldr	r3, [r3, #4]
 80042ae:	681b      	ldr	r3, [r3, #0]
 80042b0:	681b      	ldr	r3, [r3, #0]
 80042b2:	687a      	ldr	r2, [r7, #4]
 80042b4:	3218      	adds	r2, #24
 80042b6:	4611      	mov	r1, r2
 80042b8:	4798      	blx	r3
    while (true)
 80042ba:	e60f      	b.n	8003edc <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi2048ELi2048EE8spinOnceEv+0x5a>
        break;
 80042bc:	bf00      	nop
    if (configured_ && ((c_time - last_sync_time) > (SYNC_SECONDS * 500)))
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	f503 5387 	add.w	r3, r3, #4320	; 0x10e0
 80042c4:	3314      	adds	r3, #20
 80042c6:	781b      	ldrb	r3, [r3, #0]
 80042c8:	2b00      	cmp	r3, #0
 80042ca:	d013      	beq.n	80042f4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi2048ELi2048EE8spinOnceEv+0x472>
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	f503 5387 	add.w	r3, r3, #4320	; 0x10e0
 80042d2:	3318      	adds	r3, #24
 80042d4:	681b      	ldr	r3, [r3, #0]
 80042d6:	68fa      	ldr	r2, [r7, #12]
 80042d8:	1ad3      	subs	r3, r2, r3
 80042da:	f640 12c4 	movw	r2, #2500	; 0x9c4
 80042de:	4293      	cmp	r3, r2
 80042e0:	d908      	bls.n	80042f4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi2048ELi2048EE8spinOnceEv+0x472>
      requestSyncTime();
 80042e2:	6878      	ldr	r0, [r7, #4]
 80042e4:	f000 f80b 	bl	80042fe <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi2048ELi2048EE15requestSyncTimeEv>
      last_sync_time = c_time;
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	f503 5387 	add.w	r3, r3, #4320	; 0x10e0
 80042ee:	3318      	adds	r3, #24
 80042f0:	68fa      	ldr	r2, [r7, #12]
 80042f2:	601a      	str	r2, [r3, #0]
    return SPIN_OK;
 80042f4:	2300      	movs	r3, #0
  }
 80042f6:	4618      	mov	r0, r3
 80042f8:	3710      	adds	r7, #16
 80042fa:	46bd      	mov	sp, r7
 80042fc:	bd80      	pop	{r7, pc}

080042fe <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi2048ELi2048EE15requestSyncTimeEv>:
  void requestSyncTime()
 80042fe:	b580      	push	{r7, lr}
 8004300:	b086      	sub	sp, #24
 8004302:	af00      	add	r7, sp, #0
 8004304:	6078      	str	r0, [r7, #4]
    std_msgs::Time t;
 8004306:	f107 030c 	add.w	r3, r7, #12
 800430a:	4618      	mov	r0, r3
 800430c:	f7fc fdde 	bl	8000ecc <_ZN8std_msgs4TimeC1Ev>
    publish(TopicInfo::ID_TIME, &t);
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	681b      	ldr	r3, [r3, #0]
 8004314:	681b      	ldr	r3, [r3, #0]
 8004316:	f107 020c 	add.w	r2, r7, #12
 800431a:	210a      	movs	r1, #10
 800431c:	6878      	ldr	r0, [r7, #4]
 800431e:	4798      	blx	r3
    rt_time = hardware_.time();
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	3304      	adds	r3, #4
 8004324:	4618      	mov	r0, r3
 8004326:	f7fd fd6f 	bl	8001e08 <_ZN13STM32Hardware4timeEv>
 800432a:	4602      	mov	r2, r0
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	609a      	str	r2, [r3, #8]
  }
 8004330:	bf00      	nop
 8004332:	3718      	adds	r7, #24
 8004334:	46bd      	mov	sp, r7
 8004336:	bd80      	pop	{r7, pc}

08004338 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi2048ELi2048EE15negotiateTopicsEv>:
      }
    }
    return false;
  }

  void negotiateTopics()
 8004338:	b590      	push	{r4, r7, lr}
 800433a:	b08b      	sub	sp, #44	; 0x2c
 800433c:	af00      	add	r7, sp, #0
 800433e:	6078      	str	r0, [r7, #4]
  {
    rosserial_msgs::TopicInfo ti;
 8004340:	f107 030c 	add.w	r3, r7, #12
 8004344:	4618      	mov	r0, r3
 8004346:	f7fc feab 	bl	80010a0 <_ZN14rosserial_msgs9TopicInfoC1Ev>
    int i;
    for (i = 0; i < MAX_PUBLISHERS; i++)
 800434a:	2300      	movs	r3, #0
 800434c:	627b      	str	r3, [r7, #36]	; 0x24
 800434e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004350:	2b18      	cmp	r3, #24
 8004352:	dc5b      	bgt.n	800440c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi2048ELi2048EE15negotiateTopicsEv+0xd4>
    {
      if (publishers[i] != 0) // non-empty slot
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004358:	f202 4206 	addw	r2, r2, #1030	; 0x406
 800435c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004360:	2b00      	cmp	r3, #0
 8004362:	d04f      	beq.n	8004404 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi2048ELi2048EE15negotiateTopicsEv+0xcc>
      {
        ti.topic_id = publishers[i]->id_;
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004368:	f202 4206 	addw	r2, r2, #1030	; 0x406
 800436c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004370:	689b      	ldr	r3, [r3, #8]
 8004372:	b29b      	uxth	r3, r3
 8004374:	823b      	strh	r3, [r7, #16]
        ti.topic_name = (char *) publishers[i]->topic_;
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800437a:	f202 4206 	addw	r2, r2, #1030	; 0x406
 800437e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004382:	681b      	ldr	r3, [r3, #0]
 8004384:	617b      	str	r3, [r7, #20]
        ti.message_type = (char *) publishers[i]->msg_->getType();
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800438a:	f202 4206 	addw	r2, r2, #1030	; 0x406
 800438e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004392:	6859      	ldr	r1, [r3, #4]
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004398:	f202 4206 	addw	r2, r2, #1030	; 0x406
 800439c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80043a0:	685b      	ldr	r3, [r3, #4]
 80043a2:	681b      	ldr	r3, [r3, #0]
 80043a4:	3308      	adds	r3, #8
 80043a6:	681b      	ldr	r3, [r3, #0]
 80043a8:	4608      	mov	r0, r1
 80043aa:	4798      	blx	r3
 80043ac:	4603      	mov	r3, r0
 80043ae:	61bb      	str	r3, [r7, #24]
        ti.md5sum = (char *) publishers[i]->msg_->getMD5();
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80043b4:	f202 4206 	addw	r2, r2, #1030	; 0x406
 80043b8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80043bc:	6859      	ldr	r1, [r3, #4]
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80043c2:	f202 4206 	addw	r2, r2, #1030	; 0x406
 80043c6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80043ca:	685b      	ldr	r3, [r3, #4]
 80043cc:	681b      	ldr	r3, [r3, #0]
 80043ce:	330c      	adds	r3, #12
 80043d0:	681b      	ldr	r3, [r3, #0]
 80043d2:	4608      	mov	r0, r1
 80043d4:	4798      	blx	r3
 80043d6:	4603      	mov	r3, r0
 80043d8:	61fb      	str	r3, [r7, #28]
        ti.buffer_size = OUTPUT_SIZE;
 80043da:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80043de:	623b      	str	r3, [r7, #32]
        publish(publishers[i]->getEndpointType(), &ti);
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	681b      	ldr	r3, [r3, #0]
 80043e4:	681c      	ldr	r4, [r3, #0]
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80043ea:	f202 4206 	addw	r2, r2, #1030	; 0x406
 80043ee:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80043f2:	4618      	mov	r0, r3
 80043f4:	f7fd fb94 	bl	8001b20 <_ZN3ros9Publisher15getEndpointTypeEv>
 80043f8:	4601      	mov	r1, r0
 80043fa:	f107 030c 	add.w	r3, r7, #12
 80043fe:	461a      	mov	r2, r3
 8004400:	6878      	ldr	r0, [r7, #4]
 8004402:	47a0      	blx	r4
    for (i = 0; i < MAX_PUBLISHERS; i++)
 8004404:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004406:	3301      	adds	r3, #1
 8004408:	627b      	str	r3, [r7, #36]	; 0x24
 800440a:	e7a0      	b.n	800434e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi2048ELi2048EE15negotiateTopicsEv+0x16>
      }
    }
    for (i = 0; i < MAX_SUBSCRIBERS; i++)
 800440c:	2300      	movs	r3, #0
 800440e:	627b      	str	r3, [r7, #36]	; 0x24
 8004410:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004412:	2b18      	cmp	r3, #24
 8004414:	dc68      	bgt.n	80044e8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi2048ELi2048EE15negotiateTopicsEv+0x1b0>
    {
      if (subscribers[i] != 0) // non-empty slot
 8004416:	687a      	ldr	r2, [r7, #4]
 8004418:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800441a:	f203 431e 	addw	r3, r3, #1054	; 0x41e
 800441e:	009b      	lsls	r3, r3, #2
 8004420:	4413      	add	r3, r2
 8004422:	685b      	ldr	r3, [r3, #4]
 8004424:	2b00      	cmp	r3, #0
 8004426:	d05b      	beq.n	80044e0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi2048ELi2048EE15negotiateTopicsEv+0x1a8>
      {
        ti.topic_id = subscribers[i]->id_;
 8004428:	687a      	ldr	r2, [r7, #4]
 800442a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800442c:	f203 431e 	addw	r3, r3, #1054	; 0x41e
 8004430:	009b      	lsls	r3, r3, #2
 8004432:	4413      	add	r3, r2
 8004434:	685b      	ldr	r3, [r3, #4]
 8004436:	685b      	ldr	r3, [r3, #4]
 8004438:	b29b      	uxth	r3, r3
 800443a:	823b      	strh	r3, [r7, #16]
        ti.topic_name = (char *) subscribers[i]->topic_;
 800443c:	687a      	ldr	r2, [r7, #4]
 800443e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004440:	f203 431e 	addw	r3, r3, #1054	; 0x41e
 8004444:	009b      	lsls	r3, r3, #2
 8004446:	4413      	add	r3, r2
 8004448:	685b      	ldr	r3, [r3, #4]
 800444a:	689b      	ldr	r3, [r3, #8]
 800444c:	617b      	str	r3, [r7, #20]
        ti.message_type = (char *) subscribers[i]->getMsgType();
 800444e:	687a      	ldr	r2, [r7, #4]
 8004450:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004452:	f203 431e 	addw	r3, r3, #1054	; 0x41e
 8004456:	009b      	lsls	r3, r3, #2
 8004458:	4413      	add	r3, r2
 800445a:	6859      	ldr	r1, [r3, #4]
 800445c:	687a      	ldr	r2, [r7, #4]
 800445e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004460:	f203 431e 	addw	r3, r3, #1054	; 0x41e
 8004464:	009b      	lsls	r3, r3, #2
 8004466:	4413      	add	r3, r2
 8004468:	685b      	ldr	r3, [r3, #4]
 800446a:	681b      	ldr	r3, [r3, #0]
 800446c:	3308      	adds	r3, #8
 800446e:	681b      	ldr	r3, [r3, #0]
 8004470:	4608      	mov	r0, r1
 8004472:	4798      	blx	r3
 8004474:	4603      	mov	r3, r0
 8004476:	61bb      	str	r3, [r7, #24]
        ti.md5sum = (char *) subscribers[i]->getMsgMD5();
 8004478:	687a      	ldr	r2, [r7, #4]
 800447a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800447c:	f203 431e 	addw	r3, r3, #1054	; 0x41e
 8004480:	009b      	lsls	r3, r3, #2
 8004482:	4413      	add	r3, r2
 8004484:	6859      	ldr	r1, [r3, #4]
 8004486:	687a      	ldr	r2, [r7, #4]
 8004488:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800448a:	f203 431e 	addw	r3, r3, #1054	; 0x41e
 800448e:	009b      	lsls	r3, r3, #2
 8004490:	4413      	add	r3, r2
 8004492:	685b      	ldr	r3, [r3, #4]
 8004494:	681b      	ldr	r3, [r3, #0]
 8004496:	330c      	adds	r3, #12
 8004498:	681b      	ldr	r3, [r3, #0]
 800449a:	4608      	mov	r0, r1
 800449c:	4798      	blx	r3
 800449e:	4603      	mov	r3, r0
 80044a0:	61fb      	str	r3, [r7, #28]
        ti.buffer_size = INPUT_SIZE;
 80044a2:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80044a6:	623b      	str	r3, [r7, #32]
        publish(subscribers[i]->getEndpointType(), &ti);
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	681b      	ldr	r3, [r3, #0]
 80044ac:	681c      	ldr	r4, [r3, #0]
 80044ae:	687a      	ldr	r2, [r7, #4]
 80044b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044b2:	f203 431e 	addw	r3, r3, #1054	; 0x41e
 80044b6:	009b      	lsls	r3, r3, #2
 80044b8:	4413      	add	r3, r2
 80044ba:	6859      	ldr	r1, [r3, #4]
 80044bc:	687a      	ldr	r2, [r7, #4]
 80044be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044c0:	f203 431e 	addw	r3, r3, #1054	; 0x41e
 80044c4:	009b      	lsls	r3, r3, #2
 80044c6:	4413      	add	r3, r2
 80044c8:	685b      	ldr	r3, [r3, #4]
 80044ca:	681b      	ldr	r3, [r3, #0]
 80044cc:	3304      	adds	r3, #4
 80044ce:	681b      	ldr	r3, [r3, #0]
 80044d0:	4608      	mov	r0, r1
 80044d2:	4798      	blx	r3
 80044d4:	4601      	mov	r1, r0
 80044d6:	f107 030c 	add.w	r3, r7, #12
 80044da:	461a      	mov	r2, r3
 80044dc:	6878      	ldr	r0, [r7, #4]
 80044de:	47a0      	blx	r4
    for (i = 0; i < MAX_SUBSCRIBERS; i++)
 80044e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044e2:	3301      	adds	r3, #1
 80044e4:	627b      	str	r3, [r7, #36]	; 0x24
 80044e6:	e793      	b.n	8004410 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi2048ELi2048EE15negotiateTopicsEv+0xd8>
      }
    }
    configured_ = true;
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	f503 5387 	add.w	r3, r3, #4320	; 0x10e0
 80044ee:	3314      	adds	r3, #20
 80044f0:	2201      	movs	r2, #1
 80044f2:	701a      	strb	r2, [r3, #0]
  }
 80044f4:	bf00      	nop
 80044f6:	372c      	adds	r7, #44	; 0x2c
 80044f8:	46bd      	mov	sp, r7
 80044fa:	bd90      	pop	{r4, r7, pc}

080044fc <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi2048ELi2048EE8syncTimeEPh>:
  void syncTime(uint8_t * data)
 80044fc:	b580      	push	{r7, lr}
 80044fe:	b086      	sub	sp, #24
 8004500:	af00      	add	r7, sp, #0
 8004502:	6078      	str	r0, [r7, #4]
 8004504:	6039      	str	r1, [r7, #0]
    std_msgs::Time t;
 8004506:	f107 0308 	add.w	r3, r7, #8
 800450a:	4618      	mov	r0, r3
 800450c:	f7fc fcde 	bl	8000ecc <_ZN8std_msgs4TimeC1Ev>
    uint32_t offset = hardware_.time() - rt_time;
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	3304      	adds	r3, #4
 8004514:	4618      	mov	r0, r3
 8004516:	f7fd fc77 	bl	8001e08 <_ZN13STM32Hardware4timeEv>
 800451a:	4602      	mov	r2, r0
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	689b      	ldr	r3, [r3, #8]
 8004520:	1ad3      	subs	r3, r2, r3
 8004522:	617b      	str	r3, [r7, #20]
    t.deserialize(data);
 8004524:	f107 0308 	add.w	r3, r7, #8
 8004528:	6839      	ldr	r1, [r7, #0]
 800452a:	4618      	mov	r0, r3
 800452c:	f7fc fd3d 	bl	8000faa <_ZN8std_msgs4Time11deserializeEPh>
    t.data.sec += offset / 1000;
 8004530:	68fa      	ldr	r2, [r7, #12]
 8004532:	697b      	ldr	r3, [r7, #20]
 8004534:	4915      	ldr	r1, [pc, #84]	; (800458c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi2048ELi2048EE8syncTimeEPh+0x90>)
 8004536:	fba1 1303 	umull	r1, r3, r1, r3
 800453a:	099b      	lsrs	r3, r3, #6
 800453c:	4413      	add	r3, r2
 800453e:	60fb      	str	r3, [r7, #12]
    t.data.nsec += (offset % 1000) * 1000000UL;
 8004540:	6939      	ldr	r1, [r7, #16]
 8004542:	697a      	ldr	r2, [r7, #20]
 8004544:	4b11      	ldr	r3, [pc, #68]	; (800458c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi2048ELi2048EE8syncTimeEPh+0x90>)
 8004546:	fba3 0302 	umull	r0, r3, r3, r2
 800454a:	099b      	lsrs	r3, r3, #6
 800454c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8004550:	fb00 f303 	mul.w	r3, r0, r3
 8004554:	1ad3      	subs	r3, r2, r3
 8004556:	4a0e      	ldr	r2, [pc, #56]	; (8004590 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi2048ELi2048EE8syncTimeEPh+0x94>)
 8004558:	fb02 f303 	mul.w	r3, r2, r3
 800455c:	440b      	add	r3, r1
 800455e:	613b      	str	r3, [r7, #16]
    this->setNow(t.data);
 8004560:	f107 0308 	add.w	r3, r7, #8
 8004564:	3304      	adds	r3, #4
 8004566:	4619      	mov	r1, r3
 8004568:	6878      	ldr	r0, [r7, #4]
 800456a:	f000 f8a7 	bl	80046bc <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi2048ELi2048EE6setNowERNS_4TimeE>
    last_sync_receive_time = hardware_.time();
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	3304      	adds	r3, #4
 8004572:	4618      	mov	r0, r3
 8004574:	f7fd fc48 	bl	8001e08 <_ZN13STM32Hardware4timeEv>
 8004578:	4602      	mov	r2, r0
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	f503 5387 	add.w	r3, r3, #4320	; 0x10e0
 8004580:	331c      	adds	r3, #28
 8004582:	601a      	str	r2, [r3, #0]
  }
 8004584:	bf00      	nop
 8004586:	3718      	adds	r7, #24
 8004588:	46bd      	mov	sp, r7
 800458a:	bd80      	pop	{r7, pc}
 800458c:	10624dd3 	.word	0x10624dd3
 8004590:	000f4240 	.word	0x000f4240

08004594 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi2048ELi2048EE7publishEiPKNS_3MsgE>:

  virtual int publish(int id, const Msg * msg)
 8004594:	b580      	push	{r7, lr}
 8004596:	b088      	sub	sp, #32
 8004598:	af00      	add	r7, sp, #0
 800459a:	60f8      	str	r0, [r7, #12]
 800459c:	60b9      	str	r1, [r7, #8]
 800459e:	607a      	str	r2, [r7, #4]
  {
    if (id >= 100 && !configured_)
 80045a0:	68bb      	ldr	r3, [r7, #8]
 80045a2:	2b63      	cmp	r3, #99	; 0x63
 80045a4:	dd0b      	ble.n	80045be <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi2048ELi2048EE7publishEiPKNS_3MsgE+0x2a>
 80045a6:	68fb      	ldr	r3, [r7, #12]
 80045a8:	f503 5387 	add.w	r3, r3, #4320	; 0x10e0
 80045ac:	3314      	adds	r3, #20
 80045ae:	781b      	ldrb	r3, [r3, #0]
 80045b0:	f083 0301 	eor.w	r3, r3, #1
 80045b4:	b2db      	uxtb	r3, r3
 80045b6:	2b00      	cmp	r3, #0
 80045b8:	d001      	beq.n	80045be <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi2048ELi2048EE7publishEiPKNS_3MsgE+0x2a>
      return 0;
 80045ba:	2300      	movs	r3, #0
 80045bc:	e077      	b.n	80046ae <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi2048ELi2048EE7publishEiPKNS_3MsgE+0x11a>

    /* serialize message */
    int l = msg->serialize(message_out + 7);
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	681b      	ldr	r3, [r3, #0]
 80045c2:	681b      	ldr	r3, [r3, #0]
 80045c4:	68fa      	ldr	r2, [r7, #12]
 80045c6:	f602 0218 	addw	r2, r2, #2072	; 0x818
 80045ca:	3207      	adds	r2, #7
 80045cc:	4611      	mov	r1, r2
 80045ce:	6878      	ldr	r0, [r7, #4]
 80045d0:	4798      	blx	r3
 80045d2:	6178      	str	r0, [r7, #20]

    /* setup the header */
    message_out[0] = 0xff;
 80045d4:	68fb      	ldr	r3, [r7, #12]
 80045d6:	22ff      	movs	r2, #255	; 0xff
 80045d8:	f883 2818 	strb.w	r2, [r3, #2072]	; 0x818
    message_out[1] = PROTOCOL_VER;
 80045dc:	68fb      	ldr	r3, [r7, #12]
 80045de:	22fe      	movs	r2, #254	; 0xfe
 80045e0:	f883 2819 	strb.w	r2, [r3, #2073]	; 0x819
    message_out[2] = (uint8_t)((uint16_t)l & 255);
 80045e4:	697b      	ldr	r3, [r7, #20]
 80045e6:	b2da      	uxtb	r2, r3
 80045e8:	68fb      	ldr	r3, [r7, #12]
 80045ea:	f883 281a 	strb.w	r2, [r3, #2074]	; 0x81a
    message_out[3] = (uint8_t)((uint16_t)l >> 8);
 80045ee:	697b      	ldr	r3, [r7, #20]
 80045f0:	b29b      	uxth	r3, r3
 80045f2:	121b      	asrs	r3, r3, #8
 80045f4:	b2da      	uxtb	r2, r3
 80045f6:	68fb      	ldr	r3, [r7, #12]
 80045f8:	f883 281b 	strb.w	r2, [r3, #2075]	; 0x81b
    message_out[4] = 255 - ((message_out[2] + message_out[3]) % 256);
 80045fc:	68fb      	ldr	r3, [r7, #12]
 80045fe:	f893 281a 	ldrb.w	r2, [r3, #2074]	; 0x81a
 8004602:	68fb      	ldr	r3, [r7, #12]
 8004604:	f893 381b 	ldrb.w	r3, [r3, #2075]	; 0x81b
 8004608:	4413      	add	r3, r2
 800460a:	b2db      	uxtb	r3, r3
 800460c:	43db      	mvns	r3, r3
 800460e:	b2da      	uxtb	r2, r3
 8004610:	68fb      	ldr	r3, [r7, #12]
 8004612:	f883 281c 	strb.w	r2, [r3, #2076]	; 0x81c
    message_out[5] = (uint8_t)((int16_t)id & 255);
 8004616:	68bb      	ldr	r3, [r7, #8]
 8004618:	b2da      	uxtb	r2, r3
 800461a:	68fb      	ldr	r3, [r7, #12]
 800461c:	f883 281d 	strb.w	r2, [r3, #2077]	; 0x81d
    message_out[6] = (uint8_t)((int16_t)id >> 8);
 8004620:	68bb      	ldr	r3, [r7, #8]
 8004622:	b21b      	sxth	r3, r3
 8004624:	121b      	asrs	r3, r3, #8
 8004626:	b2da      	uxtb	r2, r3
 8004628:	68fb      	ldr	r3, [r7, #12]
 800462a:	f883 281e 	strb.w	r2, [r3, #2078]	; 0x81e

    /* calculate checksum */
    int chk = 0;
 800462e:	2300      	movs	r3, #0
 8004630:	61fb      	str	r3, [r7, #28]
    for (int i = 5; i < l + 7; i++)
 8004632:	2305      	movs	r3, #5
 8004634:	61bb      	str	r3, [r7, #24]
 8004636:	697b      	ldr	r3, [r7, #20]
 8004638:	3306      	adds	r3, #6
 800463a:	69ba      	ldr	r2, [r7, #24]
 800463c:	429a      	cmp	r2, r3
 800463e:	dc0d      	bgt.n	800465c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi2048ELi2048EE7publishEiPKNS_3MsgE+0xc8>
      chk += message_out[i];
 8004640:	68fa      	ldr	r2, [r7, #12]
 8004642:	69bb      	ldr	r3, [r7, #24]
 8004644:	4413      	add	r3, r2
 8004646:	f603 0318 	addw	r3, r3, #2072	; 0x818
 800464a:	781b      	ldrb	r3, [r3, #0]
 800464c:	461a      	mov	r2, r3
 800464e:	69fb      	ldr	r3, [r7, #28]
 8004650:	4413      	add	r3, r2
 8004652:	61fb      	str	r3, [r7, #28]
    for (int i = 5; i < l + 7; i++)
 8004654:	69bb      	ldr	r3, [r7, #24]
 8004656:	3301      	adds	r3, #1
 8004658:	61bb      	str	r3, [r7, #24]
 800465a:	e7ec      	b.n	8004636 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi2048ELi2048EE7publishEiPKNS_3MsgE+0xa2>
    l += 7;
 800465c:	697b      	ldr	r3, [r7, #20]
 800465e:	3307      	adds	r3, #7
 8004660:	617b      	str	r3, [r7, #20]
    message_out[l++] = 255 - (chk % 256);
 8004662:	69fb      	ldr	r3, [r7, #28]
 8004664:	425a      	negs	r2, r3
 8004666:	b2db      	uxtb	r3, r3
 8004668:	b2d2      	uxtb	r2, r2
 800466a:	bf58      	it	pl
 800466c:	4253      	negpl	r3, r2
 800466e:	b2da      	uxtb	r2, r3
 8004670:	697b      	ldr	r3, [r7, #20]
 8004672:	1c59      	adds	r1, r3, #1
 8004674:	6179      	str	r1, [r7, #20]
 8004676:	43d2      	mvns	r2, r2
 8004678:	b2d1      	uxtb	r1, r2
 800467a:	68fa      	ldr	r2, [r7, #12]
 800467c:	4413      	add	r3, r2
 800467e:	460a      	mov	r2, r1
 8004680:	f883 2818 	strb.w	r2, [r3, #2072]	; 0x818

    if (l <= OUTPUT_SIZE)
 8004684:	697b      	ldr	r3, [r7, #20]
 8004686:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800468a:	dc0a      	bgt.n	80046a2 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi2048ELi2048EE7publishEiPKNS_3MsgE+0x10e>
    {
      hardware_.write(message_out, l);
 800468c:	68fb      	ldr	r3, [r7, #12]
 800468e:	1d18      	adds	r0, r3, #4
 8004690:	68fb      	ldr	r3, [r7, #12]
 8004692:	f603 0318 	addw	r3, r3, #2072	; 0x818
 8004696:	697a      	ldr	r2, [r7, #20]
 8004698:	4619      	mov	r1, r3
 800469a:	f7fd fba4 	bl	8001de6 <_ZN13STM32Hardware5writeEPhi>
      return l;
 800469e:	697b      	ldr	r3, [r7, #20]
 80046a0:	e005      	b.n	80046ae <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi2048ELi2048EE7publishEiPKNS_3MsgE+0x11a>
    }
    else
    {
      logerror("Message from device dropped: message larger than buffer.");
 80046a2:	4905      	ldr	r1, [pc, #20]	; (80046b8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi2048ELi2048EE7publishEiPKNS_3MsgE+0x124>)
 80046a4:	68f8      	ldr	r0, [r7, #12]
 80046a6:	f000 f83d 	bl	8004724 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi2048ELi2048EE8logerrorEPKc>
      return -1;
 80046aa:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    }
  }
 80046ae:	4618      	mov	r0, r3
 80046b0:	3720      	adds	r7, #32
 80046b2:	46bd      	mov	sp, r7
 80046b4:	bd80      	pop	{r7, pc}
 80046b6:	bf00      	nop
 80046b8:	08009100 	.word	0x08009100

080046bc <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi2048ELi2048EE6setNowERNS_4TimeE>:
  void setNow(Time & new_now)
 80046bc:	b580      	push	{r7, lr}
 80046be:	b084      	sub	sp, #16
 80046c0:	af00      	add	r7, sp, #0
 80046c2:	6078      	str	r0, [r7, #4]
 80046c4:	6039      	str	r1, [r7, #0]
    uint32_t ms = hardware_.time();
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	3304      	adds	r3, #4
 80046ca:	4618      	mov	r0, r3
 80046cc:	f7fd fb9c 	bl	8001e08 <_ZN13STM32Hardware4timeEv>
 80046d0:	60f8      	str	r0, [r7, #12]
    sec_offset = new_now.sec - ms / 1000 - 1;
 80046d2:	683b      	ldr	r3, [r7, #0]
 80046d4:	681a      	ldr	r2, [r3, #0]
 80046d6:	68fb      	ldr	r3, [r7, #12]
 80046d8:	490f      	ldr	r1, [pc, #60]	; (8004718 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi2048ELi2048EE6setNowERNS_4TimeE+0x5c>)
 80046da:	fba1 1303 	umull	r1, r3, r1, r3
 80046de:	099b      	lsrs	r3, r3, #6
 80046e0:	1ad3      	subs	r3, r2, r3
 80046e2:	1e5a      	subs	r2, r3, #1
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	60da      	str	r2, [r3, #12]
    nsec_offset = new_now.nsec - (ms % 1000) * 1000000UL + 1000000000UL;
 80046e8:	683b      	ldr	r3, [r7, #0]
 80046ea:	6859      	ldr	r1, [r3, #4]
 80046ec:	68fa      	ldr	r2, [r7, #12]
 80046ee:	4b0a      	ldr	r3, [pc, #40]	; (8004718 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi2048ELi2048EE6setNowERNS_4TimeE+0x5c>)
 80046f0:	fba3 0302 	umull	r0, r3, r3, r2
 80046f4:	099b      	lsrs	r3, r3, #6
 80046f6:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80046fa:	fb00 f303 	mul.w	r3, r0, r3
 80046fe:	1ad3      	subs	r3, r2, r3
 8004700:	4a06      	ldr	r2, [pc, #24]	; (800471c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi2048ELi2048EE6setNowERNS_4TimeE+0x60>)
 8004702:	fb02 f303 	mul.w	r3, r2, r3
 8004706:	1aca      	subs	r2, r1, r3
 8004708:	4b05      	ldr	r3, [pc, #20]	; (8004720 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi2048ELi2048EE6setNowERNS_4TimeE+0x64>)
 800470a:	4413      	add	r3, r2
 800470c:	687a      	ldr	r2, [r7, #4]
 800470e:	6113      	str	r3, [r2, #16]
  }
 8004710:	bf00      	nop
 8004712:	3710      	adds	r7, #16
 8004714:	46bd      	mov	sp, r7
 8004716:	bd80      	pop	{r7, pc}
 8004718:	10624dd3 	.word	0x10624dd3
 800471c:	000f4240 	.word	0x000f4240
 8004720:	3b9aca00 	.word	0x3b9aca00

08004724 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi2048ELi2048EE8logerrorEPKc>:
  }
  void logwarn(const char *msg)
  {
    log(rosserial_msgs::Log::WARN, msg);
  }
  void logerror(const char*msg)
 8004724:	b580      	push	{r7, lr}
 8004726:	b082      	sub	sp, #8
 8004728:	af00      	add	r7, sp, #0
 800472a:	6078      	str	r0, [r7, #4]
 800472c:	6039      	str	r1, [r7, #0]
  {
    log(rosserial_msgs::Log::ERROR, msg);
 800472e:	683a      	ldr	r2, [r7, #0]
 8004730:	2103      	movs	r1, #3
 8004732:	6878      	ldr	r0, [r7, #4]
 8004734:	f000 f804 	bl	8004740 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi2048ELi2048EE3logEcPKc>
  }
 8004738:	bf00      	nop
 800473a:	3708      	adds	r7, #8
 800473c:	46bd      	mov	sp, r7
 800473e:	bd80      	pop	{r7, pc}

08004740 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi2048ELi2048EE3logEcPKc>:
  void log(char byte, const char * msg)
 8004740:	b580      	push	{r7, lr}
 8004742:	b088      	sub	sp, #32
 8004744:	af00      	add	r7, sp, #0
 8004746:	60f8      	str	r0, [r7, #12]
 8004748:	460b      	mov	r3, r1
 800474a:	607a      	str	r2, [r7, #4]
 800474c:	72fb      	strb	r3, [r7, #11]
    rosserial_msgs::Log l;
 800474e:	f107 0314 	add.w	r3, r7, #20
 8004752:	4618      	mov	r0, r3
 8004754:	f7fc fe64 	bl	8001420 <_ZN14rosserial_msgs3LogC1Ev>
    l.level = byte;
 8004758:	7afb      	ldrb	r3, [r7, #11]
 800475a:	763b      	strb	r3, [r7, #24]
    l.msg = (char*)msg;
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	61fb      	str	r3, [r7, #28]
    publish(rosserial_msgs::TopicInfo::ID_LOG, &l);
 8004760:	68fb      	ldr	r3, [r7, #12]
 8004762:	681b      	ldr	r3, [r3, #0]
 8004764:	681b      	ldr	r3, [r3, #0]
 8004766:	f107 0214 	add.w	r2, r7, #20
 800476a:	2107      	movs	r1, #7
 800476c:	68f8      	ldr	r0, [r7, #12]
 800476e:	4798      	blx	r3
  }
 8004770:	bf00      	nop
 8004772:	3720      	adds	r7, #32
 8004774:	46bd      	mov	sp, r7
 8004776:	bd80      	pop	{r7, pc}

08004778 <_Z41__static_initialization_and_destruction_0ii>:
 8004778:	b580      	push	{r7, lr}
 800477a:	b082      	sub	sp, #8
 800477c:	af00      	add	r7, sp, #0
 800477e:	6078      	str	r0, [r7, #4]
 8004780:	6039      	str	r1, [r7, #0]
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	2b01      	cmp	r3, #1
 8004786:	d132      	bne.n	80047ee <_Z41__static_initialization_and_destruction_0ii+0x76>
 8004788:	683b      	ldr	r3, [r7, #0]
 800478a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800478e:	4293      	cmp	r3, r2
 8004790:	d12d      	bne.n	80047ee <_Z41__static_initialization_and_destruction_0ii+0x76>
SerialClass serial(huart1);
 8004792:	4919      	ldr	r1, [pc, #100]	; (80047f8 <_Z41__static_initialization_and_destruction_0ii+0x80>)
 8004794:	4819      	ldr	r0, [pc, #100]	; (80047fc <_Z41__static_initialization_and_destruction_0ii+0x84>)
 8004796:	f7fd f9ce 	bl	8001b36 <_ZN11SerialClassC1ER20__UART_HandleTypeDef>
ros::NodeHandle nh;
 800479a:	4819      	ldr	r0, [pc, #100]	; (8004800 <_Z41__static_initialization_and_destruction_0ii+0x88>)
 800479c:	f7ff f9d6 	bl	8003b4c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi2048ELi2048EEC1Ev>
std_msgs::String str_msg;
 80047a0:	4818      	ldr	r0, [pc, #96]	; (8004804 <_Z41__static_initialization_and_destruction_0ii+0x8c>)
 80047a2:	f7fd fb3d 	bl	8001e20 <_ZN8std_msgs6StringC1Ev>
std_msgs::Int32 int_msg;
 80047a6:	4818      	ldr	r0, [pc, #96]	; (8004808 <_Z41__static_initialization_and_destruction_0ii+0x90>)
 80047a8:	f7fd fc68 	bl	800207c <_ZN8std_msgs5Int32C1Ev>
std_msgs::Float32 flt_msg;
 80047ac:	4817      	ldr	r0, [pc, #92]	; (800480c <_Z41__static_initialization_and_destruction_0ii+0x94>)
 80047ae:	f7fd fbcf 	bl	8001f50 <_ZN8std_msgs7Float32C1Ev>
ros::Publisher chatter("chatter", &str_msg);
 80047b2:	2300      	movs	r3, #0
 80047b4:	4a13      	ldr	r2, [pc, #76]	; (8004804 <_Z41__static_initialization_and_destruction_0ii+0x8c>)
 80047b6:	4916      	ldr	r1, [pc, #88]	; (8004810 <_Z41__static_initialization_and_destruction_0ii+0x98>)
 80047b8:	4816      	ldr	r0, [pc, #88]	; (8004814 <_Z41__static_initialization_and_destruction_0ii+0x9c>)
 80047ba:	f7fd f99b 	bl	8001af4 <_ZN3ros9PublisherC1EPKcPNS_3MsgEi>
ros::Publisher servoTelemetry("serv_tele", &int_msg);
 80047be:	2300      	movs	r3, #0
 80047c0:	4a11      	ldr	r2, [pc, #68]	; (8004808 <_Z41__static_initialization_and_destruction_0ii+0x90>)
 80047c2:	4915      	ldr	r1, [pc, #84]	; (8004818 <_Z41__static_initialization_and_destruction_0ii+0xa0>)
 80047c4:	4815      	ldr	r0, [pc, #84]	; (800481c <_Z41__static_initialization_and_destruction_0ii+0xa4>)
 80047c6:	f7fd f995 	bl	8001af4 <_ZN3ros9PublisherC1EPKcPNS_3MsgEi>
ros::Publisher translatorTelemetry("angle_tele", &flt_msg);
 80047ca:	2300      	movs	r3, #0
 80047cc:	4a0f      	ldr	r2, [pc, #60]	; (800480c <_Z41__static_initialization_and_destruction_0ii+0x94>)
 80047ce:	4914      	ldr	r1, [pc, #80]	; (8004820 <_Z41__static_initialization_and_destruction_0ii+0xa8>)
 80047d0:	4814      	ldr	r0, [pc, #80]	; (8004824 <_Z41__static_initialization_and_destruction_0ii+0xac>)
 80047d2:	f7fd f98f 	bl	8001af4 <_ZN3ros9PublisherC1EPKcPNS_3MsgEi>
ros::Subscriber<std_msgs::Float32> sub("led", dbg_cb);
 80047d6:	2301      	movs	r3, #1
 80047d8:	4a13      	ldr	r2, [pc, #76]	; (8004828 <_Z41__static_initialization_and_destruction_0ii+0xb0>)
 80047da:	4914      	ldr	r1, [pc, #80]	; (800482c <_Z41__static_initialization_and_destruction_0ii+0xb4>)
 80047dc:	4814      	ldr	r0, [pc, #80]	; (8004830 <_Z41__static_initialization_and_destruction_0ii+0xb8>)
 80047de:	f7ff fa51 	bl	8003c84 <_ZN3ros10SubscriberIN8std_msgs7Float32EvEC1EPKcPFvRKS2_Ei>
ros::Subscriber<sensor_msgs::JointState> joint("/move_group/fake_controller_joint_states", move_axis);
 80047e2:	2301      	movs	r3, #1
 80047e4:	4a13      	ldr	r2, [pc, #76]	; (8004834 <_Z41__static_initialization_and_destruction_0ii+0xbc>)
 80047e6:	4914      	ldr	r1, [pc, #80]	; (8004838 <_Z41__static_initialization_and_destruction_0ii+0xc0>)
 80047e8:	4814      	ldr	r0, [pc, #80]	; (800483c <_Z41__static_initialization_and_destruction_0ii+0xc4>)
 80047ea:	f7ff fa6f 	bl	8003ccc <_ZN3ros10SubscriberIN11sensor_msgs10JointStateEvEC1EPKcPFvRKS2_Ei>
}
 80047ee:	bf00      	nop
 80047f0:	3708      	adds	r7, #8
 80047f2:	46bd      	mov	sp, r7
 80047f4:	bd80      	pop	{r7, pc}
 80047f6:	bf00      	nop
 80047f8:	200010ec 	.word	0x200010ec
 80047fc:	20000094 	.word	0x20000094
 8004800:	200011b4 	.word	0x200011b4
 8004804:	200022e4 	.word	0x200022e4
 8004808:	200022ec 	.word	0x200022ec
 800480c:	200022f4 	.word	0x200022f4
 8004810:	0800913c 	.word	0x0800913c
 8004814:	200022fc 	.word	0x200022fc
 8004818:	08009144 	.word	0x08009144
 800481c:	20002310 	.word	0x20002310
 8004820:	08009150 	.word	0x08009150
 8004824:	20002324 	.word	0x20002324
 8004828:	08003421 	.word	0x08003421
 800482c:	0800915c 	.word	0x0800915c
 8004830:	20002338 	.word	0x20002338
 8004834:	080034b9 	.word	0x080034b9
 8004838:	08009160 	.word	0x08009160
 800483c:	20002358 	.word	0x20002358

08004840 <_ZN3ros10SubscriberIN11sensor_msgs10JointStateEvE8callbackEPh>:

  virtual void callback(unsigned char* data)
 8004840:	b580      	push	{r7, lr}
 8004842:	b082      	sub	sp, #8
 8004844:	af00      	add	r7, sp, #0
 8004846:	6078      	str	r0, [r7, #4]
 8004848:	6039      	str	r1, [r7, #0]
  {
    msg.deserialize(data);
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	3310      	adds	r3, #16
 800484e:	6839      	ldr	r1, [r7, #0]
 8004850:	4618      	mov	r0, r3
 8004852:	f7fe f8d7 	bl	8002a04 <_ZN11sensor_msgs10JointState11deserializeEPh>
    this->cb_(msg);
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800485a:	687a      	ldr	r2, [r7, #4]
 800485c:	3210      	adds	r2, #16
 800485e:	4610      	mov	r0, r2
 8004860:	4798      	blx	r3
  }
 8004862:	bf00      	nop
 8004864:	3708      	adds	r7, #8
 8004866:	46bd      	mov	sp, r7
 8004868:	bd80      	pop	{r7, pc}

0800486a <_ZN3ros10SubscriberIN11sensor_msgs10JointStateEvE15getEndpointTypeEv>:
  }
  virtual const char * getMsgMD5()
  {
    return this->msg.getMD5();
  }
  virtual int getEndpointType()
 800486a:	b480      	push	{r7}
 800486c:	b083      	sub	sp, #12
 800486e:	af00      	add	r7, sp, #0
 8004870:	6078      	str	r0, [r7, #4]
  {
    return endpoint_;
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	6edb      	ldr	r3, [r3, #108]	; 0x6c
  }
 8004876:	4618      	mov	r0, r3
 8004878:	370c      	adds	r7, #12
 800487a:	46bd      	mov	sp, r7
 800487c:	bc80      	pop	{r7}
 800487e:	4770      	bx	lr

08004880 <_ZN3ros10SubscriberIN11sensor_msgs10JointStateEvE10getMsgTypeEv>:
  virtual const char * getMsgType()
 8004880:	b580      	push	{r7, lr}
 8004882:	b082      	sub	sp, #8
 8004884:	af00      	add	r7, sp, #0
 8004886:	6078      	str	r0, [r7, #4]
    return this->msg.getType();
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	3310      	adds	r3, #16
 800488c:	4618      	mov	r0, r3
 800488e:	f7fe fdaf 	bl	80033f0 <_ZN11sensor_msgs10JointState7getTypeEv>
 8004892:	4603      	mov	r3, r0
  }
 8004894:	4618      	mov	r0, r3
 8004896:	3708      	adds	r7, #8
 8004898:	46bd      	mov	sp, r7
 800489a:	bd80      	pop	{r7, pc}

0800489c <_ZN3ros10SubscriberIN11sensor_msgs10JointStateEvE9getMsgMD5Ev>:
  virtual const char * getMsgMD5()
 800489c:	b580      	push	{r7, lr}
 800489e:	b082      	sub	sp, #8
 80048a0:	af00      	add	r7, sp, #0
 80048a2:	6078      	str	r0, [r7, #4]
    return this->msg.getMD5();
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	3310      	adds	r3, #16
 80048a8:	4618      	mov	r0, r3
 80048aa:	f7fe fdad 	bl	8003408 <_ZN11sensor_msgs10JointState6getMD5Ev>
 80048ae:	4603      	mov	r3, r0
  }
 80048b0:	4618      	mov	r0, r3
 80048b2:	3708      	adds	r7, #8
 80048b4:	46bd      	mov	sp, r7
 80048b6:	bd80      	pop	{r7, pc}

080048b8 <_ZN3ros10SubscriberIN8std_msgs7Float32EvE8callbackEPh>:
  virtual void callback(unsigned char* data)
 80048b8:	b580      	push	{r7, lr}
 80048ba:	b082      	sub	sp, #8
 80048bc:	af00      	add	r7, sp, #0
 80048be:	6078      	str	r0, [r7, #4]
 80048c0:	6039      	str	r1, [r7, #0]
    msg.deserialize(data);
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	330c      	adds	r3, #12
 80048c6:	6839      	ldr	r1, [r7, #0]
 80048c8:	4618      	mov	r0, r3
 80048ca:	f7fd fb88 	bl	8001fde <_ZN8std_msgs7Float3211deserializeEPh>
    this->cb_(msg);
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	695b      	ldr	r3, [r3, #20]
 80048d2:	687a      	ldr	r2, [r7, #4]
 80048d4:	320c      	adds	r2, #12
 80048d6:	4610      	mov	r0, r2
 80048d8:	4798      	blx	r3
  }
 80048da:	bf00      	nop
 80048dc:	3708      	adds	r7, #8
 80048de:	46bd      	mov	sp, r7
 80048e0:	bd80      	pop	{r7, pc}

080048e2 <_ZN3ros10SubscriberIN8std_msgs7Float32EvE15getEndpointTypeEv>:
  virtual int getEndpointType()
 80048e2:	b480      	push	{r7}
 80048e4:	b083      	sub	sp, #12
 80048e6:	af00      	add	r7, sp, #0
 80048e8:	6078      	str	r0, [r7, #4]
    return endpoint_;
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	699b      	ldr	r3, [r3, #24]
  }
 80048ee:	4618      	mov	r0, r3
 80048f0:	370c      	adds	r7, #12
 80048f2:	46bd      	mov	sp, r7
 80048f4:	bc80      	pop	{r7}
 80048f6:	4770      	bx	lr

080048f8 <_ZN3ros10SubscriberIN8std_msgs7Float32EvE10getMsgTypeEv>:
  virtual const char * getMsgType()
 80048f8:	b580      	push	{r7, lr}
 80048fa:	b082      	sub	sp, #8
 80048fc:	af00      	add	r7, sp, #0
 80048fe:	6078      	str	r0, [r7, #4]
    return this->msg.getType();
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	330c      	adds	r3, #12
 8004904:	4618      	mov	r0, r3
 8004906:	f7fd fba1 	bl	800204c <_ZN8std_msgs7Float327getTypeEv>
 800490a:	4603      	mov	r3, r0
  }
 800490c:	4618      	mov	r0, r3
 800490e:	3708      	adds	r7, #8
 8004910:	46bd      	mov	sp, r7
 8004912:	bd80      	pop	{r7, pc}

08004914 <_ZN3ros10SubscriberIN8std_msgs7Float32EvE9getMsgMD5Ev>:
  virtual const char * getMsgMD5()
 8004914:	b580      	push	{r7, lr}
 8004916:	b082      	sub	sp, #8
 8004918:	af00      	add	r7, sp, #0
 800491a:	6078      	str	r0, [r7, #4]
    return this->msg.getMD5();
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	330c      	adds	r3, #12
 8004920:	4618      	mov	r0, r3
 8004922:	f7fd fb9f 	bl	8002064 <_ZN8std_msgs7Float326getMD5Ev>
 8004926:	4603      	mov	r3, r0
  }
 8004928:	4618      	mov	r0, r3
 800492a:	3708      	adds	r7, #8
 800492c:	46bd      	mov	sp, r7
 800492e:	bd80      	pop	{r7, pc}

08004930 <_GLOBAL__sub_I_serial>:
 8004930:	b580      	push	{r7, lr}
 8004932:	af00      	add	r7, sp, #0
 8004934:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8004938:	2001      	movs	r0, #1
 800493a:	f7ff ff1d 	bl	8004778 <_Z41__static_initialization_and_destruction_0ii>
 800493e:	bd80      	pop	{r7, pc}

08004940 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8004940:	b480      	push	{r7}
 8004942:	b085      	sub	sp, #20
 8004944:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8004946:	4b15      	ldr	r3, [pc, #84]	; (800499c <HAL_MspInit+0x5c>)
 8004948:	699b      	ldr	r3, [r3, #24]
 800494a:	4a14      	ldr	r2, [pc, #80]	; (800499c <HAL_MspInit+0x5c>)
 800494c:	f043 0301 	orr.w	r3, r3, #1
 8004950:	6193      	str	r3, [r2, #24]
 8004952:	4b12      	ldr	r3, [pc, #72]	; (800499c <HAL_MspInit+0x5c>)
 8004954:	699b      	ldr	r3, [r3, #24]
 8004956:	f003 0301 	and.w	r3, r3, #1
 800495a:	60bb      	str	r3, [r7, #8]
 800495c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800495e:	4b0f      	ldr	r3, [pc, #60]	; (800499c <HAL_MspInit+0x5c>)
 8004960:	69db      	ldr	r3, [r3, #28]
 8004962:	4a0e      	ldr	r2, [pc, #56]	; (800499c <HAL_MspInit+0x5c>)
 8004964:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004968:	61d3      	str	r3, [r2, #28]
 800496a:	4b0c      	ldr	r3, [pc, #48]	; (800499c <HAL_MspInit+0x5c>)
 800496c:	69db      	ldr	r3, [r3, #28]
 800496e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004972:	607b      	str	r3, [r7, #4]
 8004974:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8004976:	4b0a      	ldr	r3, [pc, #40]	; (80049a0 <HAL_MspInit+0x60>)
 8004978:	685b      	ldr	r3, [r3, #4]
 800497a:	60fb      	str	r3, [r7, #12]
 800497c:	68fb      	ldr	r3, [r7, #12]
 800497e:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8004982:	60fb      	str	r3, [r7, #12]
 8004984:	68fb      	ldr	r3, [r7, #12]
 8004986:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800498a:	60fb      	str	r3, [r7, #12]
 800498c:	4a04      	ldr	r2, [pc, #16]	; (80049a0 <HAL_MspInit+0x60>)
 800498e:	68fb      	ldr	r3, [r7, #12]
 8004990:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8004992:	bf00      	nop
 8004994:	3714      	adds	r7, #20
 8004996:	46bd      	mov	sp, r7
 8004998:	bc80      	pop	{r7}
 800499a:	4770      	bx	lr
 800499c:	40021000 	.word	0x40021000
 80049a0:	40010000 	.word	0x40010000

080049a4 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80049a4:	b580      	push	{r7, lr}
 80049a6:	b088      	sub	sp, #32
 80049a8:	af00      	add	r7, sp, #0
 80049aa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80049ac:	f107 0310 	add.w	r3, r7, #16
 80049b0:	2200      	movs	r2, #0
 80049b2:	601a      	str	r2, [r3, #0]
 80049b4:	605a      	str	r2, [r3, #4]
 80049b6:	609a      	str	r2, [r3, #8]
 80049b8:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	681b      	ldr	r3, [r3, #0]
 80049be:	4a14      	ldr	r2, [pc, #80]	; (8004a10 <HAL_ADC_MspInit+0x6c>)
 80049c0:	4293      	cmp	r3, r2
 80049c2:	d121      	bne.n	8004a08 <HAL_ADC_MspInit+0x64>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80049c4:	4b13      	ldr	r3, [pc, #76]	; (8004a14 <HAL_ADC_MspInit+0x70>)
 80049c6:	699b      	ldr	r3, [r3, #24]
 80049c8:	4a12      	ldr	r2, [pc, #72]	; (8004a14 <HAL_ADC_MspInit+0x70>)
 80049ca:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80049ce:	6193      	str	r3, [r2, #24]
 80049d0:	4b10      	ldr	r3, [pc, #64]	; (8004a14 <HAL_ADC_MspInit+0x70>)
 80049d2:	699b      	ldr	r3, [r3, #24]
 80049d4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80049d8:	60fb      	str	r3, [r7, #12]
 80049da:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80049dc:	4b0d      	ldr	r3, [pc, #52]	; (8004a14 <HAL_ADC_MspInit+0x70>)
 80049de:	699b      	ldr	r3, [r3, #24]
 80049e0:	4a0c      	ldr	r2, [pc, #48]	; (8004a14 <HAL_ADC_MspInit+0x70>)
 80049e2:	f043 0304 	orr.w	r3, r3, #4
 80049e6:	6193      	str	r3, [r2, #24]
 80049e8:	4b0a      	ldr	r3, [pc, #40]	; (8004a14 <HAL_ADC_MspInit+0x70>)
 80049ea:	699b      	ldr	r3, [r3, #24]
 80049ec:	f003 0304 	and.w	r3, r3, #4
 80049f0:	60bb      	str	r3, [r7, #8]
 80049f2:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA6     ------> ADC1_IN6
    PA7     ------> ADC1_IN7
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80049f4:	23c0      	movs	r3, #192	; 0xc0
 80049f6:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80049f8:	2303      	movs	r3, #3
 80049fa:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80049fc:	f107 0310 	add.w	r3, r7, #16
 8004a00:	4619      	mov	r1, r3
 8004a02:	4805      	ldr	r0, [pc, #20]	; (8004a18 <HAL_ADC_MspInit+0x74>)
 8004a04:	f001 fa60 	bl	8005ec8 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8004a08:	bf00      	nop
 8004a0a:	3720      	adds	r7, #32
 8004a0c:	46bd      	mov	sp, r7
 8004a0e:	bd80      	pop	{r7, pc}
 8004a10:	40012400 	.word	0x40012400
 8004a14:	40021000 	.word	0x40021000
 8004a18:	40010800 	.word	0x40010800

08004a1c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8004a1c:	b580      	push	{r7, lr}
 8004a1e:	b084      	sub	sp, #16
 8004a20:	af00      	add	r7, sp, #0
 8004a22:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	681b      	ldr	r3, [r3, #0]
 8004a28:	4a0d      	ldr	r2, [pc, #52]	; (8004a60 <HAL_TIM_Base_MspInit+0x44>)
 8004a2a:	4293      	cmp	r3, r2
 8004a2c:	d113      	bne.n	8004a56 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8004a2e:	4b0d      	ldr	r3, [pc, #52]	; (8004a64 <HAL_TIM_Base_MspInit+0x48>)
 8004a30:	699b      	ldr	r3, [r3, #24]
 8004a32:	4a0c      	ldr	r2, [pc, #48]	; (8004a64 <HAL_TIM_Base_MspInit+0x48>)
 8004a34:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8004a38:	6193      	str	r3, [r2, #24]
 8004a3a:	4b0a      	ldr	r3, [pc, #40]	; (8004a64 <HAL_TIM_Base_MspInit+0x48>)
 8004a3c:	699b      	ldr	r3, [r3, #24]
 8004a3e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004a42:	60fb      	str	r3, [r7, #12]
 8004a44:	68fb      	ldr	r3, [r7, #12]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_TRG_COM_IRQn, 0, 0);
 8004a46:	2200      	movs	r2, #0
 8004a48:	2100      	movs	r1, #0
 8004a4a:	201a      	movs	r0, #26
 8004a4c:	f000 ffa1 	bl	8005992 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_IRQn);
 8004a50:	201a      	movs	r0, #26
 8004a52:	f000 ffba 	bl	80059ca <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8004a56:	bf00      	nop
 8004a58:	3710      	adds	r7, #16
 8004a5a:	46bd      	mov	sp, r7
 8004a5c:	bd80      	pop	{r7, pc}
 8004a5e:	bf00      	nop
 8004a60:	40012c00 	.word	0x40012c00
 8004a64:	40021000 	.word	0x40021000

08004a68 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8004a68:	b580      	push	{r7, lr}
 8004a6a:	b088      	sub	sp, #32
 8004a6c:	af00      	add	r7, sp, #0
 8004a6e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004a70:	f107 0310 	add.w	r3, r7, #16
 8004a74:	2200      	movs	r2, #0
 8004a76:	601a      	str	r2, [r3, #0]
 8004a78:	605a      	str	r2, [r3, #4]
 8004a7a:	609a      	str	r2, [r3, #8]
 8004a7c:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	681b      	ldr	r3, [r3, #0]
 8004a82:	4a4d      	ldr	r2, [pc, #308]	; (8004bb8 <HAL_UART_MspInit+0x150>)
 8004a84:	4293      	cmp	r3, r2
 8004a86:	f040 8092 	bne.w	8004bae <HAL_UART_MspInit+0x146>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8004a8a:	4b4c      	ldr	r3, [pc, #304]	; (8004bbc <HAL_UART_MspInit+0x154>)
 8004a8c:	699b      	ldr	r3, [r3, #24]
 8004a8e:	4a4b      	ldr	r2, [pc, #300]	; (8004bbc <HAL_UART_MspInit+0x154>)
 8004a90:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004a94:	6193      	str	r3, [r2, #24]
 8004a96:	4b49      	ldr	r3, [pc, #292]	; (8004bbc <HAL_UART_MspInit+0x154>)
 8004a98:	699b      	ldr	r3, [r3, #24]
 8004a9a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004a9e:	60fb      	str	r3, [r7, #12]
 8004aa0:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004aa2:	4b46      	ldr	r3, [pc, #280]	; (8004bbc <HAL_UART_MspInit+0x154>)
 8004aa4:	699b      	ldr	r3, [r3, #24]
 8004aa6:	4a45      	ldr	r2, [pc, #276]	; (8004bbc <HAL_UART_MspInit+0x154>)
 8004aa8:	f043 0304 	orr.w	r3, r3, #4
 8004aac:	6193      	str	r3, [r2, #24]
 8004aae:	4b43      	ldr	r3, [pc, #268]	; (8004bbc <HAL_UART_MspInit+0x154>)
 8004ab0:	699b      	ldr	r3, [r3, #24]
 8004ab2:	f003 0304 	and.w	r3, r3, #4
 8004ab6:	60bb      	str	r3, [r7, #8]
 8004ab8:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8004aba:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004abe:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004ac0:	2302      	movs	r3, #2
 8004ac2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8004ac4:	2303      	movs	r3, #3
 8004ac6:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004ac8:	f107 0310 	add.w	r3, r7, #16
 8004acc:	4619      	mov	r1, r3
 8004ace:	483c      	ldr	r0, [pc, #240]	; (8004bc0 <HAL_UART_MspInit+0x158>)
 8004ad0:	f001 f9fa 	bl	8005ec8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8004ad4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004ad8:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8004ada:	2300      	movs	r3, #0
 8004adc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004ade:	2300      	movs	r3, #0
 8004ae0:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004ae2:	f107 0310 	add.w	r3, r7, #16
 8004ae6:	4619      	mov	r1, r3
 8004ae8:	4835      	ldr	r0, [pc, #212]	; (8004bc0 <HAL_UART_MspInit+0x158>)
 8004aea:	f001 f9ed 	bl	8005ec8 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA1_Channel5;
 8004aee:	4b35      	ldr	r3, [pc, #212]	; (8004bc4 <HAL_UART_MspInit+0x15c>)
 8004af0:	4a35      	ldr	r2, [pc, #212]	; (8004bc8 <HAL_UART_MspInit+0x160>)
 8004af2:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8004af4:	4b33      	ldr	r3, [pc, #204]	; (8004bc4 <HAL_UART_MspInit+0x15c>)
 8004af6:	2200      	movs	r2, #0
 8004af8:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8004afa:	4b32      	ldr	r3, [pc, #200]	; (8004bc4 <HAL_UART_MspInit+0x15c>)
 8004afc:	2200      	movs	r2, #0
 8004afe:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8004b00:	4b30      	ldr	r3, [pc, #192]	; (8004bc4 <HAL_UART_MspInit+0x15c>)
 8004b02:	2280      	movs	r2, #128	; 0x80
 8004b04:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8004b06:	4b2f      	ldr	r3, [pc, #188]	; (8004bc4 <HAL_UART_MspInit+0x15c>)
 8004b08:	2200      	movs	r2, #0
 8004b0a:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8004b0c:	4b2d      	ldr	r3, [pc, #180]	; (8004bc4 <HAL_UART_MspInit+0x15c>)
 8004b0e:	2200      	movs	r2, #0
 8004b10:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.Mode = DMA_NORMAL;
 8004b12:	4b2c      	ldr	r3, [pc, #176]	; (8004bc4 <HAL_UART_MspInit+0x15c>)
 8004b14:	2200      	movs	r2, #0
 8004b16:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_HIGH;
 8004b18:	4b2a      	ldr	r3, [pc, #168]	; (8004bc4 <HAL_UART_MspInit+0x15c>)
 8004b1a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8004b1e:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8004b20:	4828      	ldr	r0, [pc, #160]	; (8004bc4 <HAL_UART_MspInit+0x15c>)
 8004b22:	f000 ff6d 	bl	8005a00 <HAL_DMA_Init>
 8004b26:	4603      	mov	r3, r0
 8004b28:	2b00      	cmp	r3, #0
 8004b2a:	bf14      	ite	ne
 8004b2c:	2301      	movne	r3, #1
 8004b2e:	2300      	moveq	r3, #0
 8004b30:	b2db      	uxtb	r3, r3
 8004b32:	2b00      	cmp	r3, #0
 8004b34:	d001      	beq.n	8004b3a <HAL_UART_MspInit+0xd2>
    {
      Error_Handler();
 8004b36:	f7fe ffa5 	bl	8003a84 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	4a21      	ldr	r2, [pc, #132]	; (8004bc4 <HAL_UART_MspInit+0x15c>)
 8004b3e:	635a      	str	r2, [r3, #52]	; 0x34
 8004b40:	4a20      	ldr	r2, [pc, #128]	; (8004bc4 <HAL_UART_MspInit+0x15c>)
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	6253      	str	r3, [r2, #36]	; 0x24

    /* USART1_TX Init */
    hdma_usart1_tx.Instance = DMA1_Channel4;
 8004b46:	4b21      	ldr	r3, [pc, #132]	; (8004bcc <HAL_UART_MspInit+0x164>)
 8004b48:	4a21      	ldr	r2, [pc, #132]	; (8004bd0 <HAL_UART_MspInit+0x168>)
 8004b4a:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8004b4c:	4b1f      	ldr	r3, [pc, #124]	; (8004bcc <HAL_UART_MspInit+0x164>)
 8004b4e:	2210      	movs	r2, #16
 8004b50:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8004b52:	4b1e      	ldr	r3, [pc, #120]	; (8004bcc <HAL_UART_MspInit+0x164>)
 8004b54:	2200      	movs	r2, #0
 8004b56:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8004b58:	4b1c      	ldr	r3, [pc, #112]	; (8004bcc <HAL_UART_MspInit+0x164>)
 8004b5a:	2280      	movs	r2, #128	; 0x80
 8004b5c:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8004b5e:	4b1b      	ldr	r3, [pc, #108]	; (8004bcc <HAL_UART_MspInit+0x164>)
 8004b60:	2200      	movs	r2, #0
 8004b62:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8004b64:	4b19      	ldr	r3, [pc, #100]	; (8004bcc <HAL_UART_MspInit+0x164>)
 8004b66:	2200      	movs	r2, #0
 8004b68:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 8004b6a:	4b18      	ldr	r3, [pc, #96]	; (8004bcc <HAL_UART_MspInit+0x164>)
 8004b6c:	2200      	movs	r2, #0
 8004b6e:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_HIGH;
 8004b70:	4b16      	ldr	r3, [pc, #88]	; (8004bcc <HAL_UART_MspInit+0x164>)
 8004b72:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8004b76:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 8004b78:	4814      	ldr	r0, [pc, #80]	; (8004bcc <HAL_UART_MspInit+0x164>)
 8004b7a:	f000 ff41 	bl	8005a00 <HAL_DMA_Init>
 8004b7e:	4603      	mov	r3, r0
 8004b80:	2b00      	cmp	r3, #0
 8004b82:	bf14      	ite	ne
 8004b84:	2301      	movne	r3, #1
 8004b86:	2300      	moveq	r3, #0
 8004b88:	b2db      	uxtb	r3, r3
 8004b8a:	2b00      	cmp	r3, #0
 8004b8c:	d001      	beq.n	8004b92 <HAL_UART_MspInit+0x12a>
    {
      Error_Handler();
 8004b8e:	f7fe ff79 	bl	8003a84 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart1_tx);
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	4a0d      	ldr	r2, [pc, #52]	; (8004bcc <HAL_UART_MspInit+0x164>)
 8004b96:	631a      	str	r2, [r3, #48]	; 0x30
 8004b98:	4a0c      	ldr	r2, [pc, #48]	; (8004bcc <HAL_UART_MspInit+0x164>)
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	6253      	str	r3, [r2, #36]	; 0x24

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8004b9e:	2200      	movs	r2, #0
 8004ba0:	2100      	movs	r1, #0
 8004ba2:	2025      	movs	r0, #37	; 0x25
 8004ba4:	f000 fef5 	bl	8005992 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8004ba8:	2025      	movs	r0, #37	; 0x25
 8004baa:	f000 ff0e 	bl	80059ca <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8004bae:	bf00      	nop
 8004bb0:	3720      	adds	r7, #32
 8004bb2:	46bd      	mov	sp, r7
 8004bb4:	bd80      	pop	{r7, pc}
 8004bb6:	bf00      	nop
 8004bb8:	40013800 	.word	0x40013800
 8004bbc:	40021000 	.word	0x40021000
 8004bc0:	40010800 	.word	0x40010800
 8004bc4:	2000112c 	.word	0x2000112c
 8004bc8:	40020058 	.word	0x40020058
 8004bcc:	20001170 	.word	0x20001170
 8004bd0:	40020044 	.word	0x40020044

08004bd4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8004bd4:	b480      	push	{r7}
 8004bd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8004bd8:	e7fe      	b.n	8004bd8 <NMI_Handler+0x4>

08004bda <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8004bda:	b480      	push	{r7}
 8004bdc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8004bde:	e7fe      	b.n	8004bde <HardFault_Handler+0x4>

08004be0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8004be0:	b480      	push	{r7}
 8004be2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8004be4:	e7fe      	b.n	8004be4 <MemManage_Handler+0x4>

08004be6 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8004be6:	b480      	push	{r7}
 8004be8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8004bea:	e7fe      	b.n	8004bea <BusFault_Handler+0x4>

08004bec <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8004bec:	b480      	push	{r7}
 8004bee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8004bf0:	e7fe      	b.n	8004bf0 <UsageFault_Handler+0x4>

08004bf2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8004bf2:	b480      	push	{r7}
 8004bf4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8004bf6:	bf00      	nop
 8004bf8:	46bd      	mov	sp, r7
 8004bfa:	bc80      	pop	{r7}
 8004bfc:	4770      	bx	lr

08004bfe <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8004bfe:	b480      	push	{r7}
 8004c00:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8004c02:	bf00      	nop
 8004c04:	46bd      	mov	sp, r7
 8004c06:	bc80      	pop	{r7}
 8004c08:	4770      	bx	lr

08004c0a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8004c0a:	b480      	push	{r7}
 8004c0c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8004c0e:	bf00      	nop
 8004c10:	46bd      	mov	sp, r7
 8004c12:	bc80      	pop	{r7}
 8004c14:	4770      	bx	lr

08004c16 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8004c16:	b580      	push	{r7, lr}
 8004c18:	af00      	add	r7, sp, #0


  HAL_IncTick();
 8004c1a:	f000 f8f7 	bl	8004e0c <HAL_IncTick>
  SysTick_CallBack();
 8004c1e:	f7fe ff3d 	bl	8003a9c <SysTick_CallBack>
}
 8004c22:	bf00      	nop
 8004c24:	bd80      	pop	{r7, pc}
	...

08004c28 <DMA1_Channel4_IRQHandler>:

/**
  * @brief This function handles DMA1 channel4 global interrupt.
  */
void DMA1_Channel4_IRQHandler(void)
{
 8004c28:	b580      	push	{r7, lr}
 8004c2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel4_IRQn 0 */

  /* USER CODE END DMA1_Channel4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 8004c2c:	4802      	ldr	r0, [pc, #8]	; (8004c38 <DMA1_Channel4_IRQHandler+0x10>)
 8004c2e:	f001 f817 	bl	8005c60 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel4_IRQn 1 */

  /* USER CODE END DMA1_Channel4_IRQn 1 */
}
 8004c32:	bf00      	nop
 8004c34:	bd80      	pop	{r7, pc}
 8004c36:	bf00      	nop
 8004c38:	20001170 	.word	0x20001170

08004c3c <DMA1_Channel5_IRQHandler>:

/**
  * @brief This function handles DMA1 channel5 global interrupt.
  */
void DMA1_Channel5_IRQHandler(void)
{
 8004c3c:	b580      	push	{r7, lr}
 8004c3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel5_IRQn 0 */

  /* USER CODE END DMA1_Channel5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8004c40:	4802      	ldr	r0, [pc, #8]	; (8004c4c <DMA1_Channel5_IRQHandler+0x10>)
 8004c42:	f001 f80d 	bl	8005c60 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel5_IRQn 1 */

  /* USER CODE END DMA1_Channel5_IRQn 1 */
}
 8004c46:	bf00      	nop
 8004c48:	bd80      	pop	{r7, pc}
 8004c4a:	bf00      	nop
 8004c4c:	2000112c 	.word	0x2000112c

08004c50 <TIM1_TRG_COM_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts.
  */
void TIM1_TRG_COM_IRQHandler(void)
{
 8004c50:	b580      	push	{r7, lr}
 8004c52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8004c54:	4802      	ldr	r0, [pc, #8]	; (8004c60 <TIM1_TRG_COM_IRQHandler+0x10>)
 8004c56:	f002 f913 	bl	8006e80 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_IRQn 1 */
}
 8004c5a:	bf00      	nop
 8004c5c:	bd80      	pop	{r7, pc}
 8004c5e:	bf00      	nop
 8004c60:	200010a4 	.word	0x200010a4

08004c64 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8004c64:	b580      	push	{r7, lr}
 8004c66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8004c68:	4802      	ldr	r0, [pc, #8]	; (8004c74 <USART1_IRQHandler+0x10>)
 8004c6a:	f003 f80f 	bl	8007c8c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8004c6e:	bf00      	nop
 8004c70:	bd80      	pop	{r7, pc}
 8004c72:	bf00      	nop
 8004c74:	200010ec 	.word	0x200010ec

08004c78 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8004c78:	b480      	push	{r7}
 8004c7a:	af00      	add	r7, sp, #0
	return 1;
 8004c7c:	2301      	movs	r3, #1
}
 8004c7e:	4618      	mov	r0, r3
 8004c80:	46bd      	mov	sp, r7
 8004c82:	bc80      	pop	{r7}
 8004c84:	4770      	bx	lr

08004c86 <_kill>:

int _kill(int pid, int sig)
{
 8004c86:	b580      	push	{r7, lr}
 8004c88:	b082      	sub	sp, #8
 8004c8a:	af00      	add	r7, sp, #0
 8004c8c:	6078      	str	r0, [r7, #4]
 8004c8e:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8004c90:	f003 ffb2 	bl	8008bf8 <__errno>
 8004c94:	4603      	mov	r3, r0
 8004c96:	2216      	movs	r2, #22
 8004c98:	601a      	str	r2, [r3, #0]
	return -1;
 8004c9a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8004c9e:	4618      	mov	r0, r3
 8004ca0:	3708      	adds	r7, #8
 8004ca2:	46bd      	mov	sp, r7
 8004ca4:	bd80      	pop	{r7, pc}

08004ca6 <_exit>:

void _exit (int status)
{
 8004ca6:	b580      	push	{r7, lr}
 8004ca8:	b082      	sub	sp, #8
 8004caa:	af00      	add	r7, sp, #0
 8004cac:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8004cae:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8004cb2:	6878      	ldr	r0, [r7, #4]
 8004cb4:	f7ff ffe7 	bl	8004c86 <_kill>
	while (1) {}		/* Make sure we hang here */
 8004cb8:	e7fe      	b.n	8004cb8 <_exit+0x12>
	...

08004cbc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8004cbc:	b580      	push	{r7, lr}
 8004cbe:	b086      	sub	sp, #24
 8004cc0:	af00      	add	r7, sp, #0
 8004cc2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8004cc4:	4a14      	ldr	r2, [pc, #80]	; (8004d18 <_sbrk+0x5c>)
 8004cc6:	4b15      	ldr	r3, [pc, #84]	; (8004d1c <_sbrk+0x60>)
 8004cc8:	1ad3      	subs	r3, r2, r3
 8004cca:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8004ccc:	697b      	ldr	r3, [r7, #20]
 8004cce:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8004cd0:	4b13      	ldr	r3, [pc, #76]	; (8004d20 <_sbrk+0x64>)
 8004cd2:	681b      	ldr	r3, [r3, #0]
 8004cd4:	2b00      	cmp	r3, #0
 8004cd6:	d102      	bne.n	8004cde <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8004cd8:	4b11      	ldr	r3, [pc, #68]	; (8004d20 <_sbrk+0x64>)
 8004cda:	4a12      	ldr	r2, [pc, #72]	; (8004d24 <_sbrk+0x68>)
 8004cdc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8004cde:	4b10      	ldr	r3, [pc, #64]	; (8004d20 <_sbrk+0x64>)
 8004ce0:	681a      	ldr	r2, [r3, #0]
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	4413      	add	r3, r2
 8004ce6:	693a      	ldr	r2, [r7, #16]
 8004ce8:	429a      	cmp	r2, r3
 8004cea:	d207      	bcs.n	8004cfc <_sbrk+0x40>
  {
    errno = ENOMEM;
 8004cec:	f003 ff84 	bl	8008bf8 <__errno>
 8004cf0:	4603      	mov	r3, r0
 8004cf2:	220c      	movs	r2, #12
 8004cf4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8004cf6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8004cfa:	e009      	b.n	8004d10 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8004cfc:	4b08      	ldr	r3, [pc, #32]	; (8004d20 <_sbrk+0x64>)
 8004cfe:	681b      	ldr	r3, [r3, #0]
 8004d00:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8004d02:	4b07      	ldr	r3, [pc, #28]	; (8004d20 <_sbrk+0x64>)
 8004d04:	681a      	ldr	r2, [r3, #0]
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	4413      	add	r3, r2
 8004d0a:	4a05      	ldr	r2, [pc, #20]	; (8004d20 <_sbrk+0x64>)
 8004d0c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8004d0e:	68fb      	ldr	r3, [r7, #12]
}
 8004d10:	4618      	mov	r0, r3
 8004d12:	3718      	adds	r7, #24
 8004d14:	46bd      	mov	sp, r7
 8004d16:	bd80      	pop	{r7, pc}
 8004d18:	20005000 	.word	0x20005000
 8004d1c:	00000400 	.word	0x00000400
 8004d20:	200023c8 	.word	0x200023c8
 8004d24:	20002450 	.word	0x20002450

08004d28 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8004d28:	b480      	push	{r7}
 8004d2a:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8004d2c:	bf00      	nop
 8004d2e:	46bd      	mov	sp, r7
 8004d30:	bc80      	pop	{r7}
 8004d32:	4770      	bx	lr

08004d34 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8004d34:	2100      	movs	r1, #0
  b LoopCopyDataInit
 8004d36:	e003      	b.n	8004d40 <LoopCopyDataInit>

08004d38 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8004d38:	4b0b      	ldr	r3, [pc, #44]	; (8004d68 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 8004d3a:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8004d3c:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 8004d3e:	3104      	adds	r1, #4

08004d40 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8004d40:	480a      	ldr	r0, [pc, #40]	; (8004d6c <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 8004d42:	4b0b      	ldr	r3, [pc, #44]	; (8004d70 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 8004d44:	1842      	adds	r2, r0, r1
  cmp r2, r3
 8004d46:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8004d48:	d3f6      	bcc.n	8004d38 <CopyDataInit>
  ldr r2, =_sbss
 8004d4a:	4a0a      	ldr	r2, [pc, #40]	; (8004d74 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 8004d4c:	e002      	b.n	8004d54 <LoopFillZerobss>

08004d4e <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 8004d4e:	2300      	movs	r3, #0
  str r3, [r2], #4
 8004d50:	f842 3b04 	str.w	r3, [r2], #4

08004d54 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 8004d54:	4b08      	ldr	r3, [pc, #32]	; (8004d78 <LoopFillZerobss+0x24>)
  cmp r2, r3
 8004d56:	429a      	cmp	r2, r3
  bcc FillZerobss
 8004d58:	d3f9      	bcc.n	8004d4e <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8004d5a:	f7ff ffe5 	bl	8004d28 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8004d5e:	f003 ff51 	bl	8008c04 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8004d62:	f7fe fc93 	bl	800368c <main>
  bx lr
 8004d66:	4770      	bx	lr
  ldr r3, =_sidata
 8004d68:	080093ec 	.word	0x080093ec
  ldr r0, =_sdata
 8004d6c:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8004d70:	20000078 	.word	0x20000078
  ldr r2, =_sbss
 8004d74:	20000078 	.word	0x20000078
  ldr r3, = _ebss
 8004d78:	20002450 	.word	0x20002450

08004d7c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8004d7c:	e7fe      	b.n	8004d7c <ADC1_2_IRQHandler>
	...

08004d80 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8004d80:	b580      	push	{r7, lr}
 8004d82:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8004d84:	4b08      	ldr	r3, [pc, #32]	; (8004da8 <HAL_Init+0x28>)
 8004d86:	681b      	ldr	r3, [r3, #0]
 8004d88:	4a07      	ldr	r2, [pc, #28]	; (8004da8 <HAL_Init+0x28>)
 8004d8a:	f043 0310 	orr.w	r3, r3, #16
 8004d8e:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8004d90:	2003      	movs	r0, #3
 8004d92:	f000 fdf3 	bl	800597c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8004d96:	2000      	movs	r0, #0
 8004d98:	f000 f808 	bl	8004dac <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8004d9c:	f7ff fdd0 	bl	8004940 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8004da0:	2300      	movs	r3, #0
}
 8004da2:	4618      	mov	r0, r3
 8004da4:	bd80      	pop	{r7, pc}
 8004da6:	bf00      	nop
 8004da8:	40022000 	.word	0x40022000

08004dac <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8004dac:	b580      	push	{r7, lr}
 8004dae:	b082      	sub	sp, #8
 8004db0:	af00      	add	r7, sp, #0
 8004db2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8004db4:	4b12      	ldr	r3, [pc, #72]	; (8004e00 <HAL_InitTick+0x54>)
 8004db6:	681a      	ldr	r2, [r3, #0]
 8004db8:	4b12      	ldr	r3, [pc, #72]	; (8004e04 <HAL_InitTick+0x58>)
 8004dba:	781b      	ldrb	r3, [r3, #0]
 8004dbc:	4619      	mov	r1, r3
 8004dbe:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8004dc2:	fbb3 f3f1 	udiv	r3, r3, r1
 8004dc6:	fbb2 f3f3 	udiv	r3, r2, r3
 8004dca:	4618      	mov	r0, r3
 8004dcc:	f000 fe0b 	bl	80059e6 <HAL_SYSTICK_Config>
 8004dd0:	4603      	mov	r3, r0
 8004dd2:	2b00      	cmp	r3, #0
 8004dd4:	d001      	beq.n	8004dda <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8004dd6:	2301      	movs	r3, #1
 8004dd8:	e00e      	b.n	8004df8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	2b0f      	cmp	r3, #15
 8004dde:	d80a      	bhi.n	8004df6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8004de0:	2200      	movs	r2, #0
 8004de2:	6879      	ldr	r1, [r7, #4]
 8004de4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004de8:	f000 fdd3 	bl	8005992 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8004dec:	4a06      	ldr	r2, [pc, #24]	; (8004e08 <HAL_InitTick+0x5c>)
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8004df2:	2300      	movs	r3, #0
 8004df4:	e000      	b.n	8004df8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8004df6:	2301      	movs	r3, #1
}
 8004df8:	4618      	mov	r0, r3
 8004dfa:	3708      	adds	r7, #8
 8004dfc:	46bd      	mov	sp, r7
 8004dfe:	bd80      	pop	{r7, pc}
 8004e00:	20000004 	.word	0x20000004
 8004e04:	2000000c 	.word	0x2000000c
 8004e08:	20000008 	.word	0x20000008

08004e0c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8004e0c:	b480      	push	{r7}
 8004e0e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8004e10:	4b05      	ldr	r3, [pc, #20]	; (8004e28 <HAL_IncTick+0x1c>)
 8004e12:	781b      	ldrb	r3, [r3, #0]
 8004e14:	461a      	mov	r2, r3
 8004e16:	4b05      	ldr	r3, [pc, #20]	; (8004e2c <HAL_IncTick+0x20>)
 8004e18:	681b      	ldr	r3, [r3, #0]
 8004e1a:	4413      	add	r3, r2
 8004e1c:	4a03      	ldr	r2, [pc, #12]	; (8004e2c <HAL_IncTick+0x20>)
 8004e1e:	6013      	str	r3, [r2, #0]
}
 8004e20:	bf00      	nop
 8004e22:	46bd      	mov	sp, r7
 8004e24:	bc80      	pop	{r7}
 8004e26:	4770      	bx	lr
 8004e28:	2000000c 	.word	0x2000000c
 8004e2c:	2000243c 	.word	0x2000243c

08004e30 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8004e30:	b480      	push	{r7}
 8004e32:	af00      	add	r7, sp, #0
  return uwTick;
 8004e34:	4b02      	ldr	r3, [pc, #8]	; (8004e40 <HAL_GetTick+0x10>)
 8004e36:	681b      	ldr	r3, [r3, #0]
}
 8004e38:	4618      	mov	r0, r3
 8004e3a:	46bd      	mov	sp, r7
 8004e3c:	bc80      	pop	{r7}
 8004e3e:	4770      	bx	lr
 8004e40:	2000243c 	.word	0x2000243c

08004e44 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8004e44:	b580      	push	{r7, lr}
 8004e46:	b084      	sub	sp, #16
 8004e48:	af00      	add	r7, sp, #0
 8004e4a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8004e4c:	f7ff fff0 	bl	8004e30 <HAL_GetTick>
 8004e50:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8004e56:	68fb      	ldr	r3, [r7, #12]
 8004e58:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004e5c:	d005      	beq.n	8004e6a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8004e5e:	4b0a      	ldr	r3, [pc, #40]	; (8004e88 <HAL_Delay+0x44>)
 8004e60:	781b      	ldrb	r3, [r3, #0]
 8004e62:	461a      	mov	r2, r3
 8004e64:	68fb      	ldr	r3, [r7, #12]
 8004e66:	4413      	add	r3, r2
 8004e68:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8004e6a:	bf00      	nop
 8004e6c:	f7ff ffe0 	bl	8004e30 <HAL_GetTick>
 8004e70:	4602      	mov	r2, r0
 8004e72:	68bb      	ldr	r3, [r7, #8]
 8004e74:	1ad3      	subs	r3, r2, r3
 8004e76:	68fa      	ldr	r2, [r7, #12]
 8004e78:	429a      	cmp	r2, r3
 8004e7a:	d8f7      	bhi.n	8004e6c <HAL_Delay+0x28>
  {
  }
}
 8004e7c:	bf00      	nop
 8004e7e:	bf00      	nop
 8004e80:	3710      	adds	r7, #16
 8004e82:	46bd      	mov	sp, r7
 8004e84:	bd80      	pop	{r7, pc}
 8004e86:	bf00      	nop
 8004e88:	2000000c 	.word	0x2000000c

08004e8c <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8004e8c:	b580      	push	{r7, lr}
 8004e8e:	b086      	sub	sp, #24
 8004e90:	af00      	add	r7, sp, #0
 8004e92:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004e94:	2300      	movs	r3, #0
 8004e96:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 8004e98:	2300      	movs	r3, #0
 8004e9a:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 8004e9c:	2300      	movs	r3, #0
 8004e9e:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 8004ea0:	2300      	movs	r3, #0
 8004ea2:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	2b00      	cmp	r3, #0
 8004ea8:	d101      	bne.n	8004eae <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 8004eaa:	2301      	movs	r3, #1
 8004eac:	e0be      	b.n	800502c <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	689b      	ldr	r3, [r3, #8]
 8004eb2:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004eb8:	2b00      	cmp	r3, #0
 8004eba:	d109      	bne.n	8004ed0 <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	2200      	movs	r2, #0
 8004ec0:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	2200      	movs	r2, #0
 8004ec6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8004eca:	6878      	ldr	r0, [r7, #4]
 8004ecc:	f7ff fd6a 	bl	80049a4 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8004ed0:	6878      	ldr	r0, [r7, #4]
 8004ed2:	f000 fbb1 	bl	8005638 <ADC_ConversionStop_Disable>
 8004ed6:	4603      	mov	r3, r0
 8004ed8:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004ede:	f003 0310 	and.w	r3, r3, #16
 8004ee2:	2b00      	cmp	r3, #0
 8004ee4:	f040 8099 	bne.w	800501a <HAL_ADC_Init+0x18e>
 8004ee8:	7dfb      	ldrb	r3, [r7, #23]
 8004eea:	2b00      	cmp	r3, #0
 8004eec:	f040 8095 	bne.w	800501a <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004ef4:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8004ef8:	f023 0302 	bic.w	r3, r3, #2
 8004efc:	f043 0202 	orr.w	r2, r3, #2
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8004f0c:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	7b1b      	ldrb	r3, [r3, #12]
 8004f12:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8004f14:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8004f16:	68ba      	ldr	r2, [r7, #8]
 8004f18:	4313      	orrs	r3, r2
 8004f1a:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	689b      	ldr	r3, [r3, #8]
 8004f20:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004f24:	d003      	beq.n	8004f2e <HAL_ADC_Init+0xa2>
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	689b      	ldr	r3, [r3, #8]
 8004f2a:	2b01      	cmp	r3, #1
 8004f2c:	d102      	bne.n	8004f34 <HAL_ADC_Init+0xa8>
 8004f2e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8004f32:	e000      	b.n	8004f36 <HAL_ADC_Init+0xaa>
 8004f34:	2300      	movs	r3, #0
 8004f36:	693a      	ldr	r2, [r7, #16]
 8004f38:	4313      	orrs	r3, r2
 8004f3a:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	7d1b      	ldrb	r3, [r3, #20]
 8004f40:	2b01      	cmp	r3, #1
 8004f42:	d119      	bne.n	8004f78 <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	7b1b      	ldrb	r3, [r3, #12]
 8004f48:	2b00      	cmp	r3, #0
 8004f4a:	d109      	bne.n	8004f60 <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	699b      	ldr	r3, [r3, #24]
 8004f50:	3b01      	subs	r3, #1
 8004f52:	035a      	lsls	r2, r3, #13
 8004f54:	693b      	ldr	r3, [r7, #16]
 8004f56:	4313      	orrs	r3, r2
 8004f58:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8004f5c:	613b      	str	r3, [r7, #16]
 8004f5e:	e00b      	b.n	8004f78 <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004f64:	f043 0220 	orr.w	r2, r3, #32
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f70:	f043 0201 	orr.w	r2, r3, #1
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	681b      	ldr	r3, [r3, #0]
 8004f7c:	685b      	ldr	r3, [r3, #4]
 8004f7e:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	681b      	ldr	r3, [r3, #0]
 8004f86:	693a      	ldr	r2, [r7, #16]
 8004f88:	430a      	orrs	r2, r1
 8004f8a:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	681b      	ldr	r3, [r3, #0]
 8004f90:	689a      	ldr	r2, [r3, #8]
 8004f92:	4b28      	ldr	r3, [pc, #160]	; (8005034 <HAL_ADC_Init+0x1a8>)
 8004f94:	4013      	ands	r3, r2
 8004f96:	687a      	ldr	r2, [r7, #4]
 8004f98:	6812      	ldr	r2, [r2, #0]
 8004f9a:	68b9      	ldr	r1, [r7, #8]
 8004f9c:	430b      	orrs	r3, r1
 8004f9e:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	689b      	ldr	r3, [r3, #8]
 8004fa4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004fa8:	d003      	beq.n	8004fb2 <HAL_ADC_Init+0x126>
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	689b      	ldr	r3, [r3, #8]
 8004fae:	2b01      	cmp	r3, #1
 8004fb0:	d104      	bne.n	8004fbc <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	691b      	ldr	r3, [r3, #16]
 8004fb6:	3b01      	subs	r3, #1
 8004fb8:	051b      	lsls	r3, r3, #20
 8004fba:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	681b      	ldr	r3, [r3, #0]
 8004fc0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004fc2:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	681b      	ldr	r3, [r3, #0]
 8004fca:	68fa      	ldr	r2, [r7, #12]
 8004fcc:	430a      	orrs	r2, r1
 8004fce:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	681b      	ldr	r3, [r3, #0]
 8004fd4:	689a      	ldr	r2, [r3, #8]
 8004fd6:	4b18      	ldr	r3, [pc, #96]	; (8005038 <HAL_ADC_Init+0x1ac>)
 8004fd8:	4013      	ands	r3, r2
 8004fda:	68ba      	ldr	r2, [r7, #8]
 8004fdc:	429a      	cmp	r2, r3
 8004fde:	d10b      	bne.n	8004ff8 <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	2200      	movs	r2, #0
 8004fe4:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004fea:	f023 0303 	bic.w	r3, r3, #3
 8004fee:	f043 0201 	orr.w	r2, r3, #1
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8004ff6:	e018      	b.n	800502a <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004ffc:	f023 0312 	bic.w	r3, r3, #18
 8005000:	f043 0210 	orr.w	r2, r3, #16
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800500c:	f043 0201 	orr.w	r2, r3, #1
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 8005014:	2301      	movs	r3, #1
 8005016:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8005018:	e007      	b.n	800502a <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800501e:	f043 0210 	orr.w	r2, r3, #16
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 8005026:	2301      	movs	r3, #1
 8005028:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 800502a:	7dfb      	ldrb	r3, [r7, #23]
}
 800502c:	4618      	mov	r0, r3
 800502e:	3718      	adds	r7, #24
 8005030:	46bd      	mov	sp, r7
 8005032:	bd80      	pop	{r7, pc}
 8005034:	ffe1f7fd 	.word	0xffe1f7fd
 8005038:	ff1f0efe 	.word	0xff1f0efe

0800503c <HAL_ADC_Start>:
  *         Interruptions enabled in this function: None.
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 800503c:	b580      	push	{r7, lr}
 800503e:	b084      	sub	sp, #16
 8005040:	af00      	add	r7, sp, #0
 8005042:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8005044:	2300      	movs	r3, #0
 8005046:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800504e:	2b01      	cmp	r3, #1
 8005050:	d101      	bne.n	8005056 <HAL_ADC_Start+0x1a>
 8005052:	2302      	movs	r3, #2
 8005054:	e098      	b.n	8005188 <HAL_ADC_Start+0x14c>
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	2201      	movs	r2, #1
 800505a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
   
  /* Enable the ADC peripheral */
  tmp_hal_status = ADC_Enable(hadc);
 800505e:	6878      	ldr	r0, [r7, #4]
 8005060:	f000 fa98 	bl	8005594 <ADC_Enable>
 8005064:	4603      	mov	r3, r0
 8005066:	73fb      	strb	r3, [r7, #15]
  
  /* Start conversion if ADC is effectively enabled */
  if (tmp_hal_status == HAL_OK)
 8005068:	7bfb      	ldrb	r3, [r7, #15]
 800506a:	2b00      	cmp	r3, #0
 800506c:	f040 8087 	bne.w	800517e <HAL_ADC_Start+0x142>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular operation                      */
    ADC_STATE_CLR_SET(hadc->State,
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005074:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005078:	f023 0301 	bic.w	r3, r3, #1
 800507c:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	629a      	str	r2, [r3, #40]	; 0x28
                      HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	681b      	ldr	r3, [r3, #0]
 8005088:	4a41      	ldr	r2, [pc, #260]	; (8005190 <HAL_ADC_Start+0x154>)
 800508a:	4293      	cmp	r3, r2
 800508c:	d105      	bne.n	800509a <HAL_ADC_Start+0x5e>
 800508e:	4b41      	ldr	r3, [pc, #260]	; (8005194 <HAL_ADC_Start+0x158>)
 8005090:	685b      	ldr	r3, [r3, #4]
 8005092:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 8005096:	2b00      	cmp	r3, #0
 8005098:	d115      	bne.n	80050c6 <HAL_ADC_Start+0x8a>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800509e:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	681b      	ldr	r3, [r3, #0]
 80050aa:	685b      	ldr	r3, [r3, #4]
 80050ac:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80050b0:	2b00      	cmp	r3, #0
 80050b2:	d026      	beq.n	8005102 <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80050b8:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80050bc:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	629a      	str	r2, [r3, #40]	; 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80050c4:	e01d      	b.n	8005102 <HAL_ADC_Start+0xc6>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80050ca:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	681b      	ldr	r3, [r3, #0]
 80050d6:	4a2f      	ldr	r2, [pc, #188]	; (8005194 <HAL_ADC_Start+0x158>)
 80050d8:	4293      	cmp	r3, r2
 80050da:	d004      	beq.n	80050e6 <HAL_ADC_Start+0xaa>
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	681b      	ldr	r3, [r3, #0]
 80050e0:	4a2b      	ldr	r2, [pc, #172]	; (8005190 <HAL_ADC_Start+0x154>)
 80050e2:	4293      	cmp	r3, r2
 80050e4:	d10d      	bne.n	8005102 <HAL_ADC_Start+0xc6>
 80050e6:	4b2b      	ldr	r3, [pc, #172]	; (8005194 <HAL_ADC_Start+0x158>)
 80050e8:	685b      	ldr	r3, [r3, #4]
 80050ea:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80050ee:	2b00      	cmp	r3, #0
 80050f0:	d007      	beq.n	8005102 <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80050f6:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80050fa:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	629a      	str	r2, [r3, #40]	; 0x28
      }
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005106:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800510a:	2b00      	cmp	r3, #0
 800510c:	d006      	beq.n	800511c <HAL_ADC_Start+0xe0>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005112:	f023 0206 	bic.w	r2, r3, #6
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	62da      	str	r2, [r3, #44]	; 0x2c
 800511a:	e002      	b.n	8005122 <HAL_ADC_Start+0xe6>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	2200      	movs	r2, #0
 8005120:	62da      	str	r2, [r3, #44]	; 0x2c
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	2200      	movs	r2, #0
 8005126:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
    /* Clear regular group conversion flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	681b      	ldr	r3, [r3, #0]
 800512e:	f06f 0202 	mvn.w	r2, #2
 8005132:	601a      	str	r2, [r3, #0]
    /*  - if ADC is slave, ADC is enabled only (conversion is not started).   */
    /*  - if ADC is master, ADC is enabled and conversion is started.         */
    /* If ADC is master, ADC is enabled and conversion is started.            */
    /* Note: Alternate trigger for single conversion could be to force an     */
    /*       additional set of bit ADON "hadc->Instance->CR2 |= ADC_CR2_ADON;"*/
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	681b      	ldr	r3, [r3, #0]
 8005138:	689b      	ldr	r3, [r3, #8]
 800513a:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 800513e:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8005142:	d113      	bne.n	800516c <HAL_ADC_Start+0x130>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	681b      	ldr	r3, [r3, #0]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8005148:	4a11      	ldr	r2, [pc, #68]	; (8005190 <HAL_ADC_Start+0x154>)
 800514a:	4293      	cmp	r3, r2
 800514c:	d105      	bne.n	800515a <HAL_ADC_Start+0x11e>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 800514e:	4b11      	ldr	r3, [pc, #68]	; (8005194 <HAL_ADC_Start+0x158>)
 8005150:	685b      	ldr	r3, [r3, #4]
 8005152:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8005156:	2b00      	cmp	r3, #0
 8005158:	d108      	bne.n	800516c <HAL_ADC_Start+0x130>
    {
      /* Start ADC conversion on regular group with SW start */
      SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	681b      	ldr	r3, [r3, #0]
 800515e:	689a      	ldr	r2, [r3, #8]
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	681b      	ldr	r3, [r3, #0]
 8005164:	f442 02a0 	orr.w	r2, r2, #5242880	; 0x500000
 8005168:	609a      	str	r2, [r3, #8]
 800516a:	e00c      	b.n	8005186 <HAL_ADC_Start+0x14a>
    }
    else
    {
      /* Start ADC conversion on regular group with external trigger */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	681b      	ldr	r3, [r3, #0]
 8005170:	689a      	ldr	r2, [r3, #8]
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	681b      	ldr	r3, [r3, #0]
 8005176:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 800517a:	609a      	str	r2, [r3, #8]
 800517c:	e003      	b.n	8005186 <HAL_ADC_Start+0x14a>
    }
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	2200      	movs	r2, #0
 8005182:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  }
    
  /* Return function status */
  return tmp_hal_status;
 8005186:	7bfb      	ldrb	r3, [r7, #15]
}
 8005188:	4618      	mov	r0, r3
 800518a:	3710      	adds	r7, #16
 800518c:	46bd      	mov	sp, r7
 800518e:	bd80      	pop	{r7, pc}
 8005190:	40012800 	.word	0x40012800
 8005194:	40012400 	.word	0x40012400

08005198 <HAL_ADC_PollForConversion>:
  * @param  hadc: ADC handle
  * @param  Timeout: Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8005198:	b590      	push	{r4, r7, lr}
 800519a:	b087      	sub	sp, #28
 800519c:	af00      	add	r7, sp, #0
 800519e:	6078      	str	r0, [r7, #4]
 80051a0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 80051a2:	2300      	movs	r3, #0
 80051a4:	617b      	str	r3, [r7, #20]
  
  /* Variables for polling in case of scan mode enabled and polling for each  */
  /* conversion.                                                              */
  __IO uint32_t Conversion_Timeout_CPU_cycles = 0U;
 80051a6:	2300      	movs	r3, #0
 80051a8:	60fb      	str	r3, [r7, #12]
  uint32_t Conversion_Timeout_CPU_cycles_max = 0U;
 80051aa:	2300      	movs	r3, #0
 80051ac:	613b      	str	r3, [r7, #16]
 
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Get tick count */
  tickstart = HAL_GetTick();
 80051ae:	f7ff fe3f 	bl	8004e30 <HAL_GetTick>
 80051b2:	6178      	str	r0, [r7, #20]
  
  /* Verification that ADC configuration is compliant with polling for        */
  /* each conversion:                                                         */
  /* Particular case is ADC configured in DMA mode                            */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA))
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	681b      	ldr	r3, [r3, #0]
 80051b8:	689b      	ldr	r3, [r3, #8]
 80051ba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80051be:	2b00      	cmp	r3, #0
 80051c0:	d00b      	beq.n	80051da <HAL_ADC_PollForConversion+0x42>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80051c6:	f043 0220 	orr.w	r2, r3, #32
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	629a      	str	r2, [r3, #40]	; 0x28
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	2200      	movs	r2, #0
 80051d2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    return HAL_ERROR;
 80051d6:	2301      	movs	r3, #1
 80051d8:	e0c8      	b.n	800536c <HAL_ADC_PollForConversion+0x1d4>
  /*    from ADC conversion time (selected sampling time + conversion time of */
  /*    12.5 ADC clock cycles) and APB2/ADC clock prescalers (depending on    */
  /*    settings, conversion time range can be from 28 to 32256 CPU cycles).  */
  /*    As flag EOC is not set after each conversion, no timeout status can   */
  /*    be set.                                                               */
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	681b      	ldr	r3, [r3, #0]
 80051de:	685b      	ldr	r3, [r3, #4]
 80051e0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80051e4:	2b00      	cmp	r3, #0
 80051e6:	d12a      	bne.n	800523e <HAL_ADC_PollForConversion+0xa6>
      HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L)    )
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	681b      	ldr	r3, [r3, #0]
 80051ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80051ee:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 80051f2:	2b00      	cmp	r3, #0
 80051f4:	d123      	bne.n	800523e <HAL_ADC_PollForConversion+0xa6>
  {
    /* Wait until End of Conversion flag is raised */
    while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 80051f6:	e01a      	b.n	800522e <HAL_ADC_PollForConversion+0x96>
    {
      /* Check if timeout is disabled (set to infinite wait) */
      if(Timeout != HAL_MAX_DELAY)
 80051f8:	683b      	ldr	r3, [r7, #0]
 80051fa:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80051fe:	d016      	beq.n	800522e <HAL_ADC_PollForConversion+0x96>
      {
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 8005200:	683b      	ldr	r3, [r7, #0]
 8005202:	2b00      	cmp	r3, #0
 8005204:	d007      	beq.n	8005216 <HAL_ADC_PollForConversion+0x7e>
 8005206:	f7ff fe13 	bl	8004e30 <HAL_GetTick>
 800520a:	4602      	mov	r2, r0
 800520c:	697b      	ldr	r3, [r7, #20]
 800520e:	1ad3      	subs	r3, r2, r3
 8005210:	683a      	ldr	r2, [r7, #0]
 8005212:	429a      	cmp	r2, r3
 8005214:	d20b      	bcs.n	800522e <HAL_ADC_PollForConversion+0x96>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800521a:	f043 0204 	orr.w	r2, r3, #4
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	629a      	str	r2, [r3, #40]	; 0x28
          
          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	2200      	movs	r2, #0
 8005226:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
          
          return HAL_TIMEOUT;
 800522a:	2303      	movs	r3, #3
 800522c:	e09e      	b.n	800536c <HAL_ADC_PollForConversion+0x1d4>
    while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	681b      	ldr	r3, [r3, #0]
 8005232:	681b      	ldr	r3, [r3, #0]
 8005234:	f003 0302 	and.w	r3, r3, #2
 8005238:	2b00      	cmp	r3, #0
 800523a:	d0dd      	beq.n	80051f8 <HAL_ADC_PollForConversion+0x60>
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 800523c:	e06c      	b.n	8005318 <HAL_ADC_PollForConversion+0x180>
    /* Replace polling by wait for maximum conversion time */
    /*  - Computation of CPU clock cycles corresponding to ADC clock cycles   */
    /*    and ADC maximum conversion cycles on all channels.                  */
    /*  - Wait for the expected ADC clock cycles delay                        */
    Conversion_Timeout_CPU_cycles_max = ((SystemCoreClock
                                          / HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC))
 800523e:	4b4d      	ldr	r3, [pc, #308]	; (8005374 <HAL_ADC_PollForConversion+0x1dc>)
 8005240:	681c      	ldr	r4, [r3, #0]
 8005242:	2002      	movs	r0, #2
 8005244:	f001 fc0e 	bl	8006a64 <HAL_RCCEx_GetPeriphCLKFreq>
 8005248:	4603      	mov	r3, r0
 800524a:	fbb4 f2f3 	udiv	r2, r4, r3
                                         * ADC_CONVCYCLES_MAX_RANGE(hadc)                 );
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	681b      	ldr	r3, [r3, #0]
 8005252:	6919      	ldr	r1, [r3, #16]
 8005254:	4b48      	ldr	r3, [pc, #288]	; (8005378 <HAL_ADC_PollForConversion+0x1e0>)
 8005256:	400b      	ands	r3, r1
 8005258:	2b00      	cmp	r3, #0
 800525a:	d118      	bne.n	800528e <HAL_ADC_PollForConversion+0xf6>
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	681b      	ldr	r3, [r3, #0]
 8005260:	68d9      	ldr	r1, [r3, #12]
 8005262:	4b46      	ldr	r3, [pc, #280]	; (800537c <HAL_ADC_PollForConversion+0x1e4>)
 8005264:	400b      	ands	r3, r1
 8005266:	2b00      	cmp	r3, #0
 8005268:	d111      	bne.n	800528e <HAL_ADC_PollForConversion+0xf6>
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	681b      	ldr	r3, [r3, #0]
 800526e:	6919      	ldr	r1, [r3, #16]
 8005270:	4b43      	ldr	r3, [pc, #268]	; (8005380 <HAL_ADC_PollForConversion+0x1e8>)
 8005272:	400b      	ands	r3, r1
 8005274:	2b00      	cmp	r3, #0
 8005276:	d108      	bne.n	800528a <HAL_ADC_PollForConversion+0xf2>
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	681b      	ldr	r3, [r3, #0]
 800527c:	68d9      	ldr	r1, [r3, #12]
 800527e:	4b41      	ldr	r3, [pc, #260]	; (8005384 <HAL_ADC_PollForConversion+0x1ec>)
 8005280:	400b      	ands	r3, r1
 8005282:	2b00      	cmp	r3, #0
 8005284:	d101      	bne.n	800528a <HAL_ADC_PollForConversion+0xf2>
 8005286:	2314      	movs	r3, #20
 8005288:	e020      	b.n	80052cc <HAL_ADC_PollForConversion+0x134>
 800528a:	2329      	movs	r3, #41	; 0x29
 800528c:	e01e      	b.n	80052cc <HAL_ADC_PollForConversion+0x134>
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	681b      	ldr	r3, [r3, #0]
 8005292:	6919      	ldr	r1, [r3, #16]
 8005294:	4b3a      	ldr	r3, [pc, #232]	; (8005380 <HAL_ADC_PollForConversion+0x1e8>)
 8005296:	400b      	ands	r3, r1
 8005298:	2b00      	cmp	r3, #0
 800529a:	d106      	bne.n	80052aa <HAL_ADC_PollForConversion+0x112>
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	681b      	ldr	r3, [r3, #0]
 80052a0:	68d9      	ldr	r1, [r3, #12]
 80052a2:	4b38      	ldr	r3, [pc, #224]	; (8005384 <HAL_ADC_PollForConversion+0x1ec>)
 80052a4:	400b      	ands	r3, r1
 80052a6:	2b00      	cmp	r3, #0
 80052a8:	d00d      	beq.n	80052c6 <HAL_ADC_PollForConversion+0x12e>
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	681b      	ldr	r3, [r3, #0]
 80052ae:	6919      	ldr	r1, [r3, #16]
 80052b0:	4b35      	ldr	r3, [pc, #212]	; (8005388 <HAL_ADC_PollForConversion+0x1f0>)
 80052b2:	400b      	ands	r3, r1
 80052b4:	2b00      	cmp	r3, #0
 80052b6:	d108      	bne.n	80052ca <HAL_ADC_PollForConversion+0x132>
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	681b      	ldr	r3, [r3, #0]
 80052bc:	68d9      	ldr	r1, [r3, #12]
 80052be:	4b32      	ldr	r3, [pc, #200]	; (8005388 <HAL_ADC_PollForConversion+0x1f0>)
 80052c0:	400b      	ands	r3, r1
 80052c2:	2b00      	cmp	r3, #0
 80052c4:	d101      	bne.n	80052ca <HAL_ADC_PollForConversion+0x132>
 80052c6:	2354      	movs	r3, #84	; 0x54
 80052c8:	e000      	b.n	80052cc <HAL_ADC_PollForConversion+0x134>
 80052ca:	23fc      	movs	r3, #252	; 0xfc
    Conversion_Timeout_CPU_cycles_max = ((SystemCoreClock
 80052cc:	fb02 f303 	mul.w	r3, r2, r3
 80052d0:	613b      	str	r3, [r7, #16]
    
    while(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 80052d2:	e01d      	b.n	8005310 <HAL_ADC_PollForConversion+0x178>
    {
      /* Check if timeout is disabled (set to infinite wait) */
      if(Timeout != HAL_MAX_DELAY)
 80052d4:	683b      	ldr	r3, [r7, #0]
 80052d6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80052da:	d016      	beq.n	800530a <HAL_ADC_PollForConversion+0x172>
      {
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 80052dc:	683b      	ldr	r3, [r7, #0]
 80052de:	2b00      	cmp	r3, #0
 80052e0:	d007      	beq.n	80052f2 <HAL_ADC_PollForConversion+0x15a>
 80052e2:	f7ff fda5 	bl	8004e30 <HAL_GetTick>
 80052e6:	4602      	mov	r2, r0
 80052e8:	697b      	ldr	r3, [r7, #20]
 80052ea:	1ad3      	subs	r3, r2, r3
 80052ec:	683a      	ldr	r2, [r7, #0]
 80052ee:	429a      	cmp	r2, r3
 80052f0:	d20b      	bcs.n	800530a <HAL_ADC_PollForConversion+0x172>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80052f6:	f043 0204 	orr.w	r2, r3, #4
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	629a      	str	r2, [r3, #40]	; 0x28
          
          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	2200      	movs	r2, #0
 8005302:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
          
          return HAL_TIMEOUT;
 8005306:	2303      	movs	r3, #3
 8005308:	e030      	b.n	800536c <HAL_ADC_PollForConversion+0x1d4>
        }
      }
      Conversion_Timeout_CPU_cycles ++;
 800530a:	68fb      	ldr	r3, [r7, #12]
 800530c:	3301      	adds	r3, #1
 800530e:	60fb      	str	r3, [r7, #12]
    while(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 8005310:	68fb      	ldr	r3, [r7, #12]
 8005312:	693a      	ldr	r2, [r7, #16]
 8005314:	429a      	cmp	r2, r3
 8005316:	d8dd      	bhi.n	80052d4 <HAL_ADC_PollForConversion+0x13c>
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	681b      	ldr	r3, [r3, #0]
 800531c:	f06f 0212 	mvn.w	r2, #18
 8005320:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005326:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	629a      	str	r2, [r3, #40]	; 0x28
  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F1 devices, in case of sequencer enabled                   */
  /*       (several ranks selected), end of conversion flag is raised         */
  /*       at the end of the sequence.                                        */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	681b      	ldr	r3, [r3, #0]
 8005332:	689b      	ldr	r3, [r3, #8]
 8005334:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8005338:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 800533c:	d115      	bne.n	800536a <HAL_ADC_PollForConversion+0x1d2>
     (hadc->Init.ContinuousConvMode == DISABLE)   )
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	7b1b      	ldrb	r3, [r3, #12]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8005342:	2b00      	cmp	r3, #0
 8005344:	d111      	bne.n	800536a <HAL_ADC_PollForConversion+0x1d2>
  {   
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800534a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	629a      	str	r2, [r3, #40]	; 0x28

    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005356:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800535a:	2b00      	cmp	r3, #0
 800535c:	d105      	bne.n	800536a <HAL_ADC_PollForConversion+0x1d2>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005362:	f043 0201 	orr.w	r2, r3, #1
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	629a      	str	r2, [r3, #40]	; 0x28
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 800536a:	2300      	movs	r3, #0
}
 800536c:	4618      	mov	r0, r3
 800536e:	371c      	adds	r7, #28
 8005370:	46bd      	mov	sp, r7
 8005372:	bd90      	pop	{r4, r7, pc}
 8005374:	20000004 	.word	0x20000004
 8005378:	24924924 	.word	0x24924924
 800537c:	00924924 	.word	0x00924924
 8005380:	12492492 	.word	0x12492492
 8005384:	00492492 	.word	0x00492492
 8005388:	00249249 	.word	0x00249249

0800538c <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc: ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 800538c:	b480      	push	{r7}
 800538e:	b083      	sub	sp, #12
 8005390:	af00      	add	r7, sp, #0
 8005392:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	681b      	ldr	r3, [r3, #0]
 8005398:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 800539a:	4618      	mov	r0, r3
 800539c:	370c      	adds	r7, #12
 800539e:	46bd      	mov	sp, r7
 80053a0:	bc80      	pop	{r7}
 80053a2:	4770      	bx	lr

080053a4 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 80053a4:	b480      	push	{r7}
 80053a6:	b085      	sub	sp, #20
 80053a8:	af00      	add	r7, sp, #0
 80053aa:	6078      	str	r0, [r7, #4]
 80053ac:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80053ae:	2300      	movs	r3, #0
 80053b0:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 80053b2:	2300      	movs	r3, #0
 80053b4:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80053bc:	2b01      	cmp	r3, #1
 80053be:	d101      	bne.n	80053c4 <HAL_ADC_ConfigChannel+0x20>
 80053c0:	2302      	movs	r3, #2
 80053c2:	e0dc      	b.n	800557e <HAL_ADC_ConfigChannel+0x1da>
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	2201      	movs	r2, #1
 80053c8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80053cc:	683b      	ldr	r3, [r7, #0]
 80053ce:	685b      	ldr	r3, [r3, #4]
 80053d0:	2b06      	cmp	r3, #6
 80053d2:	d81c      	bhi.n	800540e <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	681b      	ldr	r3, [r3, #0]
 80053d8:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80053da:	683b      	ldr	r3, [r7, #0]
 80053dc:	685a      	ldr	r2, [r3, #4]
 80053de:	4613      	mov	r3, r2
 80053e0:	009b      	lsls	r3, r3, #2
 80053e2:	4413      	add	r3, r2
 80053e4:	3b05      	subs	r3, #5
 80053e6:	221f      	movs	r2, #31
 80053e8:	fa02 f303 	lsl.w	r3, r2, r3
 80053ec:	43db      	mvns	r3, r3
 80053ee:	4019      	ands	r1, r3
 80053f0:	683b      	ldr	r3, [r7, #0]
 80053f2:	6818      	ldr	r0, [r3, #0]
 80053f4:	683b      	ldr	r3, [r7, #0]
 80053f6:	685a      	ldr	r2, [r3, #4]
 80053f8:	4613      	mov	r3, r2
 80053fa:	009b      	lsls	r3, r3, #2
 80053fc:	4413      	add	r3, r2
 80053fe:	3b05      	subs	r3, #5
 8005400:	fa00 f203 	lsl.w	r2, r0, r3
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	681b      	ldr	r3, [r3, #0]
 8005408:	430a      	orrs	r2, r1
 800540a:	635a      	str	r2, [r3, #52]	; 0x34
 800540c:	e03c      	b.n	8005488 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 800540e:	683b      	ldr	r3, [r7, #0]
 8005410:	685b      	ldr	r3, [r3, #4]
 8005412:	2b0c      	cmp	r3, #12
 8005414:	d81c      	bhi.n	8005450 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	681b      	ldr	r3, [r3, #0]
 800541a:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800541c:	683b      	ldr	r3, [r7, #0]
 800541e:	685a      	ldr	r2, [r3, #4]
 8005420:	4613      	mov	r3, r2
 8005422:	009b      	lsls	r3, r3, #2
 8005424:	4413      	add	r3, r2
 8005426:	3b23      	subs	r3, #35	; 0x23
 8005428:	221f      	movs	r2, #31
 800542a:	fa02 f303 	lsl.w	r3, r2, r3
 800542e:	43db      	mvns	r3, r3
 8005430:	4019      	ands	r1, r3
 8005432:	683b      	ldr	r3, [r7, #0]
 8005434:	6818      	ldr	r0, [r3, #0]
 8005436:	683b      	ldr	r3, [r7, #0]
 8005438:	685a      	ldr	r2, [r3, #4]
 800543a:	4613      	mov	r3, r2
 800543c:	009b      	lsls	r3, r3, #2
 800543e:	4413      	add	r3, r2
 8005440:	3b23      	subs	r3, #35	; 0x23
 8005442:	fa00 f203 	lsl.w	r2, r0, r3
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	681b      	ldr	r3, [r3, #0]
 800544a:	430a      	orrs	r2, r1
 800544c:	631a      	str	r2, [r3, #48]	; 0x30
 800544e:	e01b      	b.n	8005488 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	681b      	ldr	r3, [r3, #0]
 8005454:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8005456:	683b      	ldr	r3, [r7, #0]
 8005458:	685a      	ldr	r2, [r3, #4]
 800545a:	4613      	mov	r3, r2
 800545c:	009b      	lsls	r3, r3, #2
 800545e:	4413      	add	r3, r2
 8005460:	3b41      	subs	r3, #65	; 0x41
 8005462:	221f      	movs	r2, #31
 8005464:	fa02 f303 	lsl.w	r3, r2, r3
 8005468:	43db      	mvns	r3, r3
 800546a:	4019      	ands	r1, r3
 800546c:	683b      	ldr	r3, [r7, #0]
 800546e:	6818      	ldr	r0, [r3, #0]
 8005470:	683b      	ldr	r3, [r7, #0]
 8005472:	685a      	ldr	r2, [r3, #4]
 8005474:	4613      	mov	r3, r2
 8005476:	009b      	lsls	r3, r3, #2
 8005478:	4413      	add	r3, r2
 800547a:	3b41      	subs	r3, #65	; 0x41
 800547c:	fa00 f203 	lsl.w	r2, r0, r3
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	681b      	ldr	r3, [r3, #0]
 8005484:	430a      	orrs	r2, r1
 8005486:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8005488:	683b      	ldr	r3, [r7, #0]
 800548a:	681b      	ldr	r3, [r3, #0]
 800548c:	2b09      	cmp	r3, #9
 800548e:	d91c      	bls.n	80054ca <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	681b      	ldr	r3, [r3, #0]
 8005494:	68d9      	ldr	r1, [r3, #12]
 8005496:	683b      	ldr	r3, [r7, #0]
 8005498:	681a      	ldr	r2, [r3, #0]
 800549a:	4613      	mov	r3, r2
 800549c:	005b      	lsls	r3, r3, #1
 800549e:	4413      	add	r3, r2
 80054a0:	3b1e      	subs	r3, #30
 80054a2:	2207      	movs	r2, #7
 80054a4:	fa02 f303 	lsl.w	r3, r2, r3
 80054a8:	43db      	mvns	r3, r3
 80054aa:	4019      	ands	r1, r3
 80054ac:	683b      	ldr	r3, [r7, #0]
 80054ae:	6898      	ldr	r0, [r3, #8]
 80054b0:	683b      	ldr	r3, [r7, #0]
 80054b2:	681a      	ldr	r2, [r3, #0]
 80054b4:	4613      	mov	r3, r2
 80054b6:	005b      	lsls	r3, r3, #1
 80054b8:	4413      	add	r3, r2
 80054ba:	3b1e      	subs	r3, #30
 80054bc:	fa00 f203 	lsl.w	r2, r0, r3
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	681b      	ldr	r3, [r3, #0]
 80054c4:	430a      	orrs	r2, r1
 80054c6:	60da      	str	r2, [r3, #12]
 80054c8:	e019      	b.n	80054fe <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	681b      	ldr	r3, [r3, #0]
 80054ce:	6919      	ldr	r1, [r3, #16]
 80054d0:	683b      	ldr	r3, [r7, #0]
 80054d2:	681a      	ldr	r2, [r3, #0]
 80054d4:	4613      	mov	r3, r2
 80054d6:	005b      	lsls	r3, r3, #1
 80054d8:	4413      	add	r3, r2
 80054da:	2207      	movs	r2, #7
 80054dc:	fa02 f303 	lsl.w	r3, r2, r3
 80054e0:	43db      	mvns	r3, r3
 80054e2:	4019      	ands	r1, r3
 80054e4:	683b      	ldr	r3, [r7, #0]
 80054e6:	6898      	ldr	r0, [r3, #8]
 80054e8:	683b      	ldr	r3, [r7, #0]
 80054ea:	681a      	ldr	r2, [r3, #0]
 80054ec:	4613      	mov	r3, r2
 80054ee:	005b      	lsls	r3, r3, #1
 80054f0:	4413      	add	r3, r2
 80054f2:	fa00 f203 	lsl.w	r2, r0, r3
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	681b      	ldr	r3, [r3, #0]
 80054fa:	430a      	orrs	r2, r1
 80054fc:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 80054fe:	683b      	ldr	r3, [r7, #0]
 8005500:	681b      	ldr	r3, [r3, #0]
 8005502:	2b10      	cmp	r3, #16
 8005504:	d003      	beq.n	800550e <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 8005506:	683b      	ldr	r3, [r7, #0]
 8005508:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 800550a:	2b11      	cmp	r3, #17
 800550c:	d132      	bne.n	8005574 <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	681b      	ldr	r3, [r3, #0]
 8005512:	4a1d      	ldr	r2, [pc, #116]	; (8005588 <HAL_ADC_ConfigChannel+0x1e4>)
 8005514:	4293      	cmp	r3, r2
 8005516:	d125      	bne.n	8005564 <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	681b      	ldr	r3, [r3, #0]
 800551c:	689b      	ldr	r3, [r3, #8]
 800551e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005522:	2b00      	cmp	r3, #0
 8005524:	d126      	bne.n	8005574 <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	681b      	ldr	r3, [r3, #0]
 800552a:	689a      	ldr	r2, [r3, #8]
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	681b      	ldr	r3, [r3, #0]
 8005530:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8005534:	609a      	str	r2, [r3, #8]
        
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 8005536:	683b      	ldr	r3, [r7, #0]
 8005538:	681b      	ldr	r3, [r3, #0]
 800553a:	2b10      	cmp	r3, #16
 800553c:	d11a      	bne.n	8005574 <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800553e:	4b13      	ldr	r3, [pc, #76]	; (800558c <HAL_ADC_ConfigChannel+0x1e8>)
 8005540:	681b      	ldr	r3, [r3, #0]
 8005542:	4a13      	ldr	r2, [pc, #76]	; (8005590 <HAL_ADC_ConfigChannel+0x1ec>)
 8005544:	fba2 2303 	umull	r2, r3, r2, r3
 8005548:	0c9a      	lsrs	r2, r3, #18
 800554a:	4613      	mov	r3, r2
 800554c:	009b      	lsls	r3, r3, #2
 800554e:	4413      	add	r3, r2
 8005550:	005b      	lsls	r3, r3, #1
 8005552:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8005554:	e002      	b.n	800555c <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 8005556:	68bb      	ldr	r3, [r7, #8]
 8005558:	3b01      	subs	r3, #1
 800555a:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 800555c:	68bb      	ldr	r3, [r7, #8]
 800555e:	2b00      	cmp	r3, #0
 8005560:	d1f9      	bne.n	8005556 <HAL_ADC_ConfigChannel+0x1b2>
 8005562:	e007      	b.n	8005574 <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005568:	f043 0220 	orr.w	r2, r3, #32
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 8005570:	2301      	movs	r3, #1
 8005572:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	2200      	movs	r2, #0
 8005578:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 800557c:	7bfb      	ldrb	r3, [r7, #15]
}
 800557e:	4618      	mov	r0, r3
 8005580:	3714      	adds	r7, #20
 8005582:	46bd      	mov	sp, r7
 8005584:	bc80      	pop	{r7}
 8005586:	4770      	bx	lr
 8005588:	40012400 	.word	0x40012400
 800558c:	20000004 	.word	0x20000004
 8005590:	431bde83 	.word	0x431bde83

08005594 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8005594:	b580      	push	{r7, lr}
 8005596:	b084      	sub	sp, #16
 8005598:	af00      	add	r7, sp, #0
 800559a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800559c:	2300      	movs	r3, #0
 800559e:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 80055a0:	2300      	movs	r3, #0
 80055a2:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	681b      	ldr	r3, [r3, #0]
 80055a8:	689b      	ldr	r3, [r3, #8]
 80055aa:	f003 0301 	and.w	r3, r3, #1
 80055ae:	2b01      	cmp	r3, #1
 80055b0:	d039      	beq.n	8005626 <ADC_Enable+0x92>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	681b      	ldr	r3, [r3, #0]
 80055b6:	689a      	ldr	r2, [r3, #8]
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	681b      	ldr	r3, [r3, #0]
 80055bc:	f042 0201 	orr.w	r2, r2, #1
 80055c0:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80055c2:	4b1b      	ldr	r3, [pc, #108]	; (8005630 <ADC_Enable+0x9c>)
 80055c4:	681b      	ldr	r3, [r3, #0]
 80055c6:	4a1b      	ldr	r2, [pc, #108]	; (8005634 <ADC_Enable+0xa0>)
 80055c8:	fba2 2303 	umull	r2, r3, r2, r3
 80055cc:	0c9b      	lsrs	r3, r3, #18
 80055ce:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 80055d0:	e002      	b.n	80055d8 <ADC_Enable+0x44>
    {
      wait_loop_index--;
 80055d2:	68bb      	ldr	r3, [r7, #8]
 80055d4:	3b01      	subs	r3, #1
 80055d6:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 80055d8:	68bb      	ldr	r3, [r7, #8]
 80055da:	2b00      	cmp	r3, #0
 80055dc:	d1f9      	bne.n	80055d2 <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 80055de:	f7ff fc27 	bl	8004e30 <HAL_GetTick>
 80055e2:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 80055e4:	e018      	b.n	8005618 <ADC_Enable+0x84>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80055e6:	f7ff fc23 	bl	8004e30 <HAL_GetTick>
 80055ea:	4602      	mov	r2, r0
 80055ec:	68fb      	ldr	r3, [r7, #12]
 80055ee:	1ad3      	subs	r3, r2, r3
 80055f0:	2b02      	cmp	r3, #2
 80055f2:	d911      	bls.n	8005618 <ADC_Enable+0x84>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80055f8:	f043 0210 	orr.w	r2, r3, #16
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	629a      	str	r2, [r3, #40]	; 0x28
      
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005604:	f043 0201 	orr.w	r2, r3, #1
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	62da      	str	r2, [r3, #44]	; 0x2c
        
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	2200      	movs	r2, #0
 8005610:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
      
        return HAL_ERROR;
 8005614:	2301      	movs	r3, #1
 8005616:	e007      	b.n	8005628 <ADC_Enable+0x94>
    while(ADC_IS_ENABLE(hadc) == RESET)
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	681b      	ldr	r3, [r3, #0]
 800561c:	689b      	ldr	r3, [r3, #8]
 800561e:	f003 0301 	and.w	r3, r3, #1
 8005622:	2b01      	cmp	r3, #1
 8005624:	d1df      	bne.n	80055e6 <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8005626:	2300      	movs	r3, #0
}
 8005628:	4618      	mov	r0, r3
 800562a:	3710      	adds	r7, #16
 800562c:	46bd      	mov	sp, r7
 800562e:	bd80      	pop	{r7, pc}
 8005630:	20000004 	.word	0x20000004
 8005634:	431bde83 	.word	0x431bde83

08005638 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 8005638:	b580      	push	{r7, lr}
 800563a:	b084      	sub	sp, #16
 800563c:	af00      	add	r7, sp, #0
 800563e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8005640:	2300      	movs	r3, #0
 8005642:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	681b      	ldr	r3, [r3, #0]
 8005648:	689b      	ldr	r3, [r3, #8]
 800564a:	f003 0301 	and.w	r3, r3, #1
 800564e:	2b01      	cmp	r3, #1
 8005650:	d127      	bne.n	80056a2 <ADC_ConversionStop_Disable+0x6a>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	681b      	ldr	r3, [r3, #0]
 8005656:	689a      	ldr	r2, [r3, #8]
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	681b      	ldr	r3, [r3, #0]
 800565c:	f022 0201 	bic.w	r2, r2, #1
 8005660:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 8005662:	f7ff fbe5 	bl	8004e30 <HAL_GetTick>
 8005666:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 8005668:	e014      	b.n	8005694 <ADC_ConversionStop_Disable+0x5c>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 800566a:	f7ff fbe1 	bl	8004e30 <HAL_GetTick>
 800566e:	4602      	mov	r2, r0
 8005670:	68fb      	ldr	r3, [r7, #12]
 8005672:	1ad3      	subs	r3, r2, r3
 8005674:	2b02      	cmp	r3, #2
 8005676:	d90d      	bls.n	8005694 <ADC_ConversionStop_Disable+0x5c>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800567c:	f043 0210 	orr.w	r2, r3, #16
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005688:	f043 0201 	orr.w	r2, r3, #1
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	62da      	str	r2, [r3, #44]	; 0x2c
        
        return HAL_ERROR;
 8005690:	2301      	movs	r3, #1
 8005692:	e007      	b.n	80056a4 <ADC_ConversionStop_Disable+0x6c>
    while(ADC_IS_ENABLE(hadc) != RESET)
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	681b      	ldr	r3, [r3, #0]
 8005698:	689b      	ldr	r3, [r3, #8]
 800569a:	f003 0301 	and.w	r3, r3, #1
 800569e:	2b01      	cmp	r3, #1
 80056a0:	d0e3      	beq.n	800566a <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 80056a2:	2300      	movs	r3, #0
}
 80056a4:	4618      	mov	r0, r3
 80056a6:	3710      	adds	r7, #16
 80056a8:	46bd      	mov	sp, r7
 80056aa:	bd80      	pop	{r7, pc}

080056ac <HAL_ADCEx_Calibration_Start>:
  *         the completion of this function.
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef* hadc)
{
 80056ac:	b590      	push	{r4, r7, lr}
 80056ae:	b087      	sub	sp, #28
 80056b0:	af00      	add	r7, sp, #0
 80056b2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80056b4:	2300      	movs	r3, #0
 80056b6:	75fb      	strb	r3, [r7, #23]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0U;
 80056b8:	2300      	movs	r3, #0
 80056ba:	60fb      	str	r3, [r7, #12]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80056c2:	2b01      	cmp	r3, #1
 80056c4:	d101      	bne.n	80056ca <HAL_ADCEx_Calibration_Start+0x1e>
 80056c6:	2302      	movs	r3, #2
 80056c8:	e086      	b.n	80057d8 <HAL_ADCEx_Calibration_Start+0x12c>
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	2201      	movs	r2, #1
 80056ce:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  /* 1. Calibration prerequisite:                                             */
  /*    - ADC must be disabled for at least two ADC clock cycles in disable   */
  /*      mode before ADC enable                                              */
  /* Stop potential conversion on going, on regular and injected groups       */
  /* Disable ADC peripheral */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 80056d2:	6878      	ldr	r0, [r7, #4]
 80056d4:	f7ff ffb0 	bl	8005638 <ADC_ConversionStop_Disable>
 80056d8:	4603      	mov	r3, r0
 80056da:	75fb      	strb	r3, [r7, #23]
  
  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 80056dc:	7dfb      	ldrb	r3, [r7, #23]
 80056de:	2b00      	cmp	r3, #0
 80056e0:	d175      	bne.n	80057ce <HAL_ADCEx_Calibration_Start+0x122>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80056e6:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80056ea:	f023 0302 	bic.w	r3, r3, #2
 80056ee:	f043 0202 	orr.w	r2, r3, #2
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	629a      	str	r2, [r3, #40]	; 0x28
    
    /* Hardware prerequisite: delay before starting the calibration.          */
    /*  - Computation of CPU clock cycles corresponding to ADC clock cycles.  */
    /*  - Wait for the expected ADC clock cycles delay */
    wait_loop_index = ((SystemCoreClock
                        / HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC))
 80056f6:	4b3a      	ldr	r3, [pc, #232]	; (80057e0 <HAL_ADCEx_Calibration_Start+0x134>)
 80056f8:	681c      	ldr	r4, [r3, #0]
 80056fa:	2002      	movs	r0, #2
 80056fc:	f001 f9b2 	bl	8006a64 <HAL_RCCEx_GetPeriphCLKFreq>
 8005700:	4603      	mov	r3, r0
 8005702:	fbb4 f3f3 	udiv	r3, r4, r3
                       * ADC_PRECALIBRATION_DELAY_ADCCLOCKCYCLES        );
 8005706:	005b      	lsls	r3, r3, #1
    wait_loop_index = ((SystemCoreClock
 8005708:	60fb      	str	r3, [r7, #12]

    while(wait_loop_index != 0U)
 800570a:	e002      	b.n	8005712 <HAL_ADCEx_Calibration_Start+0x66>
    {
      wait_loop_index--;
 800570c:	68fb      	ldr	r3, [r7, #12]
 800570e:	3b01      	subs	r3, #1
 8005710:	60fb      	str	r3, [r7, #12]
    while(wait_loop_index != 0U)
 8005712:	68fb      	ldr	r3, [r7, #12]
 8005714:	2b00      	cmp	r3, #0
 8005716:	d1f9      	bne.n	800570c <HAL_ADCEx_Calibration_Start+0x60>
    }
    
    /* 2. Enable the ADC peripheral */
    ADC_Enable(hadc);
 8005718:	6878      	ldr	r0, [r7, #4]
 800571a:	f7ff ff3b 	bl	8005594 <ADC_Enable>
    
    /* 3. Resets ADC calibration registers */  
    SET_BIT(hadc->Instance->CR2, ADC_CR2_RSTCAL);
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	681b      	ldr	r3, [r3, #0]
 8005722:	689a      	ldr	r2, [r3, #8]
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	681b      	ldr	r3, [r3, #0]
 8005728:	f042 0208 	orr.w	r2, r2, #8
 800572c:	609a      	str	r2, [r3, #8]
    
    tickstart = HAL_GetTick();  
 800572e:	f7ff fb7f 	bl	8004e30 <HAL_GetTick>
 8005732:	6138      	str	r0, [r7, #16]

    /* Wait for calibration reset completion */
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_RSTCAL))
 8005734:	e014      	b.n	8005760 <HAL_ADCEx_Calibration_Start+0xb4>
    {
      if((HAL_GetTick() - tickstart) > ADC_CALIBRATION_TIMEOUT)
 8005736:	f7ff fb7b 	bl	8004e30 <HAL_GetTick>
 800573a:	4602      	mov	r2, r0
 800573c:	693b      	ldr	r3, [r7, #16]
 800573e:	1ad3      	subs	r3, r2, r3
 8005740:	2b0a      	cmp	r3, #10
 8005742:	d90d      	bls.n	8005760 <HAL_ADCEx_Calibration_Start+0xb4>
      {
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005748:	f023 0312 	bic.w	r3, r3, #18
 800574c:	f043 0210 	orr.w	r2, r3, #16
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	629a      	str	r2, [r3, #40]	; 0x28
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_INTERNAL);
        
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	2200      	movs	r2, #0
 8005758:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
        
        return HAL_ERROR;
 800575c:	2301      	movs	r3, #1
 800575e:	e03b      	b.n	80057d8 <HAL_ADCEx_Calibration_Start+0x12c>
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_RSTCAL))
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	681b      	ldr	r3, [r3, #0]
 8005764:	689b      	ldr	r3, [r3, #8]
 8005766:	f003 0308 	and.w	r3, r3, #8
 800576a:	2b00      	cmp	r3, #0
 800576c:	d1e3      	bne.n	8005736 <HAL_ADCEx_Calibration_Start+0x8a>
      }
    }
    
    
    /* 4. Start ADC calibration */
    SET_BIT(hadc->Instance->CR2, ADC_CR2_CAL);
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	681b      	ldr	r3, [r3, #0]
 8005772:	689a      	ldr	r2, [r3, #8]
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	681b      	ldr	r3, [r3, #0]
 8005778:	f042 0204 	orr.w	r2, r2, #4
 800577c:	609a      	str	r2, [r3, #8]
    
    tickstart = HAL_GetTick();  
 800577e:	f7ff fb57 	bl	8004e30 <HAL_GetTick>
 8005782:	6138      	str	r0, [r7, #16]

    /* Wait for calibration completion */
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_CAL))
 8005784:	e014      	b.n	80057b0 <HAL_ADCEx_Calibration_Start+0x104>
    {
      if((HAL_GetTick() - tickstart) > ADC_CALIBRATION_TIMEOUT)
 8005786:	f7ff fb53 	bl	8004e30 <HAL_GetTick>
 800578a:	4602      	mov	r2, r0
 800578c:	693b      	ldr	r3, [r7, #16]
 800578e:	1ad3      	subs	r3, r2, r3
 8005790:	2b0a      	cmp	r3, #10
 8005792:	d90d      	bls.n	80057b0 <HAL_ADCEx_Calibration_Start+0x104>
      {
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005798:	f023 0312 	bic.w	r3, r3, #18
 800579c:	f043 0210 	orr.w	r2, r3, #16
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	629a      	str	r2, [r3, #40]	; 0x28
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_INTERNAL);
        
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	2200      	movs	r2, #0
 80057a8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
        
        return HAL_ERROR;
 80057ac:	2301      	movs	r3, #1
 80057ae:	e013      	b.n	80057d8 <HAL_ADCEx_Calibration_Start+0x12c>
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_CAL))
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	681b      	ldr	r3, [r3, #0]
 80057b4:	689b      	ldr	r3, [r3, #8]
 80057b6:	f003 0304 	and.w	r3, r3, #4
 80057ba:	2b00      	cmp	r3, #0
 80057bc:	d1e3      	bne.n	8005786 <HAL_ADCEx_Calibration_Start+0xda>
      }
    }
    
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80057c2:	f023 0303 	bic.w	r3, r3, #3
 80057c6:	f043 0201 	orr.w	r2, r3, #1
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	629a      	str	r2, [r3, #40]	; 0x28
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	2200      	movs	r2, #0
 80057d2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 80057d6:	7dfb      	ldrb	r3, [r7, #23]
}
 80057d8:	4618      	mov	r0, r3
 80057da:	371c      	adds	r7, #28
 80057dc:	46bd      	mov	sp, r7
 80057de:	bd90      	pop	{r4, r7, pc}
 80057e0:	20000004 	.word	0x20000004

080057e4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80057e4:	b480      	push	{r7}
 80057e6:	b085      	sub	sp, #20
 80057e8:	af00      	add	r7, sp, #0
 80057ea:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	f003 0307 	and.w	r3, r3, #7
 80057f2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80057f4:	4b0c      	ldr	r3, [pc, #48]	; (8005828 <__NVIC_SetPriorityGrouping+0x44>)
 80057f6:	68db      	ldr	r3, [r3, #12]
 80057f8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80057fa:	68ba      	ldr	r2, [r7, #8]
 80057fc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8005800:	4013      	ands	r3, r2
 8005802:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8005804:	68fb      	ldr	r3, [r7, #12]
 8005806:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8005808:	68bb      	ldr	r3, [r7, #8]
 800580a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800580c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8005810:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005814:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8005816:	4a04      	ldr	r2, [pc, #16]	; (8005828 <__NVIC_SetPriorityGrouping+0x44>)
 8005818:	68bb      	ldr	r3, [r7, #8]
 800581a:	60d3      	str	r3, [r2, #12]
}
 800581c:	bf00      	nop
 800581e:	3714      	adds	r7, #20
 8005820:	46bd      	mov	sp, r7
 8005822:	bc80      	pop	{r7}
 8005824:	4770      	bx	lr
 8005826:	bf00      	nop
 8005828:	e000ed00 	.word	0xe000ed00

0800582c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800582c:	b480      	push	{r7}
 800582e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8005830:	4b04      	ldr	r3, [pc, #16]	; (8005844 <__NVIC_GetPriorityGrouping+0x18>)
 8005832:	68db      	ldr	r3, [r3, #12]
 8005834:	0a1b      	lsrs	r3, r3, #8
 8005836:	f003 0307 	and.w	r3, r3, #7
}
 800583a:	4618      	mov	r0, r3
 800583c:	46bd      	mov	sp, r7
 800583e:	bc80      	pop	{r7}
 8005840:	4770      	bx	lr
 8005842:	bf00      	nop
 8005844:	e000ed00 	.word	0xe000ed00

08005848 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005848:	b480      	push	{r7}
 800584a:	b083      	sub	sp, #12
 800584c:	af00      	add	r7, sp, #0
 800584e:	4603      	mov	r3, r0
 8005850:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005852:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005856:	2b00      	cmp	r3, #0
 8005858:	db0b      	blt.n	8005872 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800585a:	79fb      	ldrb	r3, [r7, #7]
 800585c:	f003 021f 	and.w	r2, r3, #31
 8005860:	4906      	ldr	r1, [pc, #24]	; (800587c <__NVIC_EnableIRQ+0x34>)
 8005862:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005866:	095b      	lsrs	r3, r3, #5
 8005868:	2001      	movs	r0, #1
 800586a:	fa00 f202 	lsl.w	r2, r0, r2
 800586e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8005872:	bf00      	nop
 8005874:	370c      	adds	r7, #12
 8005876:	46bd      	mov	sp, r7
 8005878:	bc80      	pop	{r7}
 800587a:	4770      	bx	lr
 800587c:	e000e100 	.word	0xe000e100

08005880 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8005880:	b480      	push	{r7}
 8005882:	b083      	sub	sp, #12
 8005884:	af00      	add	r7, sp, #0
 8005886:	4603      	mov	r3, r0
 8005888:	6039      	str	r1, [r7, #0]
 800588a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800588c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005890:	2b00      	cmp	r3, #0
 8005892:	db0a      	blt.n	80058aa <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005894:	683b      	ldr	r3, [r7, #0]
 8005896:	b2da      	uxtb	r2, r3
 8005898:	490c      	ldr	r1, [pc, #48]	; (80058cc <__NVIC_SetPriority+0x4c>)
 800589a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800589e:	0112      	lsls	r2, r2, #4
 80058a0:	b2d2      	uxtb	r2, r2
 80058a2:	440b      	add	r3, r1
 80058a4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80058a8:	e00a      	b.n	80058c0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80058aa:	683b      	ldr	r3, [r7, #0]
 80058ac:	b2da      	uxtb	r2, r3
 80058ae:	4908      	ldr	r1, [pc, #32]	; (80058d0 <__NVIC_SetPriority+0x50>)
 80058b0:	79fb      	ldrb	r3, [r7, #7]
 80058b2:	f003 030f 	and.w	r3, r3, #15
 80058b6:	3b04      	subs	r3, #4
 80058b8:	0112      	lsls	r2, r2, #4
 80058ba:	b2d2      	uxtb	r2, r2
 80058bc:	440b      	add	r3, r1
 80058be:	761a      	strb	r2, [r3, #24]
}
 80058c0:	bf00      	nop
 80058c2:	370c      	adds	r7, #12
 80058c4:	46bd      	mov	sp, r7
 80058c6:	bc80      	pop	{r7}
 80058c8:	4770      	bx	lr
 80058ca:	bf00      	nop
 80058cc:	e000e100 	.word	0xe000e100
 80058d0:	e000ed00 	.word	0xe000ed00

080058d4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80058d4:	b480      	push	{r7}
 80058d6:	b089      	sub	sp, #36	; 0x24
 80058d8:	af00      	add	r7, sp, #0
 80058da:	60f8      	str	r0, [r7, #12]
 80058dc:	60b9      	str	r1, [r7, #8]
 80058de:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80058e0:	68fb      	ldr	r3, [r7, #12]
 80058e2:	f003 0307 	and.w	r3, r3, #7
 80058e6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80058e8:	69fb      	ldr	r3, [r7, #28]
 80058ea:	f1c3 0307 	rsb	r3, r3, #7
 80058ee:	2b04      	cmp	r3, #4
 80058f0:	bf28      	it	cs
 80058f2:	2304      	movcs	r3, #4
 80058f4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80058f6:	69fb      	ldr	r3, [r7, #28]
 80058f8:	3304      	adds	r3, #4
 80058fa:	2b06      	cmp	r3, #6
 80058fc:	d902      	bls.n	8005904 <NVIC_EncodePriority+0x30>
 80058fe:	69fb      	ldr	r3, [r7, #28]
 8005900:	3b03      	subs	r3, #3
 8005902:	e000      	b.n	8005906 <NVIC_EncodePriority+0x32>
 8005904:	2300      	movs	r3, #0
 8005906:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005908:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800590c:	69bb      	ldr	r3, [r7, #24]
 800590e:	fa02 f303 	lsl.w	r3, r2, r3
 8005912:	43da      	mvns	r2, r3
 8005914:	68bb      	ldr	r3, [r7, #8]
 8005916:	401a      	ands	r2, r3
 8005918:	697b      	ldr	r3, [r7, #20]
 800591a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800591c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8005920:	697b      	ldr	r3, [r7, #20]
 8005922:	fa01 f303 	lsl.w	r3, r1, r3
 8005926:	43d9      	mvns	r1, r3
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800592c:	4313      	orrs	r3, r2
         );
}
 800592e:	4618      	mov	r0, r3
 8005930:	3724      	adds	r7, #36	; 0x24
 8005932:	46bd      	mov	sp, r7
 8005934:	bc80      	pop	{r7}
 8005936:	4770      	bx	lr

08005938 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8005938:	b580      	push	{r7, lr}
 800593a:	b082      	sub	sp, #8
 800593c:	af00      	add	r7, sp, #0
 800593e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	3b01      	subs	r3, #1
 8005944:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8005948:	d301      	bcc.n	800594e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800594a:	2301      	movs	r3, #1
 800594c:	e00f      	b.n	800596e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800594e:	4a0a      	ldr	r2, [pc, #40]	; (8005978 <SysTick_Config+0x40>)
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	3b01      	subs	r3, #1
 8005954:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8005956:	210f      	movs	r1, #15
 8005958:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800595c:	f7ff ff90 	bl	8005880 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8005960:	4b05      	ldr	r3, [pc, #20]	; (8005978 <SysTick_Config+0x40>)
 8005962:	2200      	movs	r2, #0
 8005964:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8005966:	4b04      	ldr	r3, [pc, #16]	; (8005978 <SysTick_Config+0x40>)
 8005968:	2207      	movs	r2, #7
 800596a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800596c:	2300      	movs	r3, #0
}
 800596e:	4618      	mov	r0, r3
 8005970:	3708      	adds	r7, #8
 8005972:	46bd      	mov	sp, r7
 8005974:	bd80      	pop	{r7, pc}
 8005976:	bf00      	nop
 8005978:	e000e010 	.word	0xe000e010

0800597c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800597c:	b580      	push	{r7, lr}
 800597e:	b082      	sub	sp, #8
 8005980:	af00      	add	r7, sp, #0
 8005982:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8005984:	6878      	ldr	r0, [r7, #4]
 8005986:	f7ff ff2d 	bl	80057e4 <__NVIC_SetPriorityGrouping>
}
 800598a:	bf00      	nop
 800598c:	3708      	adds	r7, #8
 800598e:	46bd      	mov	sp, r7
 8005990:	bd80      	pop	{r7, pc}

08005992 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8005992:	b580      	push	{r7, lr}
 8005994:	b086      	sub	sp, #24
 8005996:	af00      	add	r7, sp, #0
 8005998:	4603      	mov	r3, r0
 800599a:	60b9      	str	r1, [r7, #8]
 800599c:	607a      	str	r2, [r7, #4]
 800599e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80059a0:	2300      	movs	r3, #0
 80059a2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80059a4:	f7ff ff42 	bl	800582c <__NVIC_GetPriorityGrouping>
 80059a8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80059aa:	687a      	ldr	r2, [r7, #4]
 80059ac:	68b9      	ldr	r1, [r7, #8]
 80059ae:	6978      	ldr	r0, [r7, #20]
 80059b0:	f7ff ff90 	bl	80058d4 <NVIC_EncodePriority>
 80059b4:	4602      	mov	r2, r0
 80059b6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80059ba:	4611      	mov	r1, r2
 80059bc:	4618      	mov	r0, r3
 80059be:	f7ff ff5f 	bl	8005880 <__NVIC_SetPriority>
}
 80059c2:	bf00      	nop
 80059c4:	3718      	adds	r7, #24
 80059c6:	46bd      	mov	sp, r7
 80059c8:	bd80      	pop	{r7, pc}

080059ca <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80059ca:	b580      	push	{r7, lr}
 80059cc:	b082      	sub	sp, #8
 80059ce:	af00      	add	r7, sp, #0
 80059d0:	4603      	mov	r3, r0
 80059d2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80059d4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80059d8:	4618      	mov	r0, r3
 80059da:	f7ff ff35 	bl	8005848 <__NVIC_EnableIRQ>
}
 80059de:	bf00      	nop
 80059e0:	3708      	adds	r7, #8
 80059e2:	46bd      	mov	sp, r7
 80059e4:	bd80      	pop	{r7, pc}

080059e6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80059e6:	b580      	push	{r7, lr}
 80059e8:	b082      	sub	sp, #8
 80059ea:	af00      	add	r7, sp, #0
 80059ec:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80059ee:	6878      	ldr	r0, [r7, #4]
 80059f0:	f7ff ffa2 	bl	8005938 <SysTick_Config>
 80059f4:	4603      	mov	r3, r0
}
 80059f6:	4618      	mov	r0, r3
 80059f8:	3708      	adds	r7, #8
 80059fa:	46bd      	mov	sp, r7
 80059fc:	bd80      	pop	{r7, pc}
	...

08005a00 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8005a00:	b480      	push	{r7}
 8005a02:	b085      	sub	sp, #20
 8005a04:	af00      	add	r7, sp, #0
 8005a06:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8005a08:	2300      	movs	r3, #0
 8005a0a:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	2b00      	cmp	r3, #0
 8005a10:	d101      	bne.n	8005a16 <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8005a12:	2301      	movs	r3, #1
 8005a14:	e043      	b.n	8005a9e <HAL_DMA_Init+0x9e>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	681b      	ldr	r3, [r3, #0]
 8005a1a:	461a      	mov	r2, r3
 8005a1c:	4b22      	ldr	r3, [pc, #136]	; (8005aa8 <HAL_DMA_Init+0xa8>)
 8005a1e:	4413      	add	r3, r2
 8005a20:	4a22      	ldr	r2, [pc, #136]	; (8005aac <HAL_DMA_Init+0xac>)
 8005a22:	fba2 2303 	umull	r2, r3, r2, r3
 8005a26:	091b      	lsrs	r3, r3, #4
 8005a28:	009a      	lsls	r2, r3, #2
 8005a2a:	687b      	ldr	r3, [r7, #4]
 8005a2c:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	4a1f      	ldr	r2, [pc, #124]	; (8005ab0 <HAL_DMA_Init+0xb0>)
 8005a32:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	2202      	movs	r2, #2
 8005a38:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	681b      	ldr	r3, [r3, #0]
 8005a40:	681b      	ldr	r3, [r3, #0]
 8005a42:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8005a44:	68fb      	ldr	r3, [r7, #12]
 8005a46:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8005a4a:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8005a4e:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8005a58:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	68db      	ldr	r3, [r3, #12]
 8005a5e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005a64:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	695b      	ldr	r3, [r3, #20]
 8005a6a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005a70:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8005a72:	687b      	ldr	r3, [r7, #4]
 8005a74:	69db      	ldr	r3, [r3, #28]
 8005a76:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8005a78:	68fa      	ldr	r2, [r7, #12]
 8005a7a:	4313      	orrs	r3, r2
 8005a7c:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	681b      	ldr	r3, [r3, #0]
 8005a82:	68fa      	ldr	r2, [r7, #12]
 8005a84:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	2200      	movs	r2, #0
 8005a8a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8005a8c:	687b      	ldr	r3, [r7, #4]
 8005a8e:	2201      	movs	r2, #1
 8005a90:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	2200      	movs	r2, #0
 8005a98:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8005a9c:	2300      	movs	r3, #0
}
 8005a9e:	4618      	mov	r0, r3
 8005aa0:	3714      	adds	r7, #20
 8005aa2:	46bd      	mov	sp, r7
 8005aa4:	bc80      	pop	{r7}
 8005aa6:	4770      	bx	lr
 8005aa8:	bffdfff8 	.word	0xbffdfff8
 8005aac:	cccccccd 	.word	0xcccccccd
 8005ab0:	40020000 	.word	0x40020000

08005ab4 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8005ab4:	b580      	push	{r7, lr}
 8005ab6:	b086      	sub	sp, #24
 8005ab8:	af00      	add	r7, sp, #0
 8005aba:	60f8      	str	r0, [r7, #12]
 8005abc:	60b9      	str	r1, [r7, #8]
 8005abe:	607a      	str	r2, [r7, #4]
 8005ac0:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005ac2:	2300      	movs	r3, #0
 8005ac4:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8005ac6:	68fb      	ldr	r3, [r7, #12]
 8005ac8:	f893 3020 	ldrb.w	r3, [r3, #32]
 8005acc:	2b01      	cmp	r3, #1
 8005ace:	d101      	bne.n	8005ad4 <HAL_DMA_Start_IT+0x20>
 8005ad0:	2302      	movs	r3, #2
 8005ad2:	e04a      	b.n	8005b6a <HAL_DMA_Start_IT+0xb6>
 8005ad4:	68fb      	ldr	r3, [r7, #12]
 8005ad6:	2201      	movs	r2, #1
 8005ad8:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8005adc:	68fb      	ldr	r3, [r7, #12]
 8005ade:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8005ae2:	2b01      	cmp	r3, #1
 8005ae4:	d13a      	bne.n	8005b5c <HAL_DMA_Start_IT+0xa8>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8005ae6:	68fb      	ldr	r3, [r7, #12]
 8005ae8:	2202      	movs	r2, #2
 8005aea:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005aee:	68fb      	ldr	r3, [r7, #12]
 8005af0:	2200      	movs	r2, #0
 8005af2:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8005af4:	68fb      	ldr	r3, [r7, #12]
 8005af6:	681b      	ldr	r3, [r3, #0]
 8005af8:	681a      	ldr	r2, [r3, #0]
 8005afa:	68fb      	ldr	r3, [r7, #12]
 8005afc:	681b      	ldr	r3, [r3, #0]
 8005afe:	f022 0201 	bic.w	r2, r2, #1
 8005b02:	601a      	str	r2, [r3, #0]
    
    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8005b04:	683b      	ldr	r3, [r7, #0]
 8005b06:	687a      	ldr	r2, [r7, #4]
 8005b08:	68b9      	ldr	r1, [r7, #8]
 8005b0a:	68f8      	ldr	r0, [r7, #12]
 8005b0c:	f000 f9ae 	bl	8005e6c <DMA_SetConfig>
    
    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback)
 8005b10:	68fb      	ldr	r3, [r7, #12]
 8005b12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005b14:	2b00      	cmp	r3, #0
 8005b16:	d008      	beq.n	8005b2a <HAL_DMA_Start_IT+0x76>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8005b18:	68fb      	ldr	r3, [r7, #12]
 8005b1a:	681b      	ldr	r3, [r3, #0]
 8005b1c:	681a      	ldr	r2, [r3, #0]
 8005b1e:	68fb      	ldr	r3, [r7, #12]
 8005b20:	681b      	ldr	r3, [r3, #0]
 8005b22:	f042 020e 	orr.w	r2, r2, #14
 8005b26:	601a      	str	r2, [r3, #0]
 8005b28:	e00f      	b.n	8005b4a <HAL_DMA_Start_IT+0x96>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8005b2a:	68fb      	ldr	r3, [r7, #12]
 8005b2c:	681b      	ldr	r3, [r3, #0]
 8005b2e:	681a      	ldr	r2, [r3, #0]
 8005b30:	68fb      	ldr	r3, [r7, #12]
 8005b32:	681b      	ldr	r3, [r3, #0]
 8005b34:	f022 0204 	bic.w	r2, r2, #4
 8005b38:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8005b3a:	68fb      	ldr	r3, [r7, #12]
 8005b3c:	681b      	ldr	r3, [r3, #0]
 8005b3e:	681a      	ldr	r2, [r3, #0]
 8005b40:	68fb      	ldr	r3, [r7, #12]
 8005b42:	681b      	ldr	r3, [r3, #0]
 8005b44:	f042 020a 	orr.w	r2, r2, #10
 8005b48:	601a      	str	r2, [r3, #0]
    }
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8005b4a:	68fb      	ldr	r3, [r7, #12]
 8005b4c:	681b      	ldr	r3, [r3, #0]
 8005b4e:	681a      	ldr	r2, [r3, #0]
 8005b50:	68fb      	ldr	r3, [r7, #12]
 8005b52:	681b      	ldr	r3, [r3, #0]
 8005b54:	f042 0201 	orr.w	r2, r2, #1
 8005b58:	601a      	str	r2, [r3, #0]
 8005b5a:	e005      	b.n	8005b68 <HAL_DMA_Start_IT+0xb4>
  }
  else
  {      
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8005b5c:	68fb      	ldr	r3, [r7, #12]
 8005b5e:	2200      	movs	r2, #0
 8005b60:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 8005b64:	2302      	movs	r3, #2
 8005b66:	75fb      	strb	r3, [r7, #23]
  }    
  return status;
 8005b68:	7dfb      	ldrb	r3, [r7, #23]
}
 8005b6a:	4618      	mov	r0, r3
 8005b6c:	3718      	adds	r7, #24
 8005b6e:	46bd      	mov	sp, r7
 8005b70:	bd80      	pop	{r7, pc}
	...

08005b74 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8005b74:	b580      	push	{r7, lr}
 8005b76:	b084      	sub	sp, #16
 8005b78:	af00      	add	r7, sp, #0
 8005b7a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005b7c:	2300      	movs	r3, #0
 8005b7e:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8005b86:	2b02      	cmp	r3, #2
 8005b88:	d005      	beq.n	8005b96 <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8005b8a:	687b      	ldr	r3, [r7, #4]
 8005b8c:	2204      	movs	r2, #4
 8005b8e:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8005b90:	2301      	movs	r3, #1
 8005b92:	73fb      	strb	r3, [r7, #15]
 8005b94:	e051      	b.n	8005c3a <HAL_DMA_Abort_IT+0xc6>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	681b      	ldr	r3, [r3, #0]
 8005b9a:	681a      	ldr	r2, [r3, #0]
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	681b      	ldr	r3, [r3, #0]
 8005ba0:	f022 020e 	bic.w	r2, r2, #14
 8005ba4:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	681b      	ldr	r3, [r3, #0]
 8005baa:	681a      	ldr	r2, [r3, #0]
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	681b      	ldr	r3, [r3, #0]
 8005bb0:	f022 0201 	bic.w	r2, r2, #1
 8005bb4:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8005bb6:	687b      	ldr	r3, [r7, #4]
 8005bb8:	681b      	ldr	r3, [r3, #0]
 8005bba:	4a22      	ldr	r2, [pc, #136]	; (8005c44 <HAL_DMA_Abort_IT+0xd0>)
 8005bbc:	4293      	cmp	r3, r2
 8005bbe:	d029      	beq.n	8005c14 <HAL_DMA_Abort_IT+0xa0>
 8005bc0:	687b      	ldr	r3, [r7, #4]
 8005bc2:	681b      	ldr	r3, [r3, #0]
 8005bc4:	4a20      	ldr	r2, [pc, #128]	; (8005c48 <HAL_DMA_Abort_IT+0xd4>)
 8005bc6:	4293      	cmp	r3, r2
 8005bc8:	d022      	beq.n	8005c10 <HAL_DMA_Abort_IT+0x9c>
 8005bca:	687b      	ldr	r3, [r7, #4]
 8005bcc:	681b      	ldr	r3, [r3, #0]
 8005bce:	4a1f      	ldr	r2, [pc, #124]	; (8005c4c <HAL_DMA_Abort_IT+0xd8>)
 8005bd0:	4293      	cmp	r3, r2
 8005bd2:	d01a      	beq.n	8005c0a <HAL_DMA_Abort_IT+0x96>
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	681b      	ldr	r3, [r3, #0]
 8005bd8:	4a1d      	ldr	r2, [pc, #116]	; (8005c50 <HAL_DMA_Abort_IT+0xdc>)
 8005bda:	4293      	cmp	r3, r2
 8005bdc:	d012      	beq.n	8005c04 <HAL_DMA_Abort_IT+0x90>
 8005bde:	687b      	ldr	r3, [r7, #4]
 8005be0:	681b      	ldr	r3, [r3, #0]
 8005be2:	4a1c      	ldr	r2, [pc, #112]	; (8005c54 <HAL_DMA_Abort_IT+0xe0>)
 8005be4:	4293      	cmp	r3, r2
 8005be6:	d00a      	beq.n	8005bfe <HAL_DMA_Abort_IT+0x8a>
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	681b      	ldr	r3, [r3, #0]
 8005bec:	4a1a      	ldr	r2, [pc, #104]	; (8005c58 <HAL_DMA_Abort_IT+0xe4>)
 8005bee:	4293      	cmp	r3, r2
 8005bf0:	d102      	bne.n	8005bf8 <HAL_DMA_Abort_IT+0x84>
 8005bf2:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8005bf6:	e00e      	b.n	8005c16 <HAL_DMA_Abort_IT+0xa2>
 8005bf8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8005bfc:	e00b      	b.n	8005c16 <HAL_DMA_Abort_IT+0xa2>
 8005bfe:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8005c02:	e008      	b.n	8005c16 <HAL_DMA_Abort_IT+0xa2>
 8005c04:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005c08:	e005      	b.n	8005c16 <HAL_DMA_Abort_IT+0xa2>
 8005c0a:	f44f 7380 	mov.w	r3, #256	; 0x100
 8005c0e:	e002      	b.n	8005c16 <HAL_DMA_Abort_IT+0xa2>
 8005c10:	2310      	movs	r3, #16
 8005c12:	e000      	b.n	8005c16 <HAL_DMA_Abort_IT+0xa2>
 8005c14:	2301      	movs	r3, #1
 8005c16:	4a11      	ldr	r2, [pc, #68]	; (8005c5c <HAL_DMA_Abort_IT+0xe8>)
 8005c18:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8005c1a:	687b      	ldr	r3, [r7, #4]
 8005c1c:	2201      	movs	r2, #1
 8005c1e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005c22:	687b      	ldr	r3, [r7, #4]
 8005c24:	2200      	movs	r2, #0
 8005c26:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8005c2a:	687b      	ldr	r3, [r7, #4]
 8005c2c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005c2e:	2b00      	cmp	r3, #0
 8005c30:	d003      	beq.n	8005c3a <HAL_DMA_Abort_IT+0xc6>
    {
      hdma->XferAbortCallback(hdma);
 8005c32:	687b      	ldr	r3, [r7, #4]
 8005c34:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005c36:	6878      	ldr	r0, [r7, #4]
 8005c38:	4798      	blx	r3
    } 
  }
  return status;
 8005c3a:	7bfb      	ldrb	r3, [r7, #15]
}
 8005c3c:	4618      	mov	r0, r3
 8005c3e:	3710      	adds	r7, #16
 8005c40:	46bd      	mov	sp, r7
 8005c42:	bd80      	pop	{r7, pc}
 8005c44:	40020008 	.word	0x40020008
 8005c48:	4002001c 	.word	0x4002001c
 8005c4c:	40020030 	.word	0x40020030
 8005c50:	40020044 	.word	0x40020044
 8005c54:	40020058 	.word	0x40020058
 8005c58:	4002006c 	.word	0x4002006c
 8005c5c:	40020000 	.word	0x40020000

08005c60 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8005c60:	b580      	push	{r7, lr}
 8005c62:	b084      	sub	sp, #16
 8005c64:	af00      	add	r7, sp, #0
 8005c66:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8005c68:	687b      	ldr	r3, [r7, #4]
 8005c6a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005c6c:	681b      	ldr	r3, [r3, #0]
 8005c6e:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8005c70:	687b      	ldr	r3, [r7, #4]
 8005c72:	681b      	ldr	r3, [r3, #0]
 8005c74:	681b      	ldr	r3, [r3, #0]
 8005c76:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c7c:	2204      	movs	r2, #4
 8005c7e:	409a      	lsls	r2, r3
 8005c80:	68fb      	ldr	r3, [r7, #12]
 8005c82:	4013      	ands	r3, r2
 8005c84:	2b00      	cmp	r3, #0
 8005c86:	d04f      	beq.n	8005d28 <HAL_DMA_IRQHandler+0xc8>
 8005c88:	68bb      	ldr	r3, [r7, #8]
 8005c8a:	f003 0304 	and.w	r3, r3, #4
 8005c8e:	2b00      	cmp	r3, #0
 8005c90:	d04a      	beq.n	8005d28 <HAL_DMA_IRQHandler+0xc8>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8005c92:	687b      	ldr	r3, [r7, #4]
 8005c94:	681b      	ldr	r3, [r3, #0]
 8005c96:	681b      	ldr	r3, [r3, #0]
 8005c98:	f003 0320 	and.w	r3, r3, #32
 8005c9c:	2b00      	cmp	r3, #0
 8005c9e:	d107      	bne.n	8005cb0 <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	681b      	ldr	r3, [r3, #0]
 8005ca4:	681a      	ldr	r2, [r3, #0]
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	681b      	ldr	r3, [r3, #0]
 8005caa:	f022 0204 	bic.w	r2, r2, #4
 8005cae:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	681b      	ldr	r3, [r3, #0]
 8005cb4:	4a66      	ldr	r2, [pc, #408]	; (8005e50 <HAL_DMA_IRQHandler+0x1f0>)
 8005cb6:	4293      	cmp	r3, r2
 8005cb8:	d029      	beq.n	8005d0e <HAL_DMA_IRQHandler+0xae>
 8005cba:	687b      	ldr	r3, [r7, #4]
 8005cbc:	681b      	ldr	r3, [r3, #0]
 8005cbe:	4a65      	ldr	r2, [pc, #404]	; (8005e54 <HAL_DMA_IRQHandler+0x1f4>)
 8005cc0:	4293      	cmp	r3, r2
 8005cc2:	d022      	beq.n	8005d0a <HAL_DMA_IRQHandler+0xaa>
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	681b      	ldr	r3, [r3, #0]
 8005cc8:	4a63      	ldr	r2, [pc, #396]	; (8005e58 <HAL_DMA_IRQHandler+0x1f8>)
 8005cca:	4293      	cmp	r3, r2
 8005ccc:	d01a      	beq.n	8005d04 <HAL_DMA_IRQHandler+0xa4>
 8005cce:	687b      	ldr	r3, [r7, #4]
 8005cd0:	681b      	ldr	r3, [r3, #0]
 8005cd2:	4a62      	ldr	r2, [pc, #392]	; (8005e5c <HAL_DMA_IRQHandler+0x1fc>)
 8005cd4:	4293      	cmp	r3, r2
 8005cd6:	d012      	beq.n	8005cfe <HAL_DMA_IRQHandler+0x9e>
 8005cd8:	687b      	ldr	r3, [r7, #4]
 8005cda:	681b      	ldr	r3, [r3, #0]
 8005cdc:	4a60      	ldr	r2, [pc, #384]	; (8005e60 <HAL_DMA_IRQHandler+0x200>)
 8005cde:	4293      	cmp	r3, r2
 8005ce0:	d00a      	beq.n	8005cf8 <HAL_DMA_IRQHandler+0x98>
 8005ce2:	687b      	ldr	r3, [r7, #4]
 8005ce4:	681b      	ldr	r3, [r3, #0]
 8005ce6:	4a5f      	ldr	r2, [pc, #380]	; (8005e64 <HAL_DMA_IRQHandler+0x204>)
 8005ce8:	4293      	cmp	r3, r2
 8005cea:	d102      	bne.n	8005cf2 <HAL_DMA_IRQHandler+0x92>
 8005cec:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8005cf0:	e00e      	b.n	8005d10 <HAL_DMA_IRQHandler+0xb0>
 8005cf2:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8005cf6:	e00b      	b.n	8005d10 <HAL_DMA_IRQHandler+0xb0>
 8005cf8:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8005cfc:	e008      	b.n	8005d10 <HAL_DMA_IRQHandler+0xb0>
 8005cfe:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8005d02:	e005      	b.n	8005d10 <HAL_DMA_IRQHandler+0xb0>
 8005d04:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005d08:	e002      	b.n	8005d10 <HAL_DMA_IRQHandler+0xb0>
 8005d0a:	2340      	movs	r3, #64	; 0x40
 8005d0c:	e000      	b.n	8005d10 <HAL_DMA_IRQHandler+0xb0>
 8005d0e:	2304      	movs	r3, #4
 8005d10:	4a55      	ldr	r2, [pc, #340]	; (8005e68 <HAL_DMA_IRQHandler+0x208>)
 8005d12:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005d18:	2b00      	cmp	r3, #0
 8005d1a:	f000 8094 	beq.w	8005e46 <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8005d1e:	687b      	ldr	r3, [r7, #4]
 8005d20:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005d22:	6878      	ldr	r0, [r7, #4]
 8005d24:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 8005d26:	e08e      	b.n	8005e46 <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d2c:	2202      	movs	r2, #2
 8005d2e:	409a      	lsls	r2, r3
 8005d30:	68fb      	ldr	r3, [r7, #12]
 8005d32:	4013      	ands	r3, r2
 8005d34:	2b00      	cmp	r3, #0
 8005d36:	d056      	beq.n	8005de6 <HAL_DMA_IRQHandler+0x186>
 8005d38:	68bb      	ldr	r3, [r7, #8]
 8005d3a:	f003 0302 	and.w	r3, r3, #2
 8005d3e:	2b00      	cmp	r3, #0
 8005d40:	d051      	beq.n	8005de6 <HAL_DMA_IRQHandler+0x186>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8005d42:	687b      	ldr	r3, [r7, #4]
 8005d44:	681b      	ldr	r3, [r3, #0]
 8005d46:	681b      	ldr	r3, [r3, #0]
 8005d48:	f003 0320 	and.w	r3, r3, #32
 8005d4c:	2b00      	cmp	r3, #0
 8005d4e:	d10b      	bne.n	8005d68 <HAL_DMA_IRQHandler+0x108>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	681b      	ldr	r3, [r3, #0]
 8005d54:	681a      	ldr	r2, [r3, #0]
 8005d56:	687b      	ldr	r3, [r7, #4]
 8005d58:	681b      	ldr	r3, [r3, #0]
 8005d5a:	f022 020a 	bic.w	r2, r2, #10
 8005d5e:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	2201      	movs	r2, #1
 8005d64:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8005d68:	687b      	ldr	r3, [r7, #4]
 8005d6a:	681b      	ldr	r3, [r3, #0]
 8005d6c:	4a38      	ldr	r2, [pc, #224]	; (8005e50 <HAL_DMA_IRQHandler+0x1f0>)
 8005d6e:	4293      	cmp	r3, r2
 8005d70:	d029      	beq.n	8005dc6 <HAL_DMA_IRQHandler+0x166>
 8005d72:	687b      	ldr	r3, [r7, #4]
 8005d74:	681b      	ldr	r3, [r3, #0]
 8005d76:	4a37      	ldr	r2, [pc, #220]	; (8005e54 <HAL_DMA_IRQHandler+0x1f4>)
 8005d78:	4293      	cmp	r3, r2
 8005d7a:	d022      	beq.n	8005dc2 <HAL_DMA_IRQHandler+0x162>
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	681b      	ldr	r3, [r3, #0]
 8005d80:	4a35      	ldr	r2, [pc, #212]	; (8005e58 <HAL_DMA_IRQHandler+0x1f8>)
 8005d82:	4293      	cmp	r3, r2
 8005d84:	d01a      	beq.n	8005dbc <HAL_DMA_IRQHandler+0x15c>
 8005d86:	687b      	ldr	r3, [r7, #4]
 8005d88:	681b      	ldr	r3, [r3, #0]
 8005d8a:	4a34      	ldr	r2, [pc, #208]	; (8005e5c <HAL_DMA_IRQHandler+0x1fc>)
 8005d8c:	4293      	cmp	r3, r2
 8005d8e:	d012      	beq.n	8005db6 <HAL_DMA_IRQHandler+0x156>
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	681b      	ldr	r3, [r3, #0]
 8005d94:	4a32      	ldr	r2, [pc, #200]	; (8005e60 <HAL_DMA_IRQHandler+0x200>)
 8005d96:	4293      	cmp	r3, r2
 8005d98:	d00a      	beq.n	8005db0 <HAL_DMA_IRQHandler+0x150>
 8005d9a:	687b      	ldr	r3, [r7, #4]
 8005d9c:	681b      	ldr	r3, [r3, #0]
 8005d9e:	4a31      	ldr	r2, [pc, #196]	; (8005e64 <HAL_DMA_IRQHandler+0x204>)
 8005da0:	4293      	cmp	r3, r2
 8005da2:	d102      	bne.n	8005daa <HAL_DMA_IRQHandler+0x14a>
 8005da4:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8005da8:	e00e      	b.n	8005dc8 <HAL_DMA_IRQHandler+0x168>
 8005daa:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8005dae:	e00b      	b.n	8005dc8 <HAL_DMA_IRQHandler+0x168>
 8005db0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8005db4:	e008      	b.n	8005dc8 <HAL_DMA_IRQHandler+0x168>
 8005db6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8005dba:	e005      	b.n	8005dc8 <HAL_DMA_IRQHandler+0x168>
 8005dbc:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005dc0:	e002      	b.n	8005dc8 <HAL_DMA_IRQHandler+0x168>
 8005dc2:	2320      	movs	r3, #32
 8005dc4:	e000      	b.n	8005dc8 <HAL_DMA_IRQHandler+0x168>
 8005dc6:	2302      	movs	r3, #2
 8005dc8:	4a27      	ldr	r2, [pc, #156]	; (8005e68 <HAL_DMA_IRQHandler+0x208>)
 8005dca:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	2200      	movs	r2, #0
 8005dd0:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 8005dd4:	687b      	ldr	r3, [r7, #4]
 8005dd6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005dd8:	2b00      	cmp	r3, #0
 8005dda:	d034      	beq.n	8005e46 <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005de0:	6878      	ldr	r0, [r7, #4]
 8005de2:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8005de4:	e02f      	b.n	8005e46 <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8005de6:	687b      	ldr	r3, [r7, #4]
 8005de8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005dea:	2208      	movs	r2, #8
 8005dec:	409a      	lsls	r2, r3
 8005dee:	68fb      	ldr	r3, [r7, #12]
 8005df0:	4013      	ands	r3, r2
 8005df2:	2b00      	cmp	r3, #0
 8005df4:	d028      	beq.n	8005e48 <HAL_DMA_IRQHandler+0x1e8>
 8005df6:	68bb      	ldr	r3, [r7, #8]
 8005df8:	f003 0308 	and.w	r3, r3, #8
 8005dfc:	2b00      	cmp	r3, #0
 8005dfe:	d023      	beq.n	8005e48 <HAL_DMA_IRQHandler+0x1e8>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8005e00:	687b      	ldr	r3, [r7, #4]
 8005e02:	681b      	ldr	r3, [r3, #0]
 8005e04:	681a      	ldr	r2, [r3, #0]
 8005e06:	687b      	ldr	r3, [r7, #4]
 8005e08:	681b      	ldr	r3, [r3, #0]
 8005e0a:	f022 020e 	bic.w	r2, r2, #14
 8005e0e:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8005e10:	687b      	ldr	r3, [r7, #4]
 8005e12:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005e18:	2101      	movs	r1, #1
 8005e1a:	fa01 f202 	lsl.w	r2, r1, r2
 8005e1e:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8005e20:	687b      	ldr	r3, [r7, #4]
 8005e22:	2201      	movs	r2, #1
 8005e24:	639a      	str	r2, [r3, #56]	; 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8005e26:	687b      	ldr	r3, [r7, #4]
 8005e28:	2201      	movs	r2, #1
 8005e2a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005e2e:	687b      	ldr	r3, [r7, #4]
 8005e30:	2200      	movs	r2, #0
 8005e32:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 8005e36:	687b      	ldr	r3, [r7, #4]
 8005e38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005e3a:	2b00      	cmp	r3, #0
 8005e3c:	d004      	beq.n	8005e48 <HAL_DMA_IRQHandler+0x1e8>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8005e3e:	687b      	ldr	r3, [r7, #4]
 8005e40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005e42:	6878      	ldr	r0, [r7, #4]
 8005e44:	4798      	blx	r3
    }
  }
  return;
 8005e46:	bf00      	nop
 8005e48:	bf00      	nop
}
 8005e4a:	3710      	adds	r7, #16
 8005e4c:	46bd      	mov	sp, r7
 8005e4e:	bd80      	pop	{r7, pc}
 8005e50:	40020008 	.word	0x40020008
 8005e54:	4002001c 	.word	0x4002001c
 8005e58:	40020030 	.word	0x40020030
 8005e5c:	40020044 	.word	0x40020044
 8005e60:	40020058 	.word	0x40020058
 8005e64:	4002006c 	.word	0x4002006c
 8005e68:	40020000 	.word	0x40020000

08005e6c <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8005e6c:	b480      	push	{r7}
 8005e6e:	b085      	sub	sp, #20
 8005e70:	af00      	add	r7, sp, #0
 8005e72:	60f8      	str	r0, [r7, #12]
 8005e74:	60b9      	str	r1, [r7, #8]
 8005e76:	607a      	str	r2, [r7, #4]
 8005e78:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8005e7a:	68fb      	ldr	r3, [r7, #12]
 8005e7c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005e7e:	68fb      	ldr	r3, [r7, #12]
 8005e80:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005e82:	2101      	movs	r1, #1
 8005e84:	fa01 f202 	lsl.w	r2, r1, r2
 8005e88:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8005e8a:	68fb      	ldr	r3, [r7, #12]
 8005e8c:	681b      	ldr	r3, [r3, #0]
 8005e8e:	683a      	ldr	r2, [r7, #0]
 8005e90:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8005e92:	68fb      	ldr	r3, [r7, #12]
 8005e94:	685b      	ldr	r3, [r3, #4]
 8005e96:	2b10      	cmp	r3, #16
 8005e98:	d108      	bne.n	8005eac <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8005e9a:	68fb      	ldr	r3, [r7, #12]
 8005e9c:	681b      	ldr	r3, [r3, #0]
 8005e9e:	687a      	ldr	r2, [r7, #4]
 8005ea0:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8005ea2:	68fb      	ldr	r3, [r7, #12]
 8005ea4:	681b      	ldr	r3, [r3, #0]
 8005ea6:	68ba      	ldr	r2, [r7, #8]
 8005ea8:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8005eaa:	e007      	b.n	8005ebc <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 8005eac:	68fb      	ldr	r3, [r7, #12]
 8005eae:	681b      	ldr	r3, [r3, #0]
 8005eb0:	68ba      	ldr	r2, [r7, #8]
 8005eb2:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8005eb4:	68fb      	ldr	r3, [r7, #12]
 8005eb6:	681b      	ldr	r3, [r3, #0]
 8005eb8:	687a      	ldr	r2, [r7, #4]
 8005eba:	60da      	str	r2, [r3, #12]
}
 8005ebc:	bf00      	nop
 8005ebe:	3714      	adds	r7, #20
 8005ec0:	46bd      	mov	sp, r7
 8005ec2:	bc80      	pop	{r7}
 8005ec4:	4770      	bx	lr
	...

08005ec8 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8005ec8:	b480      	push	{r7}
 8005eca:	b08b      	sub	sp, #44	; 0x2c
 8005ecc:	af00      	add	r7, sp, #0
 8005ece:	6078      	str	r0, [r7, #4]
 8005ed0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8005ed2:	2300      	movs	r3, #0
 8005ed4:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8005ed6:	2300      	movs	r3, #0
 8005ed8:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8005eda:	e169      	b.n	80061b0 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8005edc:	2201      	movs	r2, #1
 8005ede:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ee0:	fa02 f303 	lsl.w	r3, r2, r3
 8005ee4:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8005ee6:	683b      	ldr	r3, [r7, #0]
 8005ee8:	681b      	ldr	r3, [r3, #0]
 8005eea:	69fa      	ldr	r2, [r7, #28]
 8005eec:	4013      	ands	r3, r2
 8005eee:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8005ef0:	69ba      	ldr	r2, [r7, #24]
 8005ef2:	69fb      	ldr	r3, [r7, #28]
 8005ef4:	429a      	cmp	r2, r3
 8005ef6:	f040 8158 	bne.w	80061aa <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8005efa:	683b      	ldr	r3, [r7, #0]
 8005efc:	685b      	ldr	r3, [r3, #4]
 8005efe:	4a9a      	ldr	r2, [pc, #616]	; (8006168 <HAL_GPIO_Init+0x2a0>)
 8005f00:	4293      	cmp	r3, r2
 8005f02:	d05e      	beq.n	8005fc2 <HAL_GPIO_Init+0xfa>
 8005f04:	4a98      	ldr	r2, [pc, #608]	; (8006168 <HAL_GPIO_Init+0x2a0>)
 8005f06:	4293      	cmp	r3, r2
 8005f08:	d875      	bhi.n	8005ff6 <HAL_GPIO_Init+0x12e>
 8005f0a:	4a98      	ldr	r2, [pc, #608]	; (800616c <HAL_GPIO_Init+0x2a4>)
 8005f0c:	4293      	cmp	r3, r2
 8005f0e:	d058      	beq.n	8005fc2 <HAL_GPIO_Init+0xfa>
 8005f10:	4a96      	ldr	r2, [pc, #600]	; (800616c <HAL_GPIO_Init+0x2a4>)
 8005f12:	4293      	cmp	r3, r2
 8005f14:	d86f      	bhi.n	8005ff6 <HAL_GPIO_Init+0x12e>
 8005f16:	4a96      	ldr	r2, [pc, #600]	; (8006170 <HAL_GPIO_Init+0x2a8>)
 8005f18:	4293      	cmp	r3, r2
 8005f1a:	d052      	beq.n	8005fc2 <HAL_GPIO_Init+0xfa>
 8005f1c:	4a94      	ldr	r2, [pc, #592]	; (8006170 <HAL_GPIO_Init+0x2a8>)
 8005f1e:	4293      	cmp	r3, r2
 8005f20:	d869      	bhi.n	8005ff6 <HAL_GPIO_Init+0x12e>
 8005f22:	4a94      	ldr	r2, [pc, #592]	; (8006174 <HAL_GPIO_Init+0x2ac>)
 8005f24:	4293      	cmp	r3, r2
 8005f26:	d04c      	beq.n	8005fc2 <HAL_GPIO_Init+0xfa>
 8005f28:	4a92      	ldr	r2, [pc, #584]	; (8006174 <HAL_GPIO_Init+0x2ac>)
 8005f2a:	4293      	cmp	r3, r2
 8005f2c:	d863      	bhi.n	8005ff6 <HAL_GPIO_Init+0x12e>
 8005f2e:	4a92      	ldr	r2, [pc, #584]	; (8006178 <HAL_GPIO_Init+0x2b0>)
 8005f30:	4293      	cmp	r3, r2
 8005f32:	d046      	beq.n	8005fc2 <HAL_GPIO_Init+0xfa>
 8005f34:	4a90      	ldr	r2, [pc, #576]	; (8006178 <HAL_GPIO_Init+0x2b0>)
 8005f36:	4293      	cmp	r3, r2
 8005f38:	d85d      	bhi.n	8005ff6 <HAL_GPIO_Init+0x12e>
 8005f3a:	2b12      	cmp	r3, #18
 8005f3c:	d82a      	bhi.n	8005f94 <HAL_GPIO_Init+0xcc>
 8005f3e:	2b12      	cmp	r3, #18
 8005f40:	d859      	bhi.n	8005ff6 <HAL_GPIO_Init+0x12e>
 8005f42:	a201      	add	r2, pc, #4	; (adr r2, 8005f48 <HAL_GPIO_Init+0x80>)
 8005f44:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005f48:	08005fc3 	.word	0x08005fc3
 8005f4c:	08005f9d 	.word	0x08005f9d
 8005f50:	08005faf 	.word	0x08005faf
 8005f54:	08005ff1 	.word	0x08005ff1
 8005f58:	08005ff7 	.word	0x08005ff7
 8005f5c:	08005ff7 	.word	0x08005ff7
 8005f60:	08005ff7 	.word	0x08005ff7
 8005f64:	08005ff7 	.word	0x08005ff7
 8005f68:	08005ff7 	.word	0x08005ff7
 8005f6c:	08005ff7 	.word	0x08005ff7
 8005f70:	08005ff7 	.word	0x08005ff7
 8005f74:	08005ff7 	.word	0x08005ff7
 8005f78:	08005ff7 	.word	0x08005ff7
 8005f7c:	08005ff7 	.word	0x08005ff7
 8005f80:	08005ff7 	.word	0x08005ff7
 8005f84:	08005ff7 	.word	0x08005ff7
 8005f88:	08005ff7 	.word	0x08005ff7
 8005f8c:	08005fa5 	.word	0x08005fa5
 8005f90:	08005fb9 	.word	0x08005fb9
 8005f94:	4a79      	ldr	r2, [pc, #484]	; (800617c <HAL_GPIO_Init+0x2b4>)
 8005f96:	4293      	cmp	r3, r2
 8005f98:	d013      	beq.n	8005fc2 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8005f9a:	e02c      	b.n	8005ff6 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8005f9c:	683b      	ldr	r3, [r7, #0]
 8005f9e:	68db      	ldr	r3, [r3, #12]
 8005fa0:	623b      	str	r3, [r7, #32]
          break;
 8005fa2:	e029      	b.n	8005ff8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8005fa4:	683b      	ldr	r3, [r7, #0]
 8005fa6:	68db      	ldr	r3, [r3, #12]
 8005fa8:	3304      	adds	r3, #4
 8005faa:	623b      	str	r3, [r7, #32]
          break;
 8005fac:	e024      	b.n	8005ff8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8005fae:	683b      	ldr	r3, [r7, #0]
 8005fb0:	68db      	ldr	r3, [r3, #12]
 8005fb2:	3308      	adds	r3, #8
 8005fb4:	623b      	str	r3, [r7, #32]
          break;
 8005fb6:	e01f      	b.n	8005ff8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8005fb8:	683b      	ldr	r3, [r7, #0]
 8005fba:	68db      	ldr	r3, [r3, #12]
 8005fbc:	330c      	adds	r3, #12
 8005fbe:	623b      	str	r3, [r7, #32]
          break;
 8005fc0:	e01a      	b.n	8005ff8 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8005fc2:	683b      	ldr	r3, [r7, #0]
 8005fc4:	689b      	ldr	r3, [r3, #8]
 8005fc6:	2b00      	cmp	r3, #0
 8005fc8:	d102      	bne.n	8005fd0 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8005fca:	2304      	movs	r3, #4
 8005fcc:	623b      	str	r3, [r7, #32]
          break;
 8005fce:	e013      	b.n	8005ff8 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8005fd0:	683b      	ldr	r3, [r7, #0]
 8005fd2:	689b      	ldr	r3, [r3, #8]
 8005fd4:	2b01      	cmp	r3, #1
 8005fd6:	d105      	bne.n	8005fe4 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8005fd8:	2308      	movs	r3, #8
 8005fda:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8005fdc:	687b      	ldr	r3, [r7, #4]
 8005fde:	69fa      	ldr	r2, [r7, #28]
 8005fe0:	611a      	str	r2, [r3, #16]
          break;
 8005fe2:	e009      	b.n	8005ff8 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8005fe4:	2308      	movs	r3, #8
 8005fe6:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8005fe8:	687b      	ldr	r3, [r7, #4]
 8005fea:	69fa      	ldr	r2, [r7, #28]
 8005fec:	615a      	str	r2, [r3, #20]
          break;
 8005fee:	e003      	b.n	8005ff8 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8005ff0:	2300      	movs	r3, #0
 8005ff2:	623b      	str	r3, [r7, #32]
          break;
 8005ff4:	e000      	b.n	8005ff8 <HAL_GPIO_Init+0x130>
          break;
 8005ff6:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8005ff8:	69bb      	ldr	r3, [r7, #24]
 8005ffa:	2bff      	cmp	r3, #255	; 0xff
 8005ffc:	d801      	bhi.n	8006002 <HAL_GPIO_Init+0x13a>
 8005ffe:	687b      	ldr	r3, [r7, #4]
 8006000:	e001      	b.n	8006006 <HAL_GPIO_Init+0x13e>
 8006002:	687b      	ldr	r3, [r7, #4]
 8006004:	3304      	adds	r3, #4
 8006006:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8006008:	69bb      	ldr	r3, [r7, #24]
 800600a:	2bff      	cmp	r3, #255	; 0xff
 800600c:	d802      	bhi.n	8006014 <HAL_GPIO_Init+0x14c>
 800600e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006010:	009b      	lsls	r3, r3, #2
 8006012:	e002      	b.n	800601a <HAL_GPIO_Init+0x152>
 8006014:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006016:	3b08      	subs	r3, #8
 8006018:	009b      	lsls	r3, r3, #2
 800601a:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 800601c:	697b      	ldr	r3, [r7, #20]
 800601e:	681a      	ldr	r2, [r3, #0]
 8006020:	210f      	movs	r1, #15
 8006022:	693b      	ldr	r3, [r7, #16]
 8006024:	fa01 f303 	lsl.w	r3, r1, r3
 8006028:	43db      	mvns	r3, r3
 800602a:	401a      	ands	r2, r3
 800602c:	6a39      	ldr	r1, [r7, #32]
 800602e:	693b      	ldr	r3, [r7, #16]
 8006030:	fa01 f303 	lsl.w	r3, r1, r3
 8006034:	431a      	orrs	r2, r3
 8006036:	697b      	ldr	r3, [r7, #20]
 8006038:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800603a:	683b      	ldr	r3, [r7, #0]
 800603c:	685b      	ldr	r3, [r3, #4]
 800603e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006042:	2b00      	cmp	r3, #0
 8006044:	f000 80b1 	beq.w	80061aa <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8006048:	4b4d      	ldr	r3, [pc, #308]	; (8006180 <HAL_GPIO_Init+0x2b8>)
 800604a:	699b      	ldr	r3, [r3, #24]
 800604c:	4a4c      	ldr	r2, [pc, #304]	; (8006180 <HAL_GPIO_Init+0x2b8>)
 800604e:	f043 0301 	orr.w	r3, r3, #1
 8006052:	6193      	str	r3, [r2, #24]
 8006054:	4b4a      	ldr	r3, [pc, #296]	; (8006180 <HAL_GPIO_Init+0x2b8>)
 8006056:	699b      	ldr	r3, [r3, #24]
 8006058:	f003 0301 	and.w	r3, r3, #1
 800605c:	60bb      	str	r3, [r7, #8]
 800605e:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8006060:	4a48      	ldr	r2, [pc, #288]	; (8006184 <HAL_GPIO_Init+0x2bc>)
 8006062:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006064:	089b      	lsrs	r3, r3, #2
 8006066:	3302      	adds	r3, #2
 8006068:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800606c:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800606e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006070:	f003 0303 	and.w	r3, r3, #3
 8006074:	009b      	lsls	r3, r3, #2
 8006076:	220f      	movs	r2, #15
 8006078:	fa02 f303 	lsl.w	r3, r2, r3
 800607c:	43db      	mvns	r3, r3
 800607e:	68fa      	ldr	r2, [r7, #12]
 8006080:	4013      	ands	r3, r2
 8006082:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8006084:	687b      	ldr	r3, [r7, #4]
 8006086:	4a40      	ldr	r2, [pc, #256]	; (8006188 <HAL_GPIO_Init+0x2c0>)
 8006088:	4293      	cmp	r3, r2
 800608a:	d013      	beq.n	80060b4 <HAL_GPIO_Init+0x1ec>
 800608c:	687b      	ldr	r3, [r7, #4]
 800608e:	4a3f      	ldr	r2, [pc, #252]	; (800618c <HAL_GPIO_Init+0x2c4>)
 8006090:	4293      	cmp	r3, r2
 8006092:	d00d      	beq.n	80060b0 <HAL_GPIO_Init+0x1e8>
 8006094:	687b      	ldr	r3, [r7, #4]
 8006096:	4a3e      	ldr	r2, [pc, #248]	; (8006190 <HAL_GPIO_Init+0x2c8>)
 8006098:	4293      	cmp	r3, r2
 800609a:	d007      	beq.n	80060ac <HAL_GPIO_Init+0x1e4>
 800609c:	687b      	ldr	r3, [r7, #4]
 800609e:	4a3d      	ldr	r2, [pc, #244]	; (8006194 <HAL_GPIO_Init+0x2cc>)
 80060a0:	4293      	cmp	r3, r2
 80060a2:	d101      	bne.n	80060a8 <HAL_GPIO_Init+0x1e0>
 80060a4:	2303      	movs	r3, #3
 80060a6:	e006      	b.n	80060b6 <HAL_GPIO_Init+0x1ee>
 80060a8:	2304      	movs	r3, #4
 80060aa:	e004      	b.n	80060b6 <HAL_GPIO_Init+0x1ee>
 80060ac:	2302      	movs	r3, #2
 80060ae:	e002      	b.n	80060b6 <HAL_GPIO_Init+0x1ee>
 80060b0:	2301      	movs	r3, #1
 80060b2:	e000      	b.n	80060b6 <HAL_GPIO_Init+0x1ee>
 80060b4:	2300      	movs	r3, #0
 80060b6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80060b8:	f002 0203 	and.w	r2, r2, #3
 80060bc:	0092      	lsls	r2, r2, #2
 80060be:	4093      	lsls	r3, r2
 80060c0:	68fa      	ldr	r2, [r7, #12]
 80060c2:	4313      	orrs	r3, r2
 80060c4:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80060c6:	492f      	ldr	r1, [pc, #188]	; (8006184 <HAL_GPIO_Init+0x2bc>)
 80060c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80060ca:	089b      	lsrs	r3, r3, #2
 80060cc:	3302      	adds	r3, #2
 80060ce:	68fa      	ldr	r2, [r7, #12]
 80060d0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80060d4:	683b      	ldr	r3, [r7, #0]
 80060d6:	685b      	ldr	r3, [r3, #4]
 80060d8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80060dc:	2b00      	cmp	r3, #0
 80060de:	d006      	beq.n	80060ee <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80060e0:	4b2d      	ldr	r3, [pc, #180]	; (8006198 <HAL_GPIO_Init+0x2d0>)
 80060e2:	681a      	ldr	r2, [r3, #0]
 80060e4:	492c      	ldr	r1, [pc, #176]	; (8006198 <HAL_GPIO_Init+0x2d0>)
 80060e6:	69bb      	ldr	r3, [r7, #24]
 80060e8:	4313      	orrs	r3, r2
 80060ea:	600b      	str	r3, [r1, #0]
 80060ec:	e006      	b.n	80060fc <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80060ee:	4b2a      	ldr	r3, [pc, #168]	; (8006198 <HAL_GPIO_Init+0x2d0>)
 80060f0:	681a      	ldr	r2, [r3, #0]
 80060f2:	69bb      	ldr	r3, [r7, #24]
 80060f4:	43db      	mvns	r3, r3
 80060f6:	4928      	ldr	r1, [pc, #160]	; (8006198 <HAL_GPIO_Init+0x2d0>)
 80060f8:	4013      	ands	r3, r2
 80060fa:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80060fc:	683b      	ldr	r3, [r7, #0]
 80060fe:	685b      	ldr	r3, [r3, #4]
 8006100:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006104:	2b00      	cmp	r3, #0
 8006106:	d006      	beq.n	8006116 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8006108:	4b23      	ldr	r3, [pc, #140]	; (8006198 <HAL_GPIO_Init+0x2d0>)
 800610a:	685a      	ldr	r2, [r3, #4]
 800610c:	4922      	ldr	r1, [pc, #136]	; (8006198 <HAL_GPIO_Init+0x2d0>)
 800610e:	69bb      	ldr	r3, [r7, #24]
 8006110:	4313      	orrs	r3, r2
 8006112:	604b      	str	r3, [r1, #4]
 8006114:	e006      	b.n	8006124 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8006116:	4b20      	ldr	r3, [pc, #128]	; (8006198 <HAL_GPIO_Init+0x2d0>)
 8006118:	685a      	ldr	r2, [r3, #4]
 800611a:	69bb      	ldr	r3, [r7, #24]
 800611c:	43db      	mvns	r3, r3
 800611e:	491e      	ldr	r1, [pc, #120]	; (8006198 <HAL_GPIO_Init+0x2d0>)
 8006120:	4013      	ands	r3, r2
 8006122:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8006124:	683b      	ldr	r3, [r7, #0]
 8006126:	685b      	ldr	r3, [r3, #4]
 8006128:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800612c:	2b00      	cmp	r3, #0
 800612e:	d006      	beq.n	800613e <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8006130:	4b19      	ldr	r3, [pc, #100]	; (8006198 <HAL_GPIO_Init+0x2d0>)
 8006132:	689a      	ldr	r2, [r3, #8]
 8006134:	4918      	ldr	r1, [pc, #96]	; (8006198 <HAL_GPIO_Init+0x2d0>)
 8006136:	69bb      	ldr	r3, [r7, #24]
 8006138:	4313      	orrs	r3, r2
 800613a:	608b      	str	r3, [r1, #8]
 800613c:	e006      	b.n	800614c <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800613e:	4b16      	ldr	r3, [pc, #88]	; (8006198 <HAL_GPIO_Init+0x2d0>)
 8006140:	689a      	ldr	r2, [r3, #8]
 8006142:	69bb      	ldr	r3, [r7, #24]
 8006144:	43db      	mvns	r3, r3
 8006146:	4914      	ldr	r1, [pc, #80]	; (8006198 <HAL_GPIO_Init+0x2d0>)
 8006148:	4013      	ands	r3, r2
 800614a:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800614c:	683b      	ldr	r3, [r7, #0]
 800614e:	685b      	ldr	r3, [r3, #4]
 8006150:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8006154:	2b00      	cmp	r3, #0
 8006156:	d021      	beq.n	800619c <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8006158:	4b0f      	ldr	r3, [pc, #60]	; (8006198 <HAL_GPIO_Init+0x2d0>)
 800615a:	68da      	ldr	r2, [r3, #12]
 800615c:	490e      	ldr	r1, [pc, #56]	; (8006198 <HAL_GPIO_Init+0x2d0>)
 800615e:	69bb      	ldr	r3, [r7, #24]
 8006160:	4313      	orrs	r3, r2
 8006162:	60cb      	str	r3, [r1, #12]
 8006164:	e021      	b.n	80061aa <HAL_GPIO_Init+0x2e2>
 8006166:	bf00      	nop
 8006168:	10320000 	.word	0x10320000
 800616c:	10310000 	.word	0x10310000
 8006170:	10220000 	.word	0x10220000
 8006174:	10210000 	.word	0x10210000
 8006178:	10120000 	.word	0x10120000
 800617c:	10110000 	.word	0x10110000
 8006180:	40021000 	.word	0x40021000
 8006184:	40010000 	.word	0x40010000
 8006188:	40010800 	.word	0x40010800
 800618c:	40010c00 	.word	0x40010c00
 8006190:	40011000 	.word	0x40011000
 8006194:	40011400 	.word	0x40011400
 8006198:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 800619c:	4b0b      	ldr	r3, [pc, #44]	; (80061cc <HAL_GPIO_Init+0x304>)
 800619e:	68da      	ldr	r2, [r3, #12]
 80061a0:	69bb      	ldr	r3, [r7, #24]
 80061a2:	43db      	mvns	r3, r3
 80061a4:	4909      	ldr	r1, [pc, #36]	; (80061cc <HAL_GPIO_Init+0x304>)
 80061a6:	4013      	ands	r3, r2
 80061a8:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 80061aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80061ac:	3301      	adds	r3, #1
 80061ae:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80061b0:	683b      	ldr	r3, [r7, #0]
 80061b2:	681a      	ldr	r2, [r3, #0]
 80061b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80061b6:	fa22 f303 	lsr.w	r3, r2, r3
 80061ba:	2b00      	cmp	r3, #0
 80061bc:	f47f ae8e 	bne.w	8005edc <HAL_GPIO_Init+0x14>
  }
}
 80061c0:	bf00      	nop
 80061c2:	bf00      	nop
 80061c4:	372c      	adds	r7, #44	; 0x2c
 80061c6:	46bd      	mov	sp, r7
 80061c8:	bc80      	pop	{r7}
 80061ca:	4770      	bx	lr
 80061cc:	40010400 	.word	0x40010400

080061d0 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80061d0:	b480      	push	{r7}
 80061d2:	b085      	sub	sp, #20
 80061d4:	af00      	add	r7, sp, #0
 80061d6:	6078      	str	r0, [r7, #4]
 80061d8:	460b      	mov	r3, r1
 80061da:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80061dc:	687b      	ldr	r3, [r7, #4]
 80061de:	689a      	ldr	r2, [r3, #8]
 80061e0:	887b      	ldrh	r3, [r7, #2]
 80061e2:	4013      	ands	r3, r2
 80061e4:	2b00      	cmp	r3, #0
 80061e6:	d002      	beq.n	80061ee <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80061e8:	2301      	movs	r3, #1
 80061ea:	73fb      	strb	r3, [r7, #15]
 80061ec:	e001      	b.n	80061f2 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80061ee:	2300      	movs	r3, #0
 80061f0:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80061f2:	7bfb      	ldrb	r3, [r7, #15]
}
 80061f4:	4618      	mov	r0, r3
 80061f6:	3714      	adds	r7, #20
 80061f8:	46bd      	mov	sp, r7
 80061fa:	bc80      	pop	{r7}
 80061fc:	4770      	bx	lr

080061fe <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80061fe:	b480      	push	{r7}
 8006200:	b085      	sub	sp, #20
 8006202:	af00      	add	r7, sp, #0
 8006204:	6078      	str	r0, [r7, #4]
 8006206:	460b      	mov	r3, r1
 8006208:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 800620a:	687b      	ldr	r3, [r7, #4]
 800620c:	68db      	ldr	r3, [r3, #12]
 800620e:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8006210:	887a      	ldrh	r2, [r7, #2]
 8006212:	68fb      	ldr	r3, [r7, #12]
 8006214:	4013      	ands	r3, r2
 8006216:	041a      	lsls	r2, r3, #16
 8006218:	68fb      	ldr	r3, [r7, #12]
 800621a:	43d9      	mvns	r1, r3
 800621c:	887b      	ldrh	r3, [r7, #2]
 800621e:	400b      	ands	r3, r1
 8006220:	431a      	orrs	r2, r3
 8006222:	687b      	ldr	r3, [r7, #4]
 8006224:	611a      	str	r2, [r3, #16]
}
 8006226:	bf00      	nop
 8006228:	3714      	adds	r7, #20
 800622a:	46bd      	mov	sp, r7
 800622c:	bc80      	pop	{r7}
 800622e:	4770      	bx	lr

08006230 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006230:	b580      	push	{r7, lr}
 8006232:	b086      	sub	sp, #24
 8006234:	af00      	add	r7, sp, #0
 8006236:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8006238:	687b      	ldr	r3, [r7, #4]
 800623a:	2b00      	cmp	r3, #0
 800623c:	d101      	bne.n	8006242 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800623e:	2301      	movs	r3, #1
 8006240:	e26c      	b.n	800671c <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8006242:	687b      	ldr	r3, [r7, #4]
 8006244:	681b      	ldr	r3, [r3, #0]
 8006246:	f003 0301 	and.w	r3, r3, #1
 800624a:	2b00      	cmp	r3, #0
 800624c:	f000 8087 	beq.w	800635e <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8006250:	4b92      	ldr	r3, [pc, #584]	; (800649c <HAL_RCC_OscConfig+0x26c>)
 8006252:	685b      	ldr	r3, [r3, #4]
 8006254:	f003 030c 	and.w	r3, r3, #12
 8006258:	2b04      	cmp	r3, #4
 800625a:	d00c      	beq.n	8006276 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800625c:	4b8f      	ldr	r3, [pc, #572]	; (800649c <HAL_RCC_OscConfig+0x26c>)
 800625e:	685b      	ldr	r3, [r3, #4]
 8006260:	f003 030c 	and.w	r3, r3, #12
 8006264:	2b08      	cmp	r3, #8
 8006266:	d112      	bne.n	800628e <HAL_RCC_OscConfig+0x5e>
 8006268:	4b8c      	ldr	r3, [pc, #560]	; (800649c <HAL_RCC_OscConfig+0x26c>)
 800626a:	685b      	ldr	r3, [r3, #4]
 800626c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006270:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006274:	d10b      	bne.n	800628e <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006276:	4b89      	ldr	r3, [pc, #548]	; (800649c <HAL_RCC_OscConfig+0x26c>)
 8006278:	681b      	ldr	r3, [r3, #0]
 800627a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800627e:	2b00      	cmp	r3, #0
 8006280:	d06c      	beq.n	800635c <HAL_RCC_OscConfig+0x12c>
 8006282:	687b      	ldr	r3, [r7, #4]
 8006284:	685b      	ldr	r3, [r3, #4]
 8006286:	2b00      	cmp	r3, #0
 8006288:	d168      	bne.n	800635c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800628a:	2301      	movs	r3, #1
 800628c:	e246      	b.n	800671c <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800628e:	687b      	ldr	r3, [r7, #4]
 8006290:	685b      	ldr	r3, [r3, #4]
 8006292:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006296:	d106      	bne.n	80062a6 <HAL_RCC_OscConfig+0x76>
 8006298:	4b80      	ldr	r3, [pc, #512]	; (800649c <HAL_RCC_OscConfig+0x26c>)
 800629a:	681b      	ldr	r3, [r3, #0]
 800629c:	4a7f      	ldr	r2, [pc, #508]	; (800649c <HAL_RCC_OscConfig+0x26c>)
 800629e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80062a2:	6013      	str	r3, [r2, #0]
 80062a4:	e02e      	b.n	8006304 <HAL_RCC_OscConfig+0xd4>
 80062a6:	687b      	ldr	r3, [r7, #4]
 80062a8:	685b      	ldr	r3, [r3, #4]
 80062aa:	2b00      	cmp	r3, #0
 80062ac:	d10c      	bne.n	80062c8 <HAL_RCC_OscConfig+0x98>
 80062ae:	4b7b      	ldr	r3, [pc, #492]	; (800649c <HAL_RCC_OscConfig+0x26c>)
 80062b0:	681b      	ldr	r3, [r3, #0]
 80062b2:	4a7a      	ldr	r2, [pc, #488]	; (800649c <HAL_RCC_OscConfig+0x26c>)
 80062b4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80062b8:	6013      	str	r3, [r2, #0]
 80062ba:	4b78      	ldr	r3, [pc, #480]	; (800649c <HAL_RCC_OscConfig+0x26c>)
 80062bc:	681b      	ldr	r3, [r3, #0]
 80062be:	4a77      	ldr	r2, [pc, #476]	; (800649c <HAL_RCC_OscConfig+0x26c>)
 80062c0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80062c4:	6013      	str	r3, [r2, #0]
 80062c6:	e01d      	b.n	8006304 <HAL_RCC_OscConfig+0xd4>
 80062c8:	687b      	ldr	r3, [r7, #4]
 80062ca:	685b      	ldr	r3, [r3, #4]
 80062cc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80062d0:	d10c      	bne.n	80062ec <HAL_RCC_OscConfig+0xbc>
 80062d2:	4b72      	ldr	r3, [pc, #456]	; (800649c <HAL_RCC_OscConfig+0x26c>)
 80062d4:	681b      	ldr	r3, [r3, #0]
 80062d6:	4a71      	ldr	r2, [pc, #452]	; (800649c <HAL_RCC_OscConfig+0x26c>)
 80062d8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80062dc:	6013      	str	r3, [r2, #0]
 80062de:	4b6f      	ldr	r3, [pc, #444]	; (800649c <HAL_RCC_OscConfig+0x26c>)
 80062e0:	681b      	ldr	r3, [r3, #0]
 80062e2:	4a6e      	ldr	r2, [pc, #440]	; (800649c <HAL_RCC_OscConfig+0x26c>)
 80062e4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80062e8:	6013      	str	r3, [r2, #0]
 80062ea:	e00b      	b.n	8006304 <HAL_RCC_OscConfig+0xd4>
 80062ec:	4b6b      	ldr	r3, [pc, #428]	; (800649c <HAL_RCC_OscConfig+0x26c>)
 80062ee:	681b      	ldr	r3, [r3, #0]
 80062f0:	4a6a      	ldr	r2, [pc, #424]	; (800649c <HAL_RCC_OscConfig+0x26c>)
 80062f2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80062f6:	6013      	str	r3, [r2, #0]
 80062f8:	4b68      	ldr	r3, [pc, #416]	; (800649c <HAL_RCC_OscConfig+0x26c>)
 80062fa:	681b      	ldr	r3, [r3, #0]
 80062fc:	4a67      	ldr	r2, [pc, #412]	; (800649c <HAL_RCC_OscConfig+0x26c>)
 80062fe:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006302:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8006304:	687b      	ldr	r3, [r7, #4]
 8006306:	685b      	ldr	r3, [r3, #4]
 8006308:	2b00      	cmp	r3, #0
 800630a:	d013      	beq.n	8006334 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800630c:	f7fe fd90 	bl	8004e30 <HAL_GetTick>
 8006310:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006312:	e008      	b.n	8006326 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006314:	f7fe fd8c 	bl	8004e30 <HAL_GetTick>
 8006318:	4602      	mov	r2, r0
 800631a:	693b      	ldr	r3, [r7, #16]
 800631c:	1ad3      	subs	r3, r2, r3
 800631e:	2b64      	cmp	r3, #100	; 0x64
 8006320:	d901      	bls.n	8006326 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8006322:	2303      	movs	r3, #3
 8006324:	e1fa      	b.n	800671c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006326:	4b5d      	ldr	r3, [pc, #372]	; (800649c <HAL_RCC_OscConfig+0x26c>)
 8006328:	681b      	ldr	r3, [r3, #0]
 800632a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800632e:	2b00      	cmp	r3, #0
 8006330:	d0f0      	beq.n	8006314 <HAL_RCC_OscConfig+0xe4>
 8006332:	e014      	b.n	800635e <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006334:	f7fe fd7c 	bl	8004e30 <HAL_GetTick>
 8006338:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800633a:	e008      	b.n	800634e <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800633c:	f7fe fd78 	bl	8004e30 <HAL_GetTick>
 8006340:	4602      	mov	r2, r0
 8006342:	693b      	ldr	r3, [r7, #16]
 8006344:	1ad3      	subs	r3, r2, r3
 8006346:	2b64      	cmp	r3, #100	; 0x64
 8006348:	d901      	bls.n	800634e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800634a:	2303      	movs	r3, #3
 800634c:	e1e6      	b.n	800671c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800634e:	4b53      	ldr	r3, [pc, #332]	; (800649c <HAL_RCC_OscConfig+0x26c>)
 8006350:	681b      	ldr	r3, [r3, #0]
 8006352:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006356:	2b00      	cmp	r3, #0
 8006358:	d1f0      	bne.n	800633c <HAL_RCC_OscConfig+0x10c>
 800635a:	e000      	b.n	800635e <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800635c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800635e:	687b      	ldr	r3, [r7, #4]
 8006360:	681b      	ldr	r3, [r3, #0]
 8006362:	f003 0302 	and.w	r3, r3, #2
 8006366:	2b00      	cmp	r3, #0
 8006368:	d063      	beq.n	8006432 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800636a:	4b4c      	ldr	r3, [pc, #304]	; (800649c <HAL_RCC_OscConfig+0x26c>)
 800636c:	685b      	ldr	r3, [r3, #4]
 800636e:	f003 030c 	and.w	r3, r3, #12
 8006372:	2b00      	cmp	r3, #0
 8006374:	d00b      	beq.n	800638e <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8006376:	4b49      	ldr	r3, [pc, #292]	; (800649c <HAL_RCC_OscConfig+0x26c>)
 8006378:	685b      	ldr	r3, [r3, #4]
 800637a:	f003 030c 	and.w	r3, r3, #12
 800637e:	2b08      	cmp	r3, #8
 8006380:	d11c      	bne.n	80063bc <HAL_RCC_OscConfig+0x18c>
 8006382:	4b46      	ldr	r3, [pc, #280]	; (800649c <HAL_RCC_OscConfig+0x26c>)
 8006384:	685b      	ldr	r3, [r3, #4]
 8006386:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800638a:	2b00      	cmp	r3, #0
 800638c:	d116      	bne.n	80063bc <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800638e:	4b43      	ldr	r3, [pc, #268]	; (800649c <HAL_RCC_OscConfig+0x26c>)
 8006390:	681b      	ldr	r3, [r3, #0]
 8006392:	f003 0302 	and.w	r3, r3, #2
 8006396:	2b00      	cmp	r3, #0
 8006398:	d005      	beq.n	80063a6 <HAL_RCC_OscConfig+0x176>
 800639a:	687b      	ldr	r3, [r7, #4]
 800639c:	691b      	ldr	r3, [r3, #16]
 800639e:	2b01      	cmp	r3, #1
 80063a0:	d001      	beq.n	80063a6 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80063a2:	2301      	movs	r3, #1
 80063a4:	e1ba      	b.n	800671c <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80063a6:	4b3d      	ldr	r3, [pc, #244]	; (800649c <HAL_RCC_OscConfig+0x26c>)
 80063a8:	681b      	ldr	r3, [r3, #0]
 80063aa:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80063ae:	687b      	ldr	r3, [r7, #4]
 80063b0:	695b      	ldr	r3, [r3, #20]
 80063b2:	00db      	lsls	r3, r3, #3
 80063b4:	4939      	ldr	r1, [pc, #228]	; (800649c <HAL_RCC_OscConfig+0x26c>)
 80063b6:	4313      	orrs	r3, r2
 80063b8:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80063ba:	e03a      	b.n	8006432 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80063bc:	687b      	ldr	r3, [r7, #4]
 80063be:	691b      	ldr	r3, [r3, #16]
 80063c0:	2b00      	cmp	r3, #0
 80063c2:	d020      	beq.n	8006406 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80063c4:	4b36      	ldr	r3, [pc, #216]	; (80064a0 <HAL_RCC_OscConfig+0x270>)
 80063c6:	2201      	movs	r2, #1
 80063c8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80063ca:	f7fe fd31 	bl	8004e30 <HAL_GetTick>
 80063ce:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80063d0:	e008      	b.n	80063e4 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80063d2:	f7fe fd2d 	bl	8004e30 <HAL_GetTick>
 80063d6:	4602      	mov	r2, r0
 80063d8:	693b      	ldr	r3, [r7, #16]
 80063da:	1ad3      	subs	r3, r2, r3
 80063dc:	2b02      	cmp	r3, #2
 80063de:	d901      	bls.n	80063e4 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80063e0:	2303      	movs	r3, #3
 80063e2:	e19b      	b.n	800671c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80063e4:	4b2d      	ldr	r3, [pc, #180]	; (800649c <HAL_RCC_OscConfig+0x26c>)
 80063e6:	681b      	ldr	r3, [r3, #0]
 80063e8:	f003 0302 	and.w	r3, r3, #2
 80063ec:	2b00      	cmp	r3, #0
 80063ee:	d0f0      	beq.n	80063d2 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80063f0:	4b2a      	ldr	r3, [pc, #168]	; (800649c <HAL_RCC_OscConfig+0x26c>)
 80063f2:	681b      	ldr	r3, [r3, #0]
 80063f4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80063f8:	687b      	ldr	r3, [r7, #4]
 80063fa:	695b      	ldr	r3, [r3, #20]
 80063fc:	00db      	lsls	r3, r3, #3
 80063fe:	4927      	ldr	r1, [pc, #156]	; (800649c <HAL_RCC_OscConfig+0x26c>)
 8006400:	4313      	orrs	r3, r2
 8006402:	600b      	str	r3, [r1, #0]
 8006404:	e015      	b.n	8006432 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8006406:	4b26      	ldr	r3, [pc, #152]	; (80064a0 <HAL_RCC_OscConfig+0x270>)
 8006408:	2200      	movs	r2, #0
 800640a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800640c:	f7fe fd10 	bl	8004e30 <HAL_GetTick>
 8006410:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006412:	e008      	b.n	8006426 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006414:	f7fe fd0c 	bl	8004e30 <HAL_GetTick>
 8006418:	4602      	mov	r2, r0
 800641a:	693b      	ldr	r3, [r7, #16]
 800641c:	1ad3      	subs	r3, r2, r3
 800641e:	2b02      	cmp	r3, #2
 8006420:	d901      	bls.n	8006426 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8006422:	2303      	movs	r3, #3
 8006424:	e17a      	b.n	800671c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006426:	4b1d      	ldr	r3, [pc, #116]	; (800649c <HAL_RCC_OscConfig+0x26c>)
 8006428:	681b      	ldr	r3, [r3, #0]
 800642a:	f003 0302 	and.w	r3, r3, #2
 800642e:	2b00      	cmp	r3, #0
 8006430:	d1f0      	bne.n	8006414 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006432:	687b      	ldr	r3, [r7, #4]
 8006434:	681b      	ldr	r3, [r3, #0]
 8006436:	f003 0308 	and.w	r3, r3, #8
 800643a:	2b00      	cmp	r3, #0
 800643c:	d03a      	beq.n	80064b4 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800643e:	687b      	ldr	r3, [r7, #4]
 8006440:	699b      	ldr	r3, [r3, #24]
 8006442:	2b00      	cmp	r3, #0
 8006444:	d019      	beq.n	800647a <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8006446:	4b17      	ldr	r3, [pc, #92]	; (80064a4 <HAL_RCC_OscConfig+0x274>)
 8006448:	2201      	movs	r2, #1
 800644a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800644c:	f7fe fcf0 	bl	8004e30 <HAL_GetTick>
 8006450:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006452:	e008      	b.n	8006466 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006454:	f7fe fcec 	bl	8004e30 <HAL_GetTick>
 8006458:	4602      	mov	r2, r0
 800645a:	693b      	ldr	r3, [r7, #16]
 800645c:	1ad3      	subs	r3, r2, r3
 800645e:	2b02      	cmp	r3, #2
 8006460:	d901      	bls.n	8006466 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8006462:	2303      	movs	r3, #3
 8006464:	e15a      	b.n	800671c <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006466:	4b0d      	ldr	r3, [pc, #52]	; (800649c <HAL_RCC_OscConfig+0x26c>)
 8006468:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800646a:	f003 0302 	and.w	r3, r3, #2
 800646e:	2b00      	cmp	r3, #0
 8006470:	d0f0      	beq.n	8006454 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8006472:	2001      	movs	r0, #1
 8006474:	f000 fad8 	bl	8006a28 <RCC_Delay>
 8006478:	e01c      	b.n	80064b4 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800647a:	4b0a      	ldr	r3, [pc, #40]	; (80064a4 <HAL_RCC_OscConfig+0x274>)
 800647c:	2200      	movs	r2, #0
 800647e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006480:	f7fe fcd6 	bl	8004e30 <HAL_GetTick>
 8006484:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006486:	e00f      	b.n	80064a8 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006488:	f7fe fcd2 	bl	8004e30 <HAL_GetTick>
 800648c:	4602      	mov	r2, r0
 800648e:	693b      	ldr	r3, [r7, #16]
 8006490:	1ad3      	subs	r3, r2, r3
 8006492:	2b02      	cmp	r3, #2
 8006494:	d908      	bls.n	80064a8 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8006496:	2303      	movs	r3, #3
 8006498:	e140      	b.n	800671c <HAL_RCC_OscConfig+0x4ec>
 800649a:	bf00      	nop
 800649c:	40021000 	.word	0x40021000
 80064a0:	42420000 	.word	0x42420000
 80064a4:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80064a8:	4b9e      	ldr	r3, [pc, #632]	; (8006724 <HAL_RCC_OscConfig+0x4f4>)
 80064aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80064ac:	f003 0302 	and.w	r3, r3, #2
 80064b0:	2b00      	cmp	r3, #0
 80064b2:	d1e9      	bne.n	8006488 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80064b4:	687b      	ldr	r3, [r7, #4]
 80064b6:	681b      	ldr	r3, [r3, #0]
 80064b8:	f003 0304 	and.w	r3, r3, #4
 80064bc:	2b00      	cmp	r3, #0
 80064be:	f000 80a6 	beq.w	800660e <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80064c2:	2300      	movs	r3, #0
 80064c4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80064c6:	4b97      	ldr	r3, [pc, #604]	; (8006724 <HAL_RCC_OscConfig+0x4f4>)
 80064c8:	69db      	ldr	r3, [r3, #28]
 80064ca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80064ce:	2b00      	cmp	r3, #0
 80064d0:	d10d      	bne.n	80064ee <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80064d2:	4b94      	ldr	r3, [pc, #592]	; (8006724 <HAL_RCC_OscConfig+0x4f4>)
 80064d4:	69db      	ldr	r3, [r3, #28]
 80064d6:	4a93      	ldr	r2, [pc, #588]	; (8006724 <HAL_RCC_OscConfig+0x4f4>)
 80064d8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80064dc:	61d3      	str	r3, [r2, #28]
 80064de:	4b91      	ldr	r3, [pc, #580]	; (8006724 <HAL_RCC_OscConfig+0x4f4>)
 80064e0:	69db      	ldr	r3, [r3, #28]
 80064e2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80064e6:	60bb      	str	r3, [r7, #8]
 80064e8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80064ea:	2301      	movs	r3, #1
 80064ec:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80064ee:	4b8e      	ldr	r3, [pc, #568]	; (8006728 <HAL_RCC_OscConfig+0x4f8>)
 80064f0:	681b      	ldr	r3, [r3, #0]
 80064f2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80064f6:	2b00      	cmp	r3, #0
 80064f8:	d118      	bne.n	800652c <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80064fa:	4b8b      	ldr	r3, [pc, #556]	; (8006728 <HAL_RCC_OscConfig+0x4f8>)
 80064fc:	681b      	ldr	r3, [r3, #0]
 80064fe:	4a8a      	ldr	r2, [pc, #552]	; (8006728 <HAL_RCC_OscConfig+0x4f8>)
 8006500:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006504:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006506:	f7fe fc93 	bl	8004e30 <HAL_GetTick>
 800650a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800650c:	e008      	b.n	8006520 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800650e:	f7fe fc8f 	bl	8004e30 <HAL_GetTick>
 8006512:	4602      	mov	r2, r0
 8006514:	693b      	ldr	r3, [r7, #16]
 8006516:	1ad3      	subs	r3, r2, r3
 8006518:	2b64      	cmp	r3, #100	; 0x64
 800651a:	d901      	bls.n	8006520 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 800651c:	2303      	movs	r3, #3
 800651e:	e0fd      	b.n	800671c <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006520:	4b81      	ldr	r3, [pc, #516]	; (8006728 <HAL_RCC_OscConfig+0x4f8>)
 8006522:	681b      	ldr	r3, [r3, #0]
 8006524:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006528:	2b00      	cmp	r3, #0
 800652a:	d0f0      	beq.n	800650e <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800652c:	687b      	ldr	r3, [r7, #4]
 800652e:	68db      	ldr	r3, [r3, #12]
 8006530:	2b01      	cmp	r3, #1
 8006532:	d106      	bne.n	8006542 <HAL_RCC_OscConfig+0x312>
 8006534:	4b7b      	ldr	r3, [pc, #492]	; (8006724 <HAL_RCC_OscConfig+0x4f4>)
 8006536:	6a1b      	ldr	r3, [r3, #32]
 8006538:	4a7a      	ldr	r2, [pc, #488]	; (8006724 <HAL_RCC_OscConfig+0x4f4>)
 800653a:	f043 0301 	orr.w	r3, r3, #1
 800653e:	6213      	str	r3, [r2, #32]
 8006540:	e02d      	b.n	800659e <HAL_RCC_OscConfig+0x36e>
 8006542:	687b      	ldr	r3, [r7, #4]
 8006544:	68db      	ldr	r3, [r3, #12]
 8006546:	2b00      	cmp	r3, #0
 8006548:	d10c      	bne.n	8006564 <HAL_RCC_OscConfig+0x334>
 800654a:	4b76      	ldr	r3, [pc, #472]	; (8006724 <HAL_RCC_OscConfig+0x4f4>)
 800654c:	6a1b      	ldr	r3, [r3, #32]
 800654e:	4a75      	ldr	r2, [pc, #468]	; (8006724 <HAL_RCC_OscConfig+0x4f4>)
 8006550:	f023 0301 	bic.w	r3, r3, #1
 8006554:	6213      	str	r3, [r2, #32]
 8006556:	4b73      	ldr	r3, [pc, #460]	; (8006724 <HAL_RCC_OscConfig+0x4f4>)
 8006558:	6a1b      	ldr	r3, [r3, #32]
 800655a:	4a72      	ldr	r2, [pc, #456]	; (8006724 <HAL_RCC_OscConfig+0x4f4>)
 800655c:	f023 0304 	bic.w	r3, r3, #4
 8006560:	6213      	str	r3, [r2, #32]
 8006562:	e01c      	b.n	800659e <HAL_RCC_OscConfig+0x36e>
 8006564:	687b      	ldr	r3, [r7, #4]
 8006566:	68db      	ldr	r3, [r3, #12]
 8006568:	2b05      	cmp	r3, #5
 800656a:	d10c      	bne.n	8006586 <HAL_RCC_OscConfig+0x356>
 800656c:	4b6d      	ldr	r3, [pc, #436]	; (8006724 <HAL_RCC_OscConfig+0x4f4>)
 800656e:	6a1b      	ldr	r3, [r3, #32]
 8006570:	4a6c      	ldr	r2, [pc, #432]	; (8006724 <HAL_RCC_OscConfig+0x4f4>)
 8006572:	f043 0304 	orr.w	r3, r3, #4
 8006576:	6213      	str	r3, [r2, #32]
 8006578:	4b6a      	ldr	r3, [pc, #424]	; (8006724 <HAL_RCC_OscConfig+0x4f4>)
 800657a:	6a1b      	ldr	r3, [r3, #32]
 800657c:	4a69      	ldr	r2, [pc, #420]	; (8006724 <HAL_RCC_OscConfig+0x4f4>)
 800657e:	f043 0301 	orr.w	r3, r3, #1
 8006582:	6213      	str	r3, [r2, #32]
 8006584:	e00b      	b.n	800659e <HAL_RCC_OscConfig+0x36e>
 8006586:	4b67      	ldr	r3, [pc, #412]	; (8006724 <HAL_RCC_OscConfig+0x4f4>)
 8006588:	6a1b      	ldr	r3, [r3, #32]
 800658a:	4a66      	ldr	r2, [pc, #408]	; (8006724 <HAL_RCC_OscConfig+0x4f4>)
 800658c:	f023 0301 	bic.w	r3, r3, #1
 8006590:	6213      	str	r3, [r2, #32]
 8006592:	4b64      	ldr	r3, [pc, #400]	; (8006724 <HAL_RCC_OscConfig+0x4f4>)
 8006594:	6a1b      	ldr	r3, [r3, #32]
 8006596:	4a63      	ldr	r2, [pc, #396]	; (8006724 <HAL_RCC_OscConfig+0x4f4>)
 8006598:	f023 0304 	bic.w	r3, r3, #4
 800659c:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800659e:	687b      	ldr	r3, [r7, #4]
 80065a0:	68db      	ldr	r3, [r3, #12]
 80065a2:	2b00      	cmp	r3, #0
 80065a4:	d015      	beq.n	80065d2 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80065a6:	f7fe fc43 	bl	8004e30 <HAL_GetTick>
 80065aa:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80065ac:	e00a      	b.n	80065c4 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80065ae:	f7fe fc3f 	bl	8004e30 <HAL_GetTick>
 80065b2:	4602      	mov	r2, r0
 80065b4:	693b      	ldr	r3, [r7, #16]
 80065b6:	1ad3      	subs	r3, r2, r3
 80065b8:	f241 3288 	movw	r2, #5000	; 0x1388
 80065bc:	4293      	cmp	r3, r2
 80065be:	d901      	bls.n	80065c4 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80065c0:	2303      	movs	r3, #3
 80065c2:	e0ab      	b.n	800671c <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80065c4:	4b57      	ldr	r3, [pc, #348]	; (8006724 <HAL_RCC_OscConfig+0x4f4>)
 80065c6:	6a1b      	ldr	r3, [r3, #32]
 80065c8:	f003 0302 	and.w	r3, r3, #2
 80065cc:	2b00      	cmp	r3, #0
 80065ce:	d0ee      	beq.n	80065ae <HAL_RCC_OscConfig+0x37e>
 80065d0:	e014      	b.n	80065fc <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80065d2:	f7fe fc2d 	bl	8004e30 <HAL_GetTick>
 80065d6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80065d8:	e00a      	b.n	80065f0 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80065da:	f7fe fc29 	bl	8004e30 <HAL_GetTick>
 80065de:	4602      	mov	r2, r0
 80065e0:	693b      	ldr	r3, [r7, #16]
 80065e2:	1ad3      	subs	r3, r2, r3
 80065e4:	f241 3288 	movw	r2, #5000	; 0x1388
 80065e8:	4293      	cmp	r3, r2
 80065ea:	d901      	bls.n	80065f0 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80065ec:	2303      	movs	r3, #3
 80065ee:	e095      	b.n	800671c <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80065f0:	4b4c      	ldr	r3, [pc, #304]	; (8006724 <HAL_RCC_OscConfig+0x4f4>)
 80065f2:	6a1b      	ldr	r3, [r3, #32]
 80065f4:	f003 0302 	and.w	r3, r3, #2
 80065f8:	2b00      	cmp	r3, #0
 80065fa:	d1ee      	bne.n	80065da <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80065fc:	7dfb      	ldrb	r3, [r7, #23]
 80065fe:	2b01      	cmp	r3, #1
 8006600:	d105      	bne.n	800660e <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006602:	4b48      	ldr	r3, [pc, #288]	; (8006724 <HAL_RCC_OscConfig+0x4f4>)
 8006604:	69db      	ldr	r3, [r3, #28]
 8006606:	4a47      	ldr	r2, [pc, #284]	; (8006724 <HAL_RCC_OscConfig+0x4f4>)
 8006608:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800660c:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800660e:	687b      	ldr	r3, [r7, #4]
 8006610:	69db      	ldr	r3, [r3, #28]
 8006612:	2b00      	cmp	r3, #0
 8006614:	f000 8081 	beq.w	800671a <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8006618:	4b42      	ldr	r3, [pc, #264]	; (8006724 <HAL_RCC_OscConfig+0x4f4>)
 800661a:	685b      	ldr	r3, [r3, #4]
 800661c:	f003 030c 	and.w	r3, r3, #12
 8006620:	2b08      	cmp	r3, #8
 8006622:	d061      	beq.n	80066e8 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8006624:	687b      	ldr	r3, [r7, #4]
 8006626:	69db      	ldr	r3, [r3, #28]
 8006628:	2b02      	cmp	r3, #2
 800662a:	d146      	bne.n	80066ba <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800662c:	4b3f      	ldr	r3, [pc, #252]	; (800672c <HAL_RCC_OscConfig+0x4fc>)
 800662e:	2200      	movs	r2, #0
 8006630:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006632:	f7fe fbfd 	bl	8004e30 <HAL_GetTick>
 8006636:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8006638:	e008      	b.n	800664c <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800663a:	f7fe fbf9 	bl	8004e30 <HAL_GetTick>
 800663e:	4602      	mov	r2, r0
 8006640:	693b      	ldr	r3, [r7, #16]
 8006642:	1ad3      	subs	r3, r2, r3
 8006644:	2b02      	cmp	r3, #2
 8006646:	d901      	bls.n	800664c <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8006648:	2303      	movs	r3, #3
 800664a:	e067      	b.n	800671c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800664c:	4b35      	ldr	r3, [pc, #212]	; (8006724 <HAL_RCC_OscConfig+0x4f4>)
 800664e:	681b      	ldr	r3, [r3, #0]
 8006650:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006654:	2b00      	cmp	r3, #0
 8006656:	d1f0      	bne.n	800663a <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8006658:	687b      	ldr	r3, [r7, #4]
 800665a:	6a1b      	ldr	r3, [r3, #32]
 800665c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006660:	d108      	bne.n	8006674 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8006662:	4b30      	ldr	r3, [pc, #192]	; (8006724 <HAL_RCC_OscConfig+0x4f4>)
 8006664:	685b      	ldr	r3, [r3, #4]
 8006666:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 800666a:	687b      	ldr	r3, [r7, #4]
 800666c:	689b      	ldr	r3, [r3, #8]
 800666e:	492d      	ldr	r1, [pc, #180]	; (8006724 <HAL_RCC_OscConfig+0x4f4>)
 8006670:	4313      	orrs	r3, r2
 8006672:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8006674:	4b2b      	ldr	r3, [pc, #172]	; (8006724 <HAL_RCC_OscConfig+0x4f4>)
 8006676:	685b      	ldr	r3, [r3, #4]
 8006678:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 800667c:	687b      	ldr	r3, [r7, #4]
 800667e:	6a19      	ldr	r1, [r3, #32]
 8006680:	687b      	ldr	r3, [r7, #4]
 8006682:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006684:	430b      	orrs	r3, r1
 8006686:	4927      	ldr	r1, [pc, #156]	; (8006724 <HAL_RCC_OscConfig+0x4f4>)
 8006688:	4313      	orrs	r3, r2
 800668a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800668c:	4b27      	ldr	r3, [pc, #156]	; (800672c <HAL_RCC_OscConfig+0x4fc>)
 800668e:	2201      	movs	r2, #1
 8006690:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006692:	f7fe fbcd 	bl	8004e30 <HAL_GetTick>
 8006696:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8006698:	e008      	b.n	80066ac <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800669a:	f7fe fbc9 	bl	8004e30 <HAL_GetTick>
 800669e:	4602      	mov	r2, r0
 80066a0:	693b      	ldr	r3, [r7, #16]
 80066a2:	1ad3      	subs	r3, r2, r3
 80066a4:	2b02      	cmp	r3, #2
 80066a6:	d901      	bls.n	80066ac <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80066a8:	2303      	movs	r3, #3
 80066aa:	e037      	b.n	800671c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80066ac:	4b1d      	ldr	r3, [pc, #116]	; (8006724 <HAL_RCC_OscConfig+0x4f4>)
 80066ae:	681b      	ldr	r3, [r3, #0]
 80066b0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80066b4:	2b00      	cmp	r3, #0
 80066b6:	d0f0      	beq.n	800669a <HAL_RCC_OscConfig+0x46a>
 80066b8:	e02f      	b.n	800671a <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80066ba:	4b1c      	ldr	r3, [pc, #112]	; (800672c <HAL_RCC_OscConfig+0x4fc>)
 80066bc:	2200      	movs	r2, #0
 80066be:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80066c0:	f7fe fbb6 	bl	8004e30 <HAL_GetTick>
 80066c4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80066c6:	e008      	b.n	80066da <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80066c8:	f7fe fbb2 	bl	8004e30 <HAL_GetTick>
 80066cc:	4602      	mov	r2, r0
 80066ce:	693b      	ldr	r3, [r7, #16]
 80066d0:	1ad3      	subs	r3, r2, r3
 80066d2:	2b02      	cmp	r3, #2
 80066d4:	d901      	bls.n	80066da <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80066d6:	2303      	movs	r3, #3
 80066d8:	e020      	b.n	800671c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80066da:	4b12      	ldr	r3, [pc, #72]	; (8006724 <HAL_RCC_OscConfig+0x4f4>)
 80066dc:	681b      	ldr	r3, [r3, #0]
 80066de:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80066e2:	2b00      	cmp	r3, #0
 80066e4:	d1f0      	bne.n	80066c8 <HAL_RCC_OscConfig+0x498>
 80066e6:	e018      	b.n	800671a <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80066e8:	687b      	ldr	r3, [r7, #4]
 80066ea:	69db      	ldr	r3, [r3, #28]
 80066ec:	2b01      	cmp	r3, #1
 80066ee:	d101      	bne.n	80066f4 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 80066f0:	2301      	movs	r3, #1
 80066f2:	e013      	b.n	800671c <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80066f4:	4b0b      	ldr	r3, [pc, #44]	; (8006724 <HAL_RCC_OscConfig+0x4f4>)
 80066f6:	685b      	ldr	r3, [r3, #4]
 80066f8:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80066fa:	68fb      	ldr	r3, [r7, #12]
 80066fc:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8006700:	687b      	ldr	r3, [r7, #4]
 8006702:	6a1b      	ldr	r3, [r3, #32]
 8006704:	429a      	cmp	r2, r3
 8006706:	d106      	bne.n	8006716 <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8006708:	68fb      	ldr	r3, [r7, #12]
 800670a:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800670e:	687b      	ldr	r3, [r7, #4]
 8006710:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006712:	429a      	cmp	r2, r3
 8006714:	d001      	beq.n	800671a <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8006716:	2301      	movs	r3, #1
 8006718:	e000      	b.n	800671c <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 800671a:	2300      	movs	r3, #0
}
 800671c:	4618      	mov	r0, r3
 800671e:	3718      	adds	r7, #24
 8006720:	46bd      	mov	sp, r7
 8006722:	bd80      	pop	{r7, pc}
 8006724:	40021000 	.word	0x40021000
 8006728:	40007000 	.word	0x40007000
 800672c:	42420060 	.word	0x42420060

08006730 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006730:	b580      	push	{r7, lr}
 8006732:	b084      	sub	sp, #16
 8006734:	af00      	add	r7, sp, #0
 8006736:	6078      	str	r0, [r7, #4]
 8006738:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800673a:	687b      	ldr	r3, [r7, #4]
 800673c:	2b00      	cmp	r3, #0
 800673e:	d101      	bne.n	8006744 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8006740:	2301      	movs	r3, #1
 8006742:	e0d0      	b.n	80068e6 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8006744:	4b6a      	ldr	r3, [pc, #424]	; (80068f0 <HAL_RCC_ClockConfig+0x1c0>)
 8006746:	681b      	ldr	r3, [r3, #0]
 8006748:	f003 0307 	and.w	r3, r3, #7
 800674c:	683a      	ldr	r2, [r7, #0]
 800674e:	429a      	cmp	r2, r3
 8006750:	d910      	bls.n	8006774 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006752:	4b67      	ldr	r3, [pc, #412]	; (80068f0 <HAL_RCC_ClockConfig+0x1c0>)
 8006754:	681b      	ldr	r3, [r3, #0]
 8006756:	f023 0207 	bic.w	r2, r3, #7
 800675a:	4965      	ldr	r1, [pc, #404]	; (80068f0 <HAL_RCC_ClockConfig+0x1c0>)
 800675c:	683b      	ldr	r3, [r7, #0]
 800675e:	4313      	orrs	r3, r2
 8006760:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006762:	4b63      	ldr	r3, [pc, #396]	; (80068f0 <HAL_RCC_ClockConfig+0x1c0>)
 8006764:	681b      	ldr	r3, [r3, #0]
 8006766:	f003 0307 	and.w	r3, r3, #7
 800676a:	683a      	ldr	r2, [r7, #0]
 800676c:	429a      	cmp	r2, r3
 800676e:	d001      	beq.n	8006774 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8006770:	2301      	movs	r3, #1
 8006772:	e0b8      	b.n	80068e6 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006774:	687b      	ldr	r3, [r7, #4]
 8006776:	681b      	ldr	r3, [r3, #0]
 8006778:	f003 0302 	and.w	r3, r3, #2
 800677c:	2b00      	cmp	r3, #0
 800677e:	d020      	beq.n	80067c2 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006780:	687b      	ldr	r3, [r7, #4]
 8006782:	681b      	ldr	r3, [r3, #0]
 8006784:	f003 0304 	and.w	r3, r3, #4
 8006788:	2b00      	cmp	r3, #0
 800678a:	d005      	beq.n	8006798 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800678c:	4b59      	ldr	r3, [pc, #356]	; (80068f4 <HAL_RCC_ClockConfig+0x1c4>)
 800678e:	685b      	ldr	r3, [r3, #4]
 8006790:	4a58      	ldr	r2, [pc, #352]	; (80068f4 <HAL_RCC_ClockConfig+0x1c4>)
 8006792:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8006796:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006798:	687b      	ldr	r3, [r7, #4]
 800679a:	681b      	ldr	r3, [r3, #0]
 800679c:	f003 0308 	and.w	r3, r3, #8
 80067a0:	2b00      	cmp	r3, #0
 80067a2:	d005      	beq.n	80067b0 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80067a4:	4b53      	ldr	r3, [pc, #332]	; (80068f4 <HAL_RCC_ClockConfig+0x1c4>)
 80067a6:	685b      	ldr	r3, [r3, #4]
 80067a8:	4a52      	ldr	r2, [pc, #328]	; (80068f4 <HAL_RCC_ClockConfig+0x1c4>)
 80067aa:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 80067ae:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80067b0:	4b50      	ldr	r3, [pc, #320]	; (80068f4 <HAL_RCC_ClockConfig+0x1c4>)
 80067b2:	685b      	ldr	r3, [r3, #4]
 80067b4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80067b8:	687b      	ldr	r3, [r7, #4]
 80067ba:	689b      	ldr	r3, [r3, #8]
 80067bc:	494d      	ldr	r1, [pc, #308]	; (80068f4 <HAL_RCC_ClockConfig+0x1c4>)
 80067be:	4313      	orrs	r3, r2
 80067c0:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80067c2:	687b      	ldr	r3, [r7, #4]
 80067c4:	681b      	ldr	r3, [r3, #0]
 80067c6:	f003 0301 	and.w	r3, r3, #1
 80067ca:	2b00      	cmp	r3, #0
 80067cc:	d040      	beq.n	8006850 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80067ce:	687b      	ldr	r3, [r7, #4]
 80067d0:	685b      	ldr	r3, [r3, #4]
 80067d2:	2b01      	cmp	r3, #1
 80067d4:	d107      	bne.n	80067e6 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80067d6:	4b47      	ldr	r3, [pc, #284]	; (80068f4 <HAL_RCC_ClockConfig+0x1c4>)
 80067d8:	681b      	ldr	r3, [r3, #0]
 80067da:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80067de:	2b00      	cmp	r3, #0
 80067e0:	d115      	bne.n	800680e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80067e2:	2301      	movs	r3, #1
 80067e4:	e07f      	b.n	80068e6 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80067e6:	687b      	ldr	r3, [r7, #4]
 80067e8:	685b      	ldr	r3, [r3, #4]
 80067ea:	2b02      	cmp	r3, #2
 80067ec:	d107      	bne.n	80067fe <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80067ee:	4b41      	ldr	r3, [pc, #260]	; (80068f4 <HAL_RCC_ClockConfig+0x1c4>)
 80067f0:	681b      	ldr	r3, [r3, #0]
 80067f2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80067f6:	2b00      	cmp	r3, #0
 80067f8:	d109      	bne.n	800680e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80067fa:	2301      	movs	r3, #1
 80067fc:	e073      	b.n	80068e6 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80067fe:	4b3d      	ldr	r3, [pc, #244]	; (80068f4 <HAL_RCC_ClockConfig+0x1c4>)
 8006800:	681b      	ldr	r3, [r3, #0]
 8006802:	f003 0302 	and.w	r3, r3, #2
 8006806:	2b00      	cmp	r3, #0
 8006808:	d101      	bne.n	800680e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800680a:	2301      	movs	r3, #1
 800680c:	e06b      	b.n	80068e6 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800680e:	4b39      	ldr	r3, [pc, #228]	; (80068f4 <HAL_RCC_ClockConfig+0x1c4>)
 8006810:	685b      	ldr	r3, [r3, #4]
 8006812:	f023 0203 	bic.w	r2, r3, #3
 8006816:	687b      	ldr	r3, [r7, #4]
 8006818:	685b      	ldr	r3, [r3, #4]
 800681a:	4936      	ldr	r1, [pc, #216]	; (80068f4 <HAL_RCC_ClockConfig+0x1c4>)
 800681c:	4313      	orrs	r3, r2
 800681e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8006820:	f7fe fb06 	bl	8004e30 <HAL_GetTick>
 8006824:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006826:	e00a      	b.n	800683e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006828:	f7fe fb02 	bl	8004e30 <HAL_GetTick>
 800682c:	4602      	mov	r2, r0
 800682e:	68fb      	ldr	r3, [r7, #12]
 8006830:	1ad3      	subs	r3, r2, r3
 8006832:	f241 3288 	movw	r2, #5000	; 0x1388
 8006836:	4293      	cmp	r3, r2
 8006838:	d901      	bls.n	800683e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800683a:	2303      	movs	r3, #3
 800683c:	e053      	b.n	80068e6 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800683e:	4b2d      	ldr	r3, [pc, #180]	; (80068f4 <HAL_RCC_ClockConfig+0x1c4>)
 8006840:	685b      	ldr	r3, [r3, #4]
 8006842:	f003 020c 	and.w	r2, r3, #12
 8006846:	687b      	ldr	r3, [r7, #4]
 8006848:	685b      	ldr	r3, [r3, #4]
 800684a:	009b      	lsls	r3, r3, #2
 800684c:	429a      	cmp	r2, r3
 800684e:	d1eb      	bne.n	8006828 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8006850:	4b27      	ldr	r3, [pc, #156]	; (80068f0 <HAL_RCC_ClockConfig+0x1c0>)
 8006852:	681b      	ldr	r3, [r3, #0]
 8006854:	f003 0307 	and.w	r3, r3, #7
 8006858:	683a      	ldr	r2, [r7, #0]
 800685a:	429a      	cmp	r2, r3
 800685c:	d210      	bcs.n	8006880 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800685e:	4b24      	ldr	r3, [pc, #144]	; (80068f0 <HAL_RCC_ClockConfig+0x1c0>)
 8006860:	681b      	ldr	r3, [r3, #0]
 8006862:	f023 0207 	bic.w	r2, r3, #7
 8006866:	4922      	ldr	r1, [pc, #136]	; (80068f0 <HAL_RCC_ClockConfig+0x1c0>)
 8006868:	683b      	ldr	r3, [r7, #0]
 800686a:	4313      	orrs	r3, r2
 800686c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800686e:	4b20      	ldr	r3, [pc, #128]	; (80068f0 <HAL_RCC_ClockConfig+0x1c0>)
 8006870:	681b      	ldr	r3, [r3, #0]
 8006872:	f003 0307 	and.w	r3, r3, #7
 8006876:	683a      	ldr	r2, [r7, #0]
 8006878:	429a      	cmp	r2, r3
 800687a:	d001      	beq.n	8006880 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 800687c:	2301      	movs	r3, #1
 800687e:	e032      	b.n	80068e6 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006880:	687b      	ldr	r3, [r7, #4]
 8006882:	681b      	ldr	r3, [r3, #0]
 8006884:	f003 0304 	and.w	r3, r3, #4
 8006888:	2b00      	cmp	r3, #0
 800688a:	d008      	beq.n	800689e <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800688c:	4b19      	ldr	r3, [pc, #100]	; (80068f4 <HAL_RCC_ClockConfig+0x1c4>)
 800688e:	685b      	ldr	r3, [r3, #4]
 8006890:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8006894:	687b      	ldr	r3, [r7, #4]
 8006896:	68db      	ldr	r3, [r3, #12]
 8006898:	4916      	ldr	r1, [pc, #88]	; (80068f4 <HAL_RCC_ClockConfig+0x1c4>)
 800689a:	4313      	orrs	r3, r2
 800689c:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800689e:	687b      	ldr	r3, [r7, #4]
 80068a0:	681b      	ldr	r3, [r3, #0]
 80068a2:	f003 0308 	and.w	r3, r3, #8
 80068a6:	2b00      	cmp	r3, #0
 80068a8:	d009      	beq.n	80068be <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80068aa:	4b12      	ldr	r3, [pc, #72]	; (80068f4 <HAL_RCC_ClockConfig+0x1c4>)
 80068ac:	685b      	ldr	r3, [r3, #4]
 80068ae:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80068b2:	687b      	ldr	r3, [r7, #4]
 80068b4:	691b      	ldr	r3, [r3, #16]
 80068b6:	00db      	lsls	r3, r3, #3
 80068b8:	490e      	ldr	r1, [pc, #56]	; (80068f4 <HAL_RCC_ClockConfig+0x1c4>)
 80068ba:	4313      	orrs	r3, r2
 80068bc:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80068be:	f000 f821 	bl	8006904 <HAL_RCC_GetSysClockFreq>
 80068c2:	4602      	mov	r2, r0
 80068c4:	4b0b      	ldr	r3, [pc, #44]	; (80068f4 <HAL_RCC_ClockConfig+0x1c4>)
 80068c6:	685b      	ldr	r3, [r3, #4]
 80068c8:	091b      	lsrs	r3, r3, #4
 80068ca:	f003 030f 	and.w	r3, r3, #15
 80068ce:	490a      	ldr	r1, [pc, #40]	; (80068f8 <HAL_RCC_ClockConfig+0x1c8>)
 80068d0:	5ccb      	ldrb	r3, [r1, r3]
 80068d2:	fa22 f303 	lsr.w	r3, r2, r3
 80068d6:	4a09      	ldr	r2, [pc, #36]	; (80068fc <HAL_RCC_ClockConfig+0x1cc>)
 80068d8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80068da:	4b09      	ldr	r3, [pc, #36]	; (8006900 <HAL_RCC_ClockConfig+0x1d0>)
 80068dc:	681b      	ldr	r3, [r3, #0]
 80068de:	4618      	mov	r0, r3
 80068e0:	f7fe fa64 	bl	8004dac <HAL_InitTick>

  return HAL_OK;
 80068e4:	2300      	movs	r3, #0
}
 80068e6:	4618      	mov	r0, r3
 80068e8:	3710      	adds	r7, #16
 80068ea:	46bd      	mov	sp, r7
 80068ec:	bd80      	pop	{r7, pc}
 80068ee:	bf00      	nop
 80068f0:	40022000 	.word	0x40022000
 80068f4:	40021000 	.word	0x40021000
 80068f8:	08009328 	.word	0x08009328
 80068fc:	20000004 	.word	0x20000004
 8006900:	20000008 	.word	0x20000008

08006904 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006904:	b490      	push	{r4, r7}
 8006906:	b08a      	sub	sp, #40	; 0x28
 8006908:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 800690a:	4b2a      	ldr	r3, [pc, #168]	; (80069b4 <HAL_RCC_GetSysClockFreq+0xb0>)
 800690c:	1d3c      	adds	r4, r7, #4
 800690e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8006910:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8006914:	f240 2301 	movw	r3, #513	; 0x201
 8006918:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800691a:	2300      	movs	r3, #0
 800691c:	61fb      	str	r3, [r7, #28]
 800691e:	2300      	movs	r3, #0
 8006920:	61bb      	str	r3, [r7, #24]
 8006922:	2300      	movs	r3, #0
 8006924:	627b      	str	r3, [r7, #36]	; 0x24
 8006926:	2300      	movs	r3, #0
 8006928:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 800692a:	2300      	movs	r3, #0
 800692c:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800692e:	4b22      	ldr	r3, [pc, #136]	; (80069b8 <HAL_RCC_GetSysClockFreq+0xb4>)
 8006930:	685b      	ldr	r3, [r3, #4]
 8006932:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8006934:	69fb      	ldr	r3, [r7, #28]
 8006936:	f003 030c 	and.w	r3, r3, #12
 800693a:	2b04      	cmp	r3, #4
 800693c:	d002      	beq.n	8006944 <HAL_RCC_GetSysClockFreq+0x40>
 800693e:	2b08      	cmp	r3, #8
 8006940:	d003      	beq.n	800694a <HAL_RCC_GetSysClockFreq+0x46>
 8006942:	e02d      	b.n	80069a0 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8006944:	4b1d      	ldr	r3, [pc, #116]	; (80069bc <HAL_RCC_GetSysClockFreq+0xb8>)
 8006946:	623b      	str	r3, [r7, #32]
      break;
 8006948:	e02d      	b.n	80069a6 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800694a:	69fb      	ldr	r3, [r7, #28]
 800694c:	0c9b      	lsrs	r3, r3, #18
 800694e:	f003 030f 	and.w	r3, r3, #15
 8006952:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8006956:	4413      	add	r3, r2
 8006958:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 800695c:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800695e:	69fb      	ldr	r3, [r7, #28]
 8006960:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006964:	2b00      	cmp	r3, #0
 8006966:	d013      	beq.n	8006990 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8006968:	4b13      	ldr	r3, [pc, #76]	; (80069b8 <HAL_RCC_GetSysClockFreq+0xb4>)
 800696a:	685b      	ldr	r3, [r3, #4]
 800696c:	0c5b      	lsrs	r3, r3, #17
 800696e:	f003 0301 	and.w	r3, r3, #1
 8006972:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8006976:	4413      	add	r3, r2
 8006978:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 800697c:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800697e:	697b      	ldr	r3, [r7, #20]
 8006980:	4a0e      	ldr	r2, [pc, #56]	; (80069bc <HAL_RCC_GetSysClockFreq+0xb8>)
 8006982:	fb02 f203 	mul.w	r2, r2, r3
 8006986:	69bb      	ldr	r3, [r7, #24]
 8006988:	fbb2 f3f3 	udiv	r3, r2, r3
 800698c:	627b      	str	r3, [r7, #36]	; 0x24
 800698e:	e004      	b.n	800699a <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8006990:	697b      	ldr	r3, [r7, #20]
 8006992:	4a0b      	ldr	r2, [pc, #44]	; (80069c0 <HAL_RCC_GetSysClockFreq+0xbc>)
 8006994:	fb02 f303 	mul.w	r3, r2, r3
 8006998:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 800699a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800699c:	623b      	str	r3, [r7, #32]
      break;
 800699e:	e002      	b.n	80069a6 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80069a0:	4b06      	ldr	r3, [pc, #24]	; (80069bc <HAL_RCC_GetSysClockFreq+0xb8>)
 80069a2:	623b      	str	r3, [r7, #32]
      break;
 80069a4:	bf00      	nop
    }
  }
  return sysclockfreq;
 80069a6:	6a3b      	ldr	r3, [r7, #32]
}
 80069a8:	4618      	mov	r0, r3
 80069aa:	3728      	adds	r7, #40	; 0x28
 80069ac:	46bd      	mov	sp, r7
 80069ae:	bc90      	pop	{r4, r7}
 80069b0:	4770      	bx	lr
 80069b2:	bf00      	nop
 80069b4:	0800918c 	.word	0x0800918c
 80069b8:	40021000 	.word	0x40021000
 80069bc:	007a1200 	.word	0x007a1200
 80069c0:	003d0900 	.word	0x003d0900

080069c4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80069c4:	b480      	push	{r7}
 80069c6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80069c8:	4b02      	ldr	r3, [pc, #8]	; (80069d4 <HAL_RCC_GetHCLKFreq+0x10>)
 80069ca:	681b      	ldr	r3, [r3, #0]
}
 80069cc:	4618      	mov	r0, r3
 80069ce:	46bd      	mov	sp, r7
 80069d0:	bc80      	pop	{r7}
 80069d2:	4770      	bx	lr
 80069d4:	20000004 	.word	0x20000004

080069d8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80069d8:	b580      	push	{r7, lr}
 80069da:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80069dc:	f7ff fff2 	bl	80069c4 <HAL_RCC_GetHCLKFreq>
 80069e0:	4602      	mov	r2, r0
 80069e2:	4b05      	ldr	r3, [pc, #20]	; (80069f8 <HAL_RCC_GetPCLK1Freq+0x20>)
 80069e4:	685b      	ldr	r3, [r3, #4]
 80069e6:	0a1b      	lsrs	r3, r3, #8
 80069e8:	f003 0307 	and.w	r3, r3, #7
 80069ec:	4903      	ldr	r1, [pc, #12]	; (80069fc <HAL_RCC_GetPCLK1Freq+0x24>)
 80069ee:	5ccb      	ldrb	r3, [r1, r3]
 80069f0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80069f4:	4618      	mov	r0, r3
 80069f6:	bd80      	pop	{r7, pc}
 80069f8:	40021000 	.word	0x40021000
 80069fc:	08009338 	.word	0x08009338

08006a00 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8006a00:	b580      	push	{r7, lr}
 8006a02:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8006a04:	f7ff ffde 	bl	80069c4 <HAL_RCC_GetHCLKFreq>
 8006a08:	4602      	mov	r2, r0
 8006a0a:	4b05      	ldr	r3, [pc, #20]	; (8006a20 <HAL_RCC_GetPCLK2Freq+0x20>)
 8006a0c:	685b      	ldr	r3, [r3, #4]
 8006a0e:	0adb      	lsrs	r3, r3, #11
 8006a10:	f003 0307 	and.w	r3, r3, #7
 8006a14:	4903      	ldr	r1, [pc, #12]	; (8006a24 <HAL_RCC_GetPCLK2Freq+0x24>)
 8006a16:	5ccb      	ldrb	r3, [r1, r3]
 8006a18:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006a1c:	4618      	mov	r0, r3
 8006a1e:	bd80      	pop	{r7, pc}
 8006a20:	40021000 	.word	0x40021000
 8006a24:	08009338 	.word	0x08009338

08006a28 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8006a28:	b480      	push	{r7}
 8006a2a:	b085      	sub	sp, #20
 8006a2c:	af00      	add	r7, sp, #0
 8006a2e:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8006a30:	4b0a      	ldr	r3, [pc, #40]	; (8006a5c <RCC_Delay+0x34>)
 8006a32:	681b      	ldr	r3, [r3, #0]
 8006a34:	4a0a      	ldr	r2, [pc, #40]	; (8006a60 <RCC_Delay+0x38>)
 8006a36:	fba2 2303 	umull	r2, r3, r2, r3
 8006a3a:	0a5b      	lsrs	r3, r3, #9
 8006a3c:	687a      	ldr	r2, [r7, #4]
 8006a3e:	fb02 f303 	mul.w	r3, r2, r3
 8006a42:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8006a44:	bf00      	nop
  }
  while (Delay --);
 8006a46:	68fb      	ldr	r3, [r7, #12]
 8006a48:	1e5a      	subs	r2, r3, #1
 8006a4a:	60fa      	str	r2, [r7, #12]
 8006a4c:	2b00      	cmp	r3, #0
 8006a4e:	d1f9      	bne.n	8006a44 <RCC_Delay+0x1c>
}
 8006a50:	bf00      	nop
 8006a52:	bf00      	nop
 8006a54:	3714      	adds	r7, #20
 8006a56:	46bd      	mov	sp, r7
 8006a58:	bc80      	pop	{r7}
 8006a5a:	4770      	bx	lr
 8006a5c:	20000004 	.word	0x20000004
 8006a60:	10624dd3 	.word	0x10624dd3

08006a64 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_USB  USB peripheral clock
  @endif
  * @retval Frequency in Hz (0: means that no available frequency for the peripheral)
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8006a64:	b590      	push	{r4, r7, lr}
 8006a66:	b08d      	sub	sp, #52	; 0x34
 8006a68:	af00      	add	r7, sp, #0
 8006a6a:	6078      	str	r0, [r7, #4]
  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
  uint32_t pll2mul = 0U, pll3mul = 0U, prediv2 = 0U;
#endif /* STM32F105xC || STM32F107xC */
#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6) || \
    defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8006a6c:	4b5a      	ldr	r3, [pc, #360]	; (8006bd8 <HAL_RCCEx_GetPeriphCLKFreq+0x174>)
 8006a6e:	f107 040c 	add.w	r4, r7, #12
 8006a72:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8006a74:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8006a78:	f240 2301 	movw	r3, #513	; 0x201
 8006a7c:	813b      	strh	r3, [r7, #8]

  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
 8006a7e:	2300      	movs	r3, #0
 8006a80:	627b      	str	r3, [r7, #36]	; 0x24
 8006a82:	2300      	movs	r3, #0
 8006a84:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006a86:	2300      	movs	r3, #0
 8006a88:	623b      	str	r3, [r7, #32]
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG */
  uint32_t temp_reg = 0U, frequency = 0U;
 8006a8a:	2300      	movs	r3, #0
 8006a8c:	61fb      	str	r3, [r7, #28]
 8006a8e:	2300      	movs	r3, #0
 8006a90:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  switch (PeriphClk)
 8006a92:	687b      	ldr	r3, [r7, #4]
 8006a94:	2b10      	cmp	r3, #16
 8006a96:	d00a      	beq.n	8006aae <HAL_RCCEx_GetPeriphCLKFreq+0x4a>
 8006a98:	687b      	ldr	r3, [r7, #4]
 8006a9a:	2b10      	cmp	r3, #16
 8006a9c:	f200 8091 	bhi.w	8006bc2 <HAL_RCCEx_GetPeriphCLKFreq+0x15e>
 8006aa0:	687b      	ldr	r3, [r7, #4]
 8006aa2:	2b01      	cmp	r3, #1
 8006aa4:	d04c      	beq.n	8006b40 <HAL_RCCEx_GetPeriphCLKFreq+0xdc>
 8006aa6:	687b      	ldr	r3, [r7, #4]
 8006aa8:	2b02      	cmp	r3, #2
 8006aaa:	d07c      	beq.n	8006ba6 <HAL_RCCEx_GetPeriphCLKFreq+0x142>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
      break;
    }
    default:
    {
      break;
 8006aac:	e089      	b.n	8006bc2 <HAL_RCCEx_GetPeriphCLKFreq+0x15e>
      temp_reg = RCC->CFGR;
 8006aae:	4b4b      	ldr	r3, [pc, #300]	; (8006bdc <HAL_RCCEx_GetPeriphCLKFreq+0x178>)
 8006ab0:	685b      	ldr	r3, [r3, #4]
 8006ab2:	61fb      	str	r3, [r7, #28]
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLON))
 8006ab4:	4b49      	ldr	r3, [pc, #292]	; (8006bdc <HAL_RCCEx_GetPeriphCLKFreq+0x178>)
 8006ab6:	681b      	ldr	r3, [r3, #0]
 8006ab8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8006abc:	2b00      	cmp	r3, #0
 8006abe:	f000 8082 	beq.w	8006bc6 <HAL_RCCEx_GetPeriphCLKFreq+0x162>
        pllmul = aPLLMULFactorTable[(uint32_t)(temp_reg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8006ac2:	69fb      	ldr	r3, [r7, #28]
 8006ac4:	0c9b      	lsrs	r3, r3, #18
 8006ac6:	f003 030f 	and.w	r3, r3, #15
 8006aca:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8006ace:	4413      	add	r3, r2
 8006ad0:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8006ad4:	623b      	str	r3, [r7, #32]
        if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8006ad6:	69fb      	ldr	r3, [r7, #28]
 8006ad8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006adc:	2b00      	cmp	r3, #0
 8006ade:	d018      	beq.n	8006b12 <HAL_RCCEx_GetPeriphCLKFreq+0xae>
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8006ae0:	4b3e      	ldr	r3, [pc, #248]	; (8006bdc <HAL_RCCEx_GetPeriphCLKFreq+0x178>)
 8006ae2:	685b      	ldr	r3, [r3, #4]
 8006ae4:	0c5b      	lsrs	r3, r3, #17
 8006ae6:	f003 0301 	and.w	r3, r3, #1
 8006aea:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8006aee:	4413      	add	r3, r2
 8006af0:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8006af4:	627b      	str	r3, [r7, #36]	; 0x24
          if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8006af6:	69fb      	ldr	r3, [r7, #28]
 8006af8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006afc:	2b00      	cmp	r3, #0
 8006afe:	d00d      	beq.n	8006b1c <HAL_RCCEx_GetPeriphCLKFreq+0xb8>
            pllclk = (uint32_t)((HSE_VALUE / prediv1) * pllmul);
 8006b00:	4a37      	ldr	r2, [pc, #220]	; (8006be0 <HAL_RCCEx_GetPeriphCLKFreq+0x17c>)
 8006b02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b04:	fbb2 f2f3 	udiv	r2, r2, r3
 8006b08:	6a3b      	ldr	r3, [r7, #32]
 8006b0a:	fb02 f303 	mul.w	r3, r2, r3
 8006b0e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006b10:	e004      	b.n	8006b1c <HAL_RCCEx_GetPeriphCLKFreq+0xb8>
          pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8006b12:	6a3b      	ldr	r3, [r7, #32]
 8006b14:	4a33      	ldr	r2, [pc, #204]	; (8006be4 <HAL_RCCEx_GetPeriphCLKFreq+0x180>)
 8006b16:	fb02 f303 	mul.w	r3, r2, r3
 8006b1a:	62fb      	str	r3, [r7, #44]	; 0x2c
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL)
 8006b1c:	4b2f      	ldr	r3, [pc, #188]	; (8006bdc <HAL_RCCEx_GetPeriphCLKFreq+0x178>)
 8006b1e:	685b      	ldr	r3, [r3, #4]
 8006b20:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006b24:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006b28:	d102      	bne.n	8006b30 <HAL_RCCEx_GetPeriphCLKFreq+0xcc>
          frequency = pllclk;
 8006b2a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006b2c:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 8006b2e:	e04a      	b.n	8006bc6 <HAL_RCCEx_GetPeriphCLKFreq+0x162>
          frequency = (pllclk * 2) / 3;
 8006b30:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006b32:	005b      	lsls	r3, r3, #1
 8006b34:	4a2c      	ldr	r2, [pc, #176]	; (8006be8 <HAL_RCCEx_GetPeriphCLKFreq+0x184>)
 8006b36:	fba2 2303 	umull	r2, r3, r2, r3
 8006b3a:	085b      	lsrs	r3, r3, #1
 8006b3c:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 8006b3e:	e042      	b.n	8006bc6 <HAL_RCCEx_GetPeriphCLKFreq+0x162>
      temp_reg = RCC->BDCR;
 8006b40:	4b26      	ldr	r3, [pc, #152]	; (8006bdc <HAL_RCCEx_GetPeriphCLKFreq+0x178>)
 8006b42:	6a1b      	ldr	r3, [r3, #32]
 8006b44:	61fb      	str	r3, [r7, #28]
      if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY)))
 8006b46:	69fb      	ldr	r3, [r7, #28]
 8006b48:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006b4c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006b50:	d108      	bne.n	8006b64 <HAL_RCCEx_GetPeriphCLKFreq+0x100>
 8006b52:	69fb      	ldr	r3, [r7, #28]
 8006b54:	f003 0302 	and.w	r3, r3, #2
 8006b58:	2b00      	cmp	r3, #0
 8006b5a:	d003      	beq.n	8006b64 <HAL_RCCEx_GetPeriphCLKFreq+0x100>
        frequency = LSE_VALUE;
 8006b5c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006b60:	62bb      	str	r3, [r7, #40]	; 0x28
 8006b62:	e01f      	b.n	8006ba4 <HAL_RCCEx_GetPeriphCLKFreq+0x140>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 8006b64:	69fb      	ldr	r3, [r7, #28]
 8006b66:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006b6a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006b6e:	d109      	bne.n	8006b84 <HAL_RCCEx_GetPeriphCLKFreq+0x120>
 8006b70:	4b1a      	ldr	r3, [pc, #104]	; (8006bdc <HAL_RCCEx_GetPeriphCLKFreq+0x178>)
 8006b72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b74:	f003 0302 	and.w	r3, r3, #2
 8006b78:	2b00      	cmp	r3, #0
 8006b7a:	d003      	beq.n	8006b84 <HAL_RCCEx_GetPeriphCLKFreq+0x120>
        frequency = LSI_VALUE;
 8006b7c:	f649 4340 	movw	r3, #40000	; 0x9c40
 8006b80:	62bb      	str	r3, [r7, #40]	; 0x28
 8006b82:	e00f      	b.n	8006ba4 <HAL_RCCEx_GetPeriphCLKFreq+0x140>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_HSE_DIV128) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
 8006b84:	69fb      	ldr	r3, [r7, #28]
 8006b86:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006b8a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006b8e:	d11c      	bne.n	8006bca <HAL_RCCEx_GetPeriphCLKFreq+0x166>
 8006b90:	4b12      	ldr	r3, [pc, #72]	; (8006bdc <HAL_RCCEx_GetPeriphCLKFreq+0x178>)
 8006b92:	681b      	ldr	r3, [r3, #0]
 8006b94:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006b98:	2b00      	cmp	r3, #0
 8006b9a:	d016      	beq.n	8006bca <HAL_RCCEx_GetPeriphCLKFreq+0x166>
        frequency = HSE_VALUE / 128U;
 8006b9c:	f24f 4324 	movw	r3, #62500	; 0xf424
 8006ba0:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 8006ba2:	e012      	b.n	8006bca <HAL_RCCEx_GetPeriphCLKFreq+0x166>
 8006ba4:	e011      	b.n	8006bca <HAL_RCCEx_GetPeriphCLKFreq+0x166>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
 8006ba6:	f7ff ff2b 	bl	8006a00 <HAL_RCC_GetPCLK2Freq>
 8006baa:	4602      	mov	r2, r0
 8006bac:	4b0b      	ldr	r3, [pc, #44]	; (8006bdc <HAL_RCCEx_GetPeriphCLKFreq+0x178>)
 8006bae:	685b      	ldr	r3, [r3, #4]
 8006bb0:	0b9b      	lsrs	r3, r3, #14
 8006bb2:	f003 0303 	and.w	r3, r3, #3
 8006bb6:	3301      	adds	r3, #1
 8006bb8:	005b      	lsls	r3, r3, #1
 8006bba:	fbb2 f3f3 	udiv	r3, r2, r3
 8006bbe:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 8006bc0:	e004      	b.n	8006bcc <HAL_RCCEx_GetPeriphCLKFreq+0x168>
      break;
 8006bc2:	bf00      	nop
 8006bc4:	e002      	b.n	8006bcc <HAL_RCCEx_GetPeriphCLKFreq+0x168>
      break;
 8006bc6:	bf00      	nop
 8006bc8:	e000      	b.n	8006bcc <HAL_RCCEx_GetPeriphCLKFreq+0x168>
      break;
 8006bca:	bf00      	nop
    }
  }
  return (frequency);
 8006bcc:	6abb      	ldr	r3, [r7, #40]	; 0x28
}
 8006bce:	4618      	mov	r0, r3
 8006bd0:	3734      	adds	r7, #52	; 0x34
 8006bd2:	46bd      	mov	sp, r7
 8006bd4:	bd90      	pop	{r4, r7, pc}
 8006bd6:	bf00      	nop
 8006bd8:	0800919c 	.word	0x0800919c
 8006bdc:	40021000 	.word	0x40021000
 8006be0:	007a1200 	.word	0x007a1200
 8006be4:	003d0900 	.word	0x003d0900
 8006be8:	aaaaaaab 	.word	0xaaaaaaab

08006bec <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006bec:	b580      	push	{r7, lr}
 8006bee:	b082      	sub	sp, #8
 8006bf0:	af00      	add	r7, sp, #0
 8006bf2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006bf4:	687b      	ldr	r3, [r7, #4]
 8006bf6:	2b00      	cmp	r3, #0
 8006bf8:	d101      	bne.n	8006bfe <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8006bfa:	2301      	movs	r3, #1
 8006bfc:	e041      	b.n	8006c82 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006bfe:	687b      	ldr	r3, [r7, #4]
 8006c00:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006c04:	b2db      	uxtb	r3, r3
 8006c06:	2b00      	cmp	r3, #0
 8006c08:	d106      	bne.n	8006c18 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006c0a:	687b      	ldr	r3, [r7, #4]
 8006c0c:	2200      	movs	r2, #0
 8006c0e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8006c12:	6878      	ldr	r0, [r7, #4]
 8006c14:	f7fd ff02 	bl	8004a1c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006c18:	687b      	ldr	r3, [r7, #4]
 8006c1a:	2202      	movs	r2, #2
 8006c1c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006c20:	687b      	ldr	r3, [r7, #4]
 8006c22:	681a      	ldr	r2, [r3, #0]
 8006c24:	687b      	ldr	r3, [r7, #4]
 8006c26:	3304      	adds	r3, #4
 8006c28:	4619      	mov	r1, r3
 8006c2a:	4610      	mov	r0, r2
 8006c2c:	f000 fbe0 	bl	80073f0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006c30:	687b      	ldr	r3, [r7, #4]
 8006c32:	2201      	movs	r2, #1
 8006c34:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006c38:	687b      	ldr	r3, [r7, #4]
 8006c3a:	2201      	movs	r2, #1
 8006c3c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006c40:	687b      	ldr	r3, [r7, #4]
 8006c42:	2201      	movs	r2, #1
 8006c44:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006c48:	687b      	ldr	r3, [r7, #4]
 8006c4a:	2201      	movs	r2, #1
 8006c4c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006c50:	687b      	ldr	r3, [r7, #4]
 8006c52:	2201      	movs	r2, #1
 8006c54:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006c58:	687b      	ldr	r3, [r7, #4]
 8006c5a:	2201      	movs	r2, #1
 8006c5c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006c60:	687b      	ldr	r3, [r7, #4]
 8006c62:	2201      	movs	r2, #1
 8006c64:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8006c68:	687b      	ldr	r3, [r7, #4]
 8006c6a:	2201      	movs	r2, #1
 8006c6c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006c70:	687b      	ldr	r3, [r7, #4]
 8006c72:	2201      	movs	r2, #1
 8006c74:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006c78:	687b      	ldr	r3, [r7, #4]
 8006c7a:	2201      	movs	r2, #1
 8006c7c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006c80:	2300      	movs	r3, #0
}
 8006c82:	4618      	mov	r0, r3
 8006c84:	3708      	adds	r7, #8
 8006c86:	46bd      	mov	sp, r7
 8006c88:	bd80      	pop	{r7, pc}

08006c8a <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8006c8a:	b580      	push	{r7, lr}
 8006c8c:	b082      	sub	sp, #8
 8006c8e:	af00      	add	r7, sp, #0
 8006c90:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006c92:	687b      	ldr	r3, [r7, #4]
 8006c94:	2b00      	cmp	r3, #0
 8006c96:	d101      	bne.n	8006c9c <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8006c98:	2301      	movs	r3, #1
 8006c9a:	e041      	b.n	8006d20 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006c9c:	687b      	ldr	r3, [r7, #4]
 8006c9e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006ca2:	b2db      	uxtb	r3, r3
 8006ca4:	2b00      	cmp	r3, #0
 8006ca6:	d106      	bne.n	8006cb6 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006ca8:	687b      	ldr	r3, [r7, #4]
 8006caa:	2200      	movs	r2, #0
 8006cac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8006cb0:	6878      	ldr	r0, [r7, #4]
 8006cb2:	f000 f839 	bl	8006d28 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006cb6:	687b      	ldr	r3, [r7, #4]
 8006cb8:	2202      	movs	r2, #2
 8006cba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006cbe:	687b      	ldr	r3, [r7, #4]
 8006cc0:	681a      	ldr	r2, [r3, #0]
 8006cc2:	687b      	ldr	r3, [r7, #4]
 8006cc4:	3304      	adds	r3, #4
 8006cc6:	4619      	mov	r1, r3
 8006cc8:	4610      	mov	r0, r2
 8006cca:	f000 fb91 	bl	80073f0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006cce:	687b      	ldr	r3, [r7, #4]
 8006cd0:	2201      	movs	r2, #1
 8006cd2:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006cd6:	687b      	ldr	r3, [r7, #4]
 8006cd8:	2201      	movs	r2, #1
 8006cda:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006cde:	687b      	ldr	r3, [r7, #4]
 8006ce0:	2201      	movs	r2, #1
 8006ce2:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006ce6:	687b      	ldr	r3, [r7, #4]
 8006ce8:	2201      	movs	r2, #1
 8006cea:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006cee:	687b      	ldr	r3, [r7, #4]
 8006cf0:	2201      	movs	r2, #1
 8006cf2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006cf6:	687b      	ldr	r3, [r7, #4]
 8006cf8:	2201      	movs	r2, #1
 8006cfa:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006cfe:	687b      	ldr	r3, [r7, #4]
 8006d00:	2201      	movs	r2, #1
 8006d02:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8006d06:	687b      	ldr	r3, [r7, #4]
 8006d08:	2201      	movs	r2, #1
 8006d0a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006d0e:	687b      	ldr	r3, [r7, #4]
 8006d10:	2201      	movs	r2, #1
 8006d12:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006d16:	687b      	ldr	r3, [r7, #4]
 8006d18:	2201      	movs	r2, #1
 8006d1a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006d1e:	2300      	movs	r3, #0
}
 8006d20:	4618      	mov	r0, r3
 8006d22:	3708      	adds	r7, #8
 8006d24:	46bd      	mov	sp, r7
 8006d26:	bd80      	pop	{r7, pc}

08006d28 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8006d28:	b480      	push	{r7}
 8006d2a:	b083      	sub	sp, #12
 8006d2c:	af00      	add	r7, sp, #0
 8006d2e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8006d30:	bf00      	nop
 8006d32:	370c      	adds	r7, #12
 8006d34:	46bd      	mov	sp, r7
 8006d36:	bc80      	pop	{r7}
 8006d38:	4770      	bx	lr
	...

08006d3c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006d3c:	b580      	push	{r7, lr}
 8006d3e:	b084      	sub	sp, #16
 8006d40:	af00      	add	r7, sp, #0
 8006d42:	6078      	str	r0, [r7, #4]
 8006d44:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8006d46:	683b      	ldr	r3, [r7, #0]
 8006d48:	2b00      	cmp	r3, #0
 8006d4a:	d109      	bne.n	8006d60 <HAL_TIM_PWM_Start+0x24>
 8006d4c:	687b      	ldr	r3, [r7, #4]
 8006d4e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006d52:	b2db      	uxtb	r3, r3
 8006d54:	2b01      	cmp	r3, #1
 8006d56:	bf14      	ite	ne
 8006d58:	2301      	movne	r3, #1
 8006d5a:	2300      	moveq	r3, #0
 8006d5c:	b2db      	uxtb	r3, r3
 8006d5e:	e022      	b.n	8006da6 <HAL_TIM_PWM_Start+0x6a>
 8006d60:	683b      	ldr	r3, [r7, #0]
 8006d62:	2b04      	cmp	r3, #4
 8006d64:	d109      	bne.n	8006d7a <HAL_TIM_PWM_Start+0x3e>
 8006d66:	687b      	ldr	r3, [r7, #4]
 8006d68:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8006d6c:	b2db      	uxtb	r3, r3
 8006d6e:	2b01      	cmp	r3, #1
 8006d70:	bf14      	ite	ne
 8006d72:	2301      	movne	r3, #1
 8006d74:	2300      	moveq	r3, #0
 8006d76:	b2db      	uxtb	r3, r3
 8006d78:	e015      	b.n	8006da6 <HAL_TIM_PWM_Start+0x6a>
 8006d7a:	683b      	ldr	r3, [r7, #0]
 8006d7c:	2b08      	cmp	r3, #8
 8006d7e:	d109      	bne.n	8006d94 <HAL_TIM_PWM_Start+0x58>
 8006d80:	687b      	ldr	r3, [r7, #4]
 8006d82:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8006d86:	b2db      	uxtb	r3, r3
 8006d88:	2b01      	cmp	r3, #1
 8006d8a:	bf14      	ite	ne
 8006d8c:	2301      	movne	r3, #1
 8006d8e:	2300      	moveq	r3, #0
 8006d90:	b2db      	uxtb	r3, r3
 8006d92:	e008      	b.n	8006da6 <HAL_TIM_PWM_Start+0x6a>
 8006d94:	687b      	ldr	r3, [r7, #4]
 8006d96:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006d9a:	b2db      	uxtb	r3, r3
 8006d9c:	2b01      	cmp	r3, #1
 8006d9e:	bf14      	ite	ne
 8006da0:	2301      	movne	r3, #1
 8006da2:	2300      	moveq	r3, #0
 8006da4:	b2db      	uxtb	r3, r3
 8006da6:	2b00      	cmp	r3, #0
 8006da8:	d001      	beq.n	8006dae <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8006daa:	2301      	movs	r3, #1
 8006dac:	e05e      	b.n	8006e6c <HAL_TIM_PWM_Start+0x130>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8006dae:	683b      	ldr	r3, [r7, #0]
 8006db0:	2b00      	cmp	r3, #0
 8006db2:	d104      	bne.n	8006dbe <HAL_TIM_PWM_Start+0x82>
 8006db4:	687b      	ldr	r3, [r7, #4]
 8006db6:	2202      	movs	r2, #2
 8006db8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006dbc:	e013      	b.n	8006de6 <HAL_TIM_PWM_Start+0xaa>
 8006dbe:	683b      	ldr	r3, [r7, #0]
 8006dc0:	2b04      	cmp	r3, #4
 8006dc2:	d104      	bne.n	8006dce <HAL_TIM_PWM_Start+0x92>
 8006dc4:	687b      	ldr	r3, [r7, #4]
 8006dc6:	2202      	movs	r2, #2
 8006dc8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006dcc:	e00b      	b.n	8006de6 <HAL_TIM_PWM_Start+0xaa>
 8006dce:	683b      	ldr	r3, [r7, #0]
 8006dd0:	2b08      	cmp	r3, #8
 8006dd2:	d104      	bne.n	8006dde <HAL_TIM_PWM_Start+0xa2>
 8006dd4:	687b      	ldr	r3, [r7, #4]
 8006dd6:	2202      	movs	r2, #2
 8006dd8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006ddc:	e003      	b.n	8006de6 <HAL_TIM_PWM_Start+0xaa>
 8006dde:	687b      	ldr	r3, [r7, #4]
 8006de0:	2202      	movs	r2, #2
 8006de2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8006de6:	687b      	ldr	r3, [r7, #4]
 8006de8:	681b      	ldr	r3, [r3, #0]
 8006dea:	2201      	movs	r2, #1
 8006dec:	6839      	ldr	r1, [r7, #0]
 8006dee:	4618      	mov	r0, r3
 8006df0:	f000 fd7e 	bl	80078f0 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8006df4:	687b      	ldr	r3, [r7, #4]
 8006df6:	681b      	ldr	r3, [r3, #0]
 8006df8:	4a1e      	ldr	r2, [pc, #120]	; (8006e74 <HAL_TIM_PWM_Start+0x138>)
 8006dfa:	4293      	cmp	r3, r2
 8006dfc:	d107      	bne.n	8006e0e <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8006dfe:	687b      	ldr	r3, [r7, #4]
 8006e00:	681b      	ldr	r3, [r3, #0]
 8006e02:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006e04:	687b      	ldr	r3, [r7, #4]
 8006e06:	681b      	ldr	r3, [r3, #0]
 8006e08:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8006e0c:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006e0e:	687b      	ldr	r3, [r7, #4]
 8006e10:	681b      	ldr	r3, [r3, #0]
 8006e12:	4a18      	ldr	r2, [pc, #96]	; (8006e74 <HAL_TIM_PWM_Start+0x138>)
 8006e14:	4293      	cmp	r3, r2
 8006e16:	d00e      	beq.n	8006e36 <HAL_TIM_PWM_Start+0xfa>
 8006e18:	687b      	ldr	r3, [r7, #4]
 8006e1a:	681b      	ldr	r3, [r3, #0]
 8006e1c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006e20:	d009      	beq.n	8006e36 <HAL_TIM_PWM_Start+0xfa>
 8006e22:	687b      	ldr	r3, [r7, #4]
 8006e24:	681b      	ldr	r3, [r3, #0]
 8006e26:	4a14      	ldr	r2, [pc, #80]	; (8006e78 <HAL_TIM_PWM_Start+0x13c>)
 8006e28:	4293      	cmp	r3, r2
 8006e2a:	d004      	beq.n	8006e36 <HAL_TIM_PWM_Start+0xfa>
 8006e2c:	687b      	ldr	r3, [r7, #4]
 8006e2e:	681b      	ldr	r3, [r3, #0]
 8006e30:	4a12      	ldr	r2, [pc, #72]	; (8006e7c <HAL_TIM_PWM_Start+0x140>)
 8006e32:	4293      	cmp	r3, r2
 8006e34:	d111      	bne.n	8006e5a <HAL_TIM_PWM_Start+0x11e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006e36:	687b      	ldr	r3, [r7, #4]
 8006e38:	681b      	ldr	r3, [r3, #0]
 8006e3a:	689b      	ldr	r3, [r3, #8]
 8006e3c:	f003 0307 	and.w	r3, r3, #7
 8006e40:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006e42:	68fb      	ldr	r3, [r7, #12]
 8006e44:	2b06      	cmp	r3, #6
 8006e46:	d010      	beq.n	8006e6a <HAL_TIM_PWM_Start+0x12e>
    {
      __HAL_TIM_ENABLE(htim);
 8006e48:	687b      	ldr	r3, [r7, #4]
 8006e4a:	681b      	ldr	r3, [r3, #0]
 8006e4c:	681a      	ldr	r2, [r3, #0]
 8006e4e:	687b      	ldr	r3, [r7, #4]
 8006e50:	681b      	ldr	r3, [r3, #0]
 8006e52:	f042 0201 	orr.w	r2, r2, #1
 8006e56:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006e58:	e007      	b.n	8006e6a <HAL_TIM_PWM_Start+0x12e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006e5a:	687b      	ldr	r3, [r7, #4]
 8006e5c:	681b      	ldr	r3, [r3, #0]
 8006e5e:	681a      	ldr	r2, [r3, #0]
 8006e60:	687b      	ldr	r3, [r7, #4]
 8006e62:	681b      	ldr	r3, [r3, #0]
 8006e64:	f042 0201 	orr.w	r2, r2, #1
 8006e68:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8006e6a:	2300      	movs	r3, #0
}
 8006e6c:	4618      	mov	r0, r3
 8006e6e:	3710      	adds	r7, #16
 8006e70:	46bd      	mov	sp, r7
 8006e72:	bd80      	pop	{r7, pc}
 8006e74:	40012c00 	.word	0x40012c00
 8006e78:	40000400 	.word	0x40000400
 8006e7c:	40000800 	.word	0x40000800

08006e80 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8006e80:	b580      	push	{r7, lr}
 8006e82:	b082      	sub	sp, #8
 8006e84:	af00      	add	r7, sp, #0
 8006e86:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8006e88:	687b      	ldr	r3, [r7, #4]
 8006e8a:	681b      	ldr	r3, [r3, #0]
 8006e8c:	691b      	ldr	r3, [r3, #16]
 8006e8e:	f003 0302 	and.w	r3, r3, #2
 8006e92:	2b02      	cmp	r3, #2
 8006e94:	d122      	bne.n	8006edc <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8006e96:	687b      	ldr	r3, [r7, #4]
 8006e98:	681b      	ldr	r3, [r3, #0]
 8006e9a:	68db      	ldr	r3, [r3, #12]
 8006e9c:	f003 0302 	and.w	r3, r3, #2
 8006ea0:	2b02      	cmp	r3, #2
 8006ea2:	d11b      	bne.n	8006edc <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8006ea4:	687b      	ldr	r3, [r7, #4]
 8006ea6:	681b      	ldr	r3, [r3, #0]
 8006ea8:	f06f 0202 	mvn.w	r2, #2
 8006eac:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8006eae:	687b      	ldr	r3, [r7, #4]
 8006eb0:	2201      	movs	r2, #1
 8006eb2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8006eb4:	687b      	ldr	r3, [r7, #4]
 8006eb6:	681b      	ldr	r3, [r3, #0]
 8006eb8:	699b      	ldr	r3, [r3, #24]
 8006eba:	f003 0303 	and.w	r3, r3, #3
 8006ebe:	2b00      	cmp	r3, #0
 8006ec0:	d003      	beq.n	8006eca <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8006ec2:	6878      	ldr	r0, [r7, #4]
 8006ec4:	f000 fa78 	bl	80073b8 <HAL_TIM_IC_CaptureCallback>
 8006ec8:	e005      	b.n	8006ed6 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8006eca:	6878      	ldr	r0, [r7, #4]
 8006ecc:	f000 fa6b 	bl	80073a6 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006ed0:	6878      	ldr	r0, [r7, #4]
 8006ed2:	f000 fa7a 	bl	80073ca <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006ed6:	687b      	ldr	r3, [r7, #4]
 8006ed8:	2200      	movs	r2, #0
 8006eda:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8006edc:	687b      	ldr	r3, [r7, #4]
 8006ede:	681b      	ldr	r3, [r3, #0]
 8006ee0:	691b      	ldr	r3, [r3, #16]
 8006ee2:	f003 0304 	and.w	r3, r3, #4
 8006ee6:	2b04      	cmp	r3, #4
 8006ee8:	d122      	bne.n	8006f30 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8006eea:	687b      	ldr	r3, [r7, #4]
 8006eec:	681b      	ldr	r3, [r3, #0]
 8006eee:	68db      	ldr	r3, [r3, #12]
 8006ef0:	f003 0304 	and.w	r3, r3, #4
 8006ef4:	2b04      	cmp	r3, #4
 8006ef6:	d11b      	bne.n	8006f30 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8006ef8:	687b      	ldr	r3, [r7, #4]
 8006efa:	681b      	ldr	r3, [r3, #0]
 8006efc:	f06f 0204 	mvn.w	r2, #4
 8006f00:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8006f02:	687b      	ldr	r3, [r7, #4]
 8006f04:	2202      	movs	r2, #2
 8006f06:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8006f08:	687b      	ldr	r3, [r7, #4]
 8006f0a:	681b      	ldr	r3, [r3, #0]
 8006f0c:	699b      	ldr	r3, [r3, #24]
 8006f0e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006f12:	2b00      	cmp	r3, #0
 8006f14:	d003      	beq.n	8006f1e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006f16:	6878      	ldr	r0, [r7, #4]
 8006f18:	f000 fa4e 	bl	80073b8 <HAL_TIM_IC_CaptureCallback>
 8006f1c:	e005      	b.n	8006f2a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006f1e:	6878      	ldr	r0, [r7, #4]
 8006f20:	f000 fa41 	bl	80073a6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006f24:	6878      	ldr	r0, [r7, #4]
 8006f26:	f000 fa50 	bl	80073ca <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006f2a:	687b      	ldr	r3, [r7, #4]
 8006f2c:	2200      	movs	r2, #0
 8006f2e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8006f30:	687b      	ldr	r3, [r7, #4]
 8006f32:	681b      	ldr	r3, [r3, #0]
 8006f34:	691b      	ldr	r3, [r3, #16]
 8006f36:	f003 0308 	and.w	r3, r3, #8
 8006f3a:	2b08      	cmp	r3, #8
 8006f3c:	d122      	bne.n	8006f84 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8006f3e:	687b      	ldr	r3, [r7, #4]
 8006f40:	681b      	ldr	r3, [r3, #0]
 8006f42:	68db      	ldr	r3, [r3, #12]
 8006f44:	f003 0308 	and.w	r3, r3, #8
 8006f48:	2b08      	cmp	r3, #8
 8006f4a:	d11b      	bne.n	8006f84 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8006f4c:	687b      	ldr	r3, [r7, #4]
 8006f4e:	681b      	ldr	r3, [r3, #0]
 8006f50:	f06f 0208 	mvn.w	r2, #8
 8006f54:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8006f56:	687b      	ldr	r3, [r7, #4]
 8006f58:	2204      	movs	r2, #4
 8006f5a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8006f5c:	687b      	ldr	r3, [r7, #4]
 8006f5e:	681b      	ldr	r3, [r3, #0]
 8006f60:	69db      	ldr	r3, [r3, #28]
 8006f62:	f003 0303 	and.w	r3, r3, #3
 8006f66:	2b00      	cmp	r3, #0
 8006f68:	d003      	beq.n	8006f72 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006f6a:	6878      	ldr	r0, [r7, #4]
 8006f6c:	f000 fa24 	bl	80073b8 <HAL_TIM_IC_CaptureCallback>
 8006f70:	e005      	b.n	8006f7e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006f72:	6878      	ldr	r0, [r7, #4]
 8006f74:	f000 fa17 	bl	80073a6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006f78:	6878      	ldr	r0, [r7, #4]
 8006f7a:	f000 fa26 	bl	80073ca <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006f7e:	687b      	ldr	r3, [r7, #4]
 8006f80:	2200      	movs	r2, #0
 8006f82:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8006f84:	687b      	ldr	r3, [r7, #4]
 8006f86:	681b      	ldr	r3, [r3, #0]
 8006f88:	691b      	ldr	r3, [r3, #16]
 8006f8a:	f003 0310 	and.w	r3, r3, #16
 8006f8e:	2b10      	cmp	r3, #16
 8006f90:	d122      	bne.n	8006fd8 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8006f92:	687b      	ldr	r3, [r7, #4]
 8006f94:	681b      	ldr	r3, [r3, #0]
 8006f96:	68db      	ldr	r3, [r3, #12]
 8006f98:	f003 0310 	and.w	r3, r3, #16
 8006f9c:	2b10      	cmp	r3, #16
 8006f9e:	d11b      	bne.n	8006fd8 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8006fa0:	687b      	ldr	r3, [r7, #4]
 8006fa2:	681b      	ldr	r3, [r3, #0]
 8006fa4:	f06f 0210 	mvn.w	r2, #16
 8006fa8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006faa:	687b      	ldr	r3, [r7, #4]
 8006fac:	2208      	movs	r2, #8
 8006fae:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8006fb0:	687b      	ldr	r3, [r7, #4]
 8006fb2:	681b      	ldr	r3, [r3, #0]
 8006fb4:	69db      	ldr	r3, [r3, #28]
 8006fb6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006fba:	2b00      	cmp	r3, #0
 8006fbc:	d003      	beq.n	8006fc6 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006fbe:	6878      	ldr	r0, [r7, #4]
 8006fc0:	f000 f9fa 	bl	80073b8 <HAL_TIM_IC_CaptureCallback>
 8006fc4:	e005      	b.n	8006fd2 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006fc6:	6878      	ldr	r0, [r7, #4]
 8006fc8:	f000 f9ed 	bl	80073a6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006fcc:	6878      	ldr	r0, [r7, #4]
 8006fce:	f000 f9fc 	bl	80073ca <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006fd2:	687b      	ldr	r3, [r7, #4]
 8006fd4:	2200      	movs	r2, #0
 8006fd6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8006fd8:	687b      	ldr	r3, [r7, #4]
 8006fda:	681b      	ldr	r3, [r3, #0]
 8006fdc:	691b      	ldr	r3, [r3, #16]
 8006fde:	f003 0301 	and.w	r3, r3, #1
 8006fe2:	2b01      	cmp	r3, #1
 8006fe4:	d10e      	bne.n	8007004 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8006fe6:	687b      	ldr	r3, [r7, #4]
 8006fe8:	681b      	ldr	r3, [r3, #0]
 8006fea:	68db      	ldr	r3, [r3, #12]
 8006fec:	f003 0301 	and.w	r3, r3, #1
 8006ff0:	2b01      	cmp	r3, #1
 8006ff2:	d107      	bne.n	8007004 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8006ff4:	687b      	ldr	r3, [r7, #4]
 8006ff6:	681b      	ldr	r3, [r3, #0]
 8006ff8:	f06f 0201 	mvn.w	r2, #1
 8006ffc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8006ffe:	6878      	ldr	r0, [r7, #4]
 8007000:	f000 f9c8 	bl	8007394 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8007004:	687b      	ldr	r3, [r7, #4]
 8007006:	681b      	ldr	r3, [r3, #0]
 8007008:	691b      	ldr	r3, [r3, #16]
 800700a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800700e:	2b80      	cmp	r3, #128	; 0x80
 8007010:	d10e      	bne.n	8007030 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8007012:	687b      	ldr	r3, [r7, #4]
 8007014:	681b      	ldr	r3, [r3, #0]
 8007016:	68db      	ldr	r3, [r3, #12]
 8007018:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800701c:	2b80      	cmp	r3, #128	; 0x80
 800701e:	d107      	bne.n	8007030 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8007020:	687b      	ldr	r3, [r7, #4]
 8007022:	681b      	ldr	r3, [r3, #0]
 8007024:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8007028:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800702a:	6878      	ldr	r0, [r7, #4]
 800702c:	f000 fceb 	bl	8007a06 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8007030:	687b      	ldr	r3, [r7, #4]
 8007032:	681b      	ldr	r3, [r3, #0]
 8007034:	691b      	ldr	r3, [r3, #16]
 8007036:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800703a:	2b40      	cmp	r3, #64	; 0x40
 800703c:	d10e      	bne.n	800705c <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800703e:	687b      	ldr	r3, [r7, #4]
 8007040:	681b      	ldr	r3, [r3, #0]
 8007042:	68db      	ldr	r3, [r3, #12]
 8007044:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007048:	2b40      	cmp	r3, #64	; 0x40
 800704a:	d107      	bne.n	800705c <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800704c:	687b      	ldr	r3, [r7, #4]
 800704e:	681b      	ldr	r3, [r3, #0]
 8007050:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8007054:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8007056:	6878      	ldr	r0, [r7, #4]
 8007058:	f000 f9c0 	bl	80073dc <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800705c:	687b      	ldr	r3, [r7, #4]
 800705e:	681b      	ldr	r3, [r3, #0]
 8007060:	691b      	ldr	r3, [r3, #16]
 8007062:	f003 0320 	and.w	r3, r3, #32
 8007066:	2b20      	cmp	r3, #32
 8007068:	d10e      	bne.n	8007088 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800706a:	687b      	ldr	r3, [r7, #4]
 800706c:	681b      	ldr	r3, [r3, #0]
 800706e:	68db      	ldr	r3, [r3, #12]
 8007070:	f003 0320 	and.w	r3, r3, #32
 8007074:	2b20      	cmp	r3, #32
 8007076:	d107      	bne.n	8007088 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8007078:	687b      	ldr	r3, [r7, #4]
 800707a:	681b      	ldr	r3, [r3, #0]
 800707c:	f06f 0220 	mvn.w	r2, #32
 8007080:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8007082:	6878      	ldr	r0, [r7, #4]
 8007084:	f000 fcb6 	bl	80079f4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8007088:	bf00      	nop
 800708a:	3708      	adds	r7, #8
 800708c:	46bd      	mov	sp, r7
 800708e:	bd80      	pop	{r7, pc}

08007090 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8007090:	b580      	push	{r7, lr}
 8007092:	b084      	sub	sp, #16
 8007094:	af00      	add	r7, sp, #0
 8007096:	60f8      	str	r0, [r7, #12]
 8007098:	60b9      	str	r1, [r7, #8]
 800709a:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800709c:	68fb      	ldr	r3, [r7, #12]
 800709e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80070a2:	2b01      	cmp	r3, #1
 80070a4:	d101      	bne.n	80070aa <HAL_TIM_PWM_ConfigChannel+0x1a>
 80070a6:	2302      	movs	r3, #2
 80070a8:	e0ac      	b.n	8007204 <HAL_TIM_PWM_ConfigChannel+0x174>
 80070aa:	68fb      	ldr	r3, [r7, #12]
 80070ac:	2201      	movs	r2, #1
 80070ae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 80070b2:	687b      	ldr	r3, [r7, #4]
 80070b4:	2b0c      	cmp	r3, #12
 80070b6:	f200 809f 	bhi.w	80071f8 <HAL_TIM_PWM_ConfigChannel+0x168>
 80070ba:	a201      	add	r2, pc, #4	; (adr r2, 80070c0 <HAL_TIM_PWM_ConfigChannel+0x30>)
 80070bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80070c0:	080070f5 	.word	0x080070f5
 80070c4:	080071f9 	.word	0x080071f9
 80070c8:	080071f9 	.word	0x080071f9
 80070cc:	080071f9 	.word	0x080071f9
 80070d0:	08007135 	.word	0x08007135
 80070d4:	080071f9 	.word	0x080071f9
 80070d8:	080071f9 	.word	0x080071f9
 80070dc:	080071f9 	.word	0x080071f9
 80070e0:	08007177 	.word	0x08007177
 80070e4:	080071f9 	.word	0x080071f9
 80070e8:	080071f9 	.word	0x080071f9
 80070ec:	080071f9 	.word	0x080071f9
 80070f0:	080071b7 	.word	0x080071b7
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80070f4:	68fb      	ldr	r3, [r7, #12]
 80070f6:	681b      	ldr	r3, [r3, #0]
 80070f8:	68b9      	ldr	r1, [r7, #8]
 80070fa:	4618      	mov	r0, r3
 80070fc:	f000 f9da 	bl	80074b4 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8007100:	68fb      	ldr	r3, [r7, #12]
 8007102:	681b      	ldr	r3, [r3, #0]
 8007104:	699a      	ldr	r2, [r3, #24]
 8007106:	68fb      	ldr	r3, [r7, #12]
 8007108:	681b      	ldr	r3, [r3, #0]
 800710a:	f042 0208 	orr.w	r2, r2, #8
 800710e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8007110:	68fb      	ldr	r3, [r7, #12]
 8007112:	681b      	ldr	r3, [r3, #0]
 8007114:	699a      	ldr	r2, [r3, #24]
 8007116:	68fb      	ldr	r3, [r7, #12]
 8007118:	681b      	ldr	r3, [r3, #0]
 800711a:	f022 0204 	bic.w	r2, r2, #4
 800711e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8007120:	68fb      	ldr	r3, [r7, #12]
 8007122:	681b      	ldr	r3, [r3, #0]
 8007124:	6999      	ldr	r1, [r3, #24]
 8007126:	68bb      	ldr	r3, [r7, #8]
 8007128:	691a      	ldr	r2, [r3, #16]
 800712a:	68fb      	ldr	r3, [r7, #12]
 800712c:	681b      	ldr	r3, [r3, #0]
 800712e:	430a      	orrs	r2, r1
 8007130:	619a      	str	r2, [r3, #24]
      break;
 8007132:	e062      	b.n	80071fa <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8007134:	68fb      	ldr	r3, [r7, #12]
 8007136:	681b      	ldr	r3, [r3, #0]
 8007138:	68b9      	ldr	r1, [r7, #8]
 800713a:	4618      	mov	r0, r3
 800713c:	f000 fa20 	bl	8007580 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8007140:	68fb      	ldr	r3, [r7, #12]
 8007142:	681b      	ldr	r3, [r3, #0]
 8007144:	699a      	ldr	r2, [r3, #24]
 8007146:	68fb      	ldr	r3, [r7, #12]
 8007148:	681b      	ldr	r3, [r3, #0]
 800714a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800714e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8007150:	68fb      	ldr	r3, [r7, #12]
 8007152:	681b      	ldr	r3, [r3, #0]
 8007154:	699a      	ldr	r2, [r3, #24]
 8007156:	68fb      	ldr	r3, [r7, #12]
 8007158:	681b      	ldr	r3, [r3, #0]
 800715a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800715e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8007160:	68fb      	ldr	r3, [r7, #12]
 8007162:	681b      	ldr	r3, [r3, #0]
 8007164:	6999      	ldr	r1, [r3, #24]
 8007166:	68bb      	ldr	r3, [r7, #8]
 8007168:	691b      	ldr	r3, [r3, #16]
 800716a:	021a      	lsls	r2, r3, #8
 800716c:	68fb      	ldr	r3, [r7, #12]
 800716e:	681b      	ldr	r3, [r3, #0]
 8007170:	430a      	orrs	r2, r1
 8007172:	619a      	str	r2, [r3, #24]
      break;
 8007174:	e041      	b.n	80071fa <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8007176:	68fb      	ldr	r3, [r7, #12]
 8007178:	681b      	ldr	r3, [r3, #0]
 800717a:	68b9      	ldr	r1, [r7, #8]
 800717c:	4618      	mov	r0, r3
 800717e:	f000 fa69 	bl	8007654 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8007182:	68fb      	ldr	r3, [r7, #12]
 8007184:	681b      	ldr	r3, [r3, #0]
 8007186:	69da      	ldr	r2, [r3, #28]
 8007188:	68fb      	ldr	r3, [r7, #12]
 800718a:	681b      	ldr	r3, [r3, #0]
 800718c:	f042 0208 	orr.w	r2, r2, #8
 8007190:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8007192:	68fb      	ldr	r3, [r7, #12]
 8007194:	681b      	ldr	r3, [r3, #0]
 8007196:	69da      	ldr	r2, [r3, #28]
 8007198:	68fb      	ldr	r3, [r7, #12]
 800719a:	681b      	ldr	r3, [r3, #0]
 800719c:	f022 0204 	bic.w	r2, r2, #4
 80071a0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80071a2:	68fb      	ldr	r3, [r7, #12]
 80071a4:	681b      	ldr	r3, [r3, #0]
 80071a6:	69d9      	ldr	r1, [r3, #28]
 80071a8:	68bb      	ldr	r3, [r7, #8]
 80071aa:	691a      	ldr	r2, [r3, #16]
 80071ac:	68fb      	ldr	r3, [r7, #12]
 80071ae:	681b      	ldr	r3, [r3, #0]
 80071b0:	430a      	orrs	r2, r1
 80071b2:	61da      	str	r2, [r3, #28]
      break;
 80071b4:	e021      	b.n	80071fa <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80071b6:	68fb      	ldr	r3, [r7, #12]
 80071b8:	681b      	ldr	r3, [r3, #0]
 80071ba:	68b9      	ldr	r1, [r7, #8]
 80071bc:	4618      	mov	r0, r3
 80071be:	f000 fab3 	bl	8007728 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80071c2:	68fb      	ldr	r3, [r7, #12]
 80071c4:	681b      	ldr	r3, [r3, #0]
 80071c6:	69da      	ldr	r2, [r3, #28]
 80071c8:	68fb      	ldr	r3, [r7, #12]
 80071ca:	681b      	ldr	r3, [r3, #0]
 80071cc:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80071d0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80071d2:	68fb      	ldr	r3, [r7, #12]
 80071d4:	681b      	ldr	r3, [r3, #0]
 80071d6:	69da      	ldr	r2, [r3, #28]
 80071d8:	68fb      	ldr	r3, [r7, #12]
 80071da:	681b      	ldr	r3, [r3, #0]
 80071dc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80071e0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80071e2:	68fb      	ldr	r3, [r7, #12]
 80071e4:	681b      	ldr	r3, [r3, #0]
 80071e6:	69d9      	ldr	r1, [r3, #28]
 80071e8:	68bb      	ldr	r3, [r7, #8]
 80071ea:	691b      	ldr	r3, [r3, #16]
 80071ec:	021a      	lsls	r2, r3, #8
 80071ee:	68fb      	ldr	r3, [r7, #12]
 80071f0:	681b      	ldr	r3, [r3, #0]
 80071f2:	430a      	orrs	r2, r1
 80071f4:	61da      	str	r2, [r3, #28]
      break;
 80071f6:	e000      	b.n	80071fa <HAL_TIM_PWM_ConfigChannel+0x16a>
    }

    default:
      break;
 80071f8:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80071fa:	68fb      	ldr	r3, [r7, #12]
 80071fc:	2200      	movs	r2, #0
 80071fe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007202:	2300      	movs	r3, #0
}
 8007204:	4618      	mov	r0, r3
 8007206:	3710      	adds	r7, #16
 8007208:	46bd      	mov	sp, r7
 800720a:	bd80      	pop	{r7, pc}

0800720c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800720c:	b580      	push	{r7, lr}
 800720e:	b084      	sub	sp, #16
 8007210:	af00      	add	r7, sp, #0
 8007212:	6078      	str	r0, [r7, #4]
 8007214:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8007216:	687b      	ldr	r3, [r7, #4]
 8007218:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800721c:	2b01      	cmp	r3, #1
 800721e:	d101      	bne.n	8007224 <HAL_TIM_ConfigClockSource+0x18>
 8007220:	2302      	movs	r3, #2
 8007222:	e0b3      	b.n	800738c <HAL_TIM_ConfigClockSource+0x180>
 8007224:	687b      	ldr	r3, [r7, #4]
 8007226:	2201      	movs	r2, #1
 8007228:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800722c:	687b      	ldr	r3, [r7, #4]
 800722e:	2202      	movs	r2, #2
 8007230:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8007234:	687b      	ldr	r3, [r7, #4]
 8007236:	681b      	ldr	r3, [r3, #0]
 8007238:	689b      	ldr	r3, [r3, #8]
 800723a:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800723c:	68fb      	ldr	r3, [r7, #12]
 800723e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8007242:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007244:	68fb      	ldr	r3, [r7, #12]
 8007246:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800724a:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 800724c:	687b      	ldr	r3, [r7, #4]
 800724e:	681b      	ldr	r3, [r3, #0]
 8007250:	68fa      	ldr	r2, [r7, #12]
 8007252:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8007254:	683b      	ldr	r3, [r7, #0]
 8007256:	681b      	ldr	r3, [r3, #0]
 8007258:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800725c:	d03e      	beq.n	80072dc <HAL_TIM_ConfigClockSource+0xd0>
 800725e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007262:	f200 8087 	bhi.w	8007374 <HAL_TIM_ConfigClockSource+0x168>
 8007266:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800726a:	f000 8085 	beq.w	8007378 <HAL_TIM_ConfigClockSource+0x16c>
 800726e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007272:	d87f      	bhi.n	8007374 <HAL_TIM_ConfigClockSource+0x168>
 8007274:	2b70      	cmp	r3, #112	; 0x70
 8007276:	d01a      	beq.n	80072ae <HAL_TIM_ConfigClockSource+0xa2>
 8007278:	2b70      	cmp	r3, #112	; 0x70
 800727a:	d87b      	bhi.n	8007374 <HAL_TIM_ConfigClockSource+0x168>
 800727c:	2b60      	cmp	r3, #96	; 0x60
 800727e:	d050      	beq.n	8007322 <HAL_TIM_ConfigClockSource+0x116>
 8007280:	2b60      	cmp	r3, #96	; 0x60
 8007282:	d877      	bhi.n	8007374 <HAL_TIM_ConfigClockSource+0x168>
 8007284:	2b50      	cmp	r3, #80	; 0x50
 8007286:	d03c      	beq.n	8007302 <HAL_TIM_ConfigClockSource+0xf6>
 8007288:	2b50      	cmp	r3, #80	; 0x50
 800728a:	d873      	bhi.n	8007374 <HAL_TIM_ConfigClockSource+0x168>
 800728c:	2b40      	cmp	r3, #64	; 0x40
 800728e:	d058      	beq.n	8007342 <HAL_TIM_ConfigClockSource+0x136>
 8007290:	2b40      	cmp	r3, #64	; 0x40
 8007292:	d86f      	bhi.n	8007374 <HAL_TIM_ConfigClockSource+0x168>
 8007294:	2b30      	cmp	r3, #48	; 0x30
 8007296:	d064      	beq.n	8007362 <HAL_TIM_ConfigClockSource+0x156>
 8007298:	2b30      	cmp	r3, #48	; 0x30
 800729a:	d86b      	bhi.n	8007374 <HAL_TIM_ConfigClockSource+0x168>
 800729c:	2b20      	cmp	r3, #32
 800729e:	d060      	beq.n	8007362 <HAL_TIM_ConfigClockSource+0x156>
 80072a0:	2b20      	cmp	r3, #32
 80072a2:	d867      	bhi.n	8007374 <HAL_TIM_ConfigClockSource+0x168>
 80072a4:	2b00      	cmp	r3, #0
 80072a6:	d05c      	beq.n	8007362 <HAL_TIM_ConfigClockSource+0x156>
 80072a8:	2b10      	cmp	r3, #16
 80072aa:	d05a      	beq.n	8007362 <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 80072ac:	e062      	b.n	8007374 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 80072ae:	687b      	ldr	r3, [r7, #4]
 80072b0:	6818      	ldr	r0, [r3, #0]
 80072b2:	683b      	ldr	r3, [r7, #0]
 80072b4:	6899      	ldr	r1, [r3, #8]
 80072b6:	683b      	ldr	r3, [r7, #0]
 80072b8:	685a      	ldr	r2, [r3, #4]
 80072ba:	683b      	ldr	r3, [r7, #0]
 80072bc:	68db      	ldr	r3, [r3, #12]
 80072be:	f000 faf8 	bl	80078b2 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 80072c2:	687b      	ldr	r3, [r7, #4]
 80072c4:	681b      	ldr	r3, [r3, #0]
 80072c6:	689b      	ldr	r3, [r3, #8]
 80072c8:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80072ca:	68fb      	ldr	r3, [r7, #12]
 80072cc:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80072d0:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 80072d2:	687b      	ldr	r3, [r7, #4]
 80072d4:	681b      	ldr	r3, [r3, #0]
 80072d6:	68fa      	ldr	r2, [r7, #12]
 80072d8:	609a      	str	r2, [r3, #8]
      break;
 80072da:	e04e      	b.n	800737a <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 80072dc:	687b      	ldr	r3, [r7, #4]
 80072de:	6818      	ldr	r0, [r3, #0]
 80072e0:	683b      	ldr	r3, [r7, #0]
 80072e2:	6899      	ldr	r1, [r3, #8]
 80072e4:	683b      	ldr	r3, [r7, #0]
 80072e6:	685a      	ldr	r2, [r3, #4]
 80072e8:	683b      	ldr	r3, [r7, #0]
 80072ea:	68db      	ldr	r3, [r3, #12]
 80072ec:	f000 fae1 	bl	80078b2 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80072f0:	687b      	ldr	r3, [r7, #4]
 80072f2:	681b      	ldr	r3, [r3, #0]
 80072f4:	689a      	ldr	r2, [r3, #8]
 80072f6:	687b      	ldr	r3, [r7, #4]
 80072f8:	681b      	ldr	r3, [r3, #0]
 80072fa:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80072fe:	609a      	str	r2, [r3, #8]
      break;
 8007300:	e03b      	b.n	800737a <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8007302:	687b      	ldr	r3, [r7, #4]
 8007304:	6818      	ldr	r0, [r3, #0]
 8007306:	683b      	ldr	r3, [r7, #0]
 8007308:	6859      	ldr	r1, [r3, #4]
 800730a:	683b      	ldr	r3, [r7, #0]
 800730c:	68db      	ldr	r3, [r3, #12]
 800730e:	461a      	mov	r2, r3
 8007310:	f000 fa58 	bl	80077c4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8007314:	687b      	ldr	r3, [r7, #4]
 8007316:	681b      	ldr	r3, [r3, #0]
 8007318:	2150      	movs	r1, #80	; 0x50
 800731a:	4618      	mov	r0, r3
 800731c:	f000 faaf 	bl	800787e <TIM_ITRx_SetConfig>
      break;
 8007320:	e02b      	b.n	800737a <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8007322:	687b      	ldr	r3, [r7, #4]
 8007324:	6818      	ldr	r0, [r3, #0]
 8007326:	683b      	ldr	r3, [r7, #0]
 8007328:	6859      	ldr	r1, [r3, #4]
 800732a:	683b      	ldr	r3, [r7, #0]
 800732c:	68db      	ldr	r3, [r3, #12]
 800732e:	461a      	mov	r2, r3
 8007330:	f000 fa76 	bl	8007820 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8007334:	687b      	ldr	r3, [r7, #4]
 8007336:	681b      	ldr	r3, [r3, #0]
 8007338:	2160      	movs	r1, #96	; 0x60
 800733a:	4618      	mov	r0, r3
 800733c:	f000 fa9f 	bl	800787e <TIM_ITRx_SetConfig>
      break;
 8007340:	e01b      	b.n	800737a <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8007342:	687b      	ldr	r3, [r7, #4]
 8007344:	6818      	ldr	r0, [r3, #0]
 8007346:	683b      	ldr	r3, [r7, #0]
 8007348:	6859      	ldr	r1, [r3, #4]
 800734a:	683b      	ldr	r3, [r7, #0]
 800734c:	68db      	ldr	r3, [r3, #12]
 800734e:	461a      	mov	r2, r3
 8007350:	f000 fa38 	bl	80077c4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8007354:	687b      	ldr	r3, [r7, #4]
 8007356:	681b      	ldr	r3, [r3, #0]
 8007358:	2140      	movs	r1, #64	; 0x40
 800735a:	4618      	mov	r0, r3
 800735c:	f000 fa8f 	bl	800787e <TIM_ITRx_SetConfig>
      break;
 8007360:	e00b      	b.n	800737a <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8007362:	687b      	ldr	r3, [r7, #4]
 8007364:	681a      	ldr	r2, [r3, #0]
 8007366:	683b      	ldr	r3, [r7, #0]
 8007368:	681b      	ldr	r3, [r3, #0]
 800736a:	4619      	mov	r1, r3
 800736c:	4610      	mov	r0, r2
 800736e:	f000 fa86 	bl	800787e <TIM_ITRx_SetConfig>
        break;
 8007372:	e002      	b.n	800737a <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8007374:	bf00      	nop
 8007376:	e000      	b.n	800737a <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8007378:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800737a:	687b      	ldr	r3, [r7, #4]
 800737c:	2201      	movs	r2, #1
 800737e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007382:	687b      	ldr	r3, [r7, #4]
 8007384:	2200      	movs	r2, #0
 8007386:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800738a:	2300      	movs	r3, #0
}
 800738c:	4618      	mov	r0, r3
 800738e:	3710      	adds	r7, #16
 8007390:	46bd      	mov	sp, r7
 8007392:	bd80      	pop	{r7, pc}

08007394 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8007394:	b480      	push	{r7}
 8007396:	b083      	sub	sp, #12
 8007398:	af00      	add	r7, sp, #0
 800739a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 800739c:	bf00      	nop
 800739e:	370c      	adds	r7, #12
 80073a0:	46bd      	mov	sp, r7
 80073a2:	bc80      	pop	{r7}
 80073a4:	4770      	bx	lr

080073a6 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80073a6:	b480      	push	{r7}
 80073a8:	b083      	sub	sp, #12
 80073aa:	af00      	add	r7, sp, #0
 80073ac:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80073ae:	bf00      	nop
 80073b0:	370c      	adds	r7, #12
 80073b2:	46bd      	mov	sp, r7
 80073b4:	bc80      	pop	{r7}
 80073b6:	4770      	bx	lr

080073b8 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80073b8:	b480      	push	{r7}
 80073ba:	b083      	sub	sp, #12
 80073bc:	af00      	add	r7, sp, #0
 80073be:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80073c0:	bf00      	nop
 80073c2:	370c      	adds	r7, #12
 80073c4:	46bd      	mov	sp, r7
 80073c6:	bc80      	pop	{r7}
 80073c8:	4770      	bx	lr

080073ca <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80073ca:	b480      	push	{r7}
 80073cc:	b083      	sub	sp, #12
 80073ce:	af00      	add	r7, sp, #0
 80073d0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80073d2:	bf00      	nop
 80073d4:	370c      	adds	r7, #12
 80073d6:	46bd      	mov	sp, r7
 80073d8:	bc80      	pop	{r7}
 80073da:	4770      	bx	lr

080073dc <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80073dc:	b480      	push	{r7}
 80073de:	b083      	sub	sp, #12
 80073e0:	af00      	add	r7, sp, #0
 80073e2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80073e4:	bf00      	nop
 80073e6:	370c      	adds	r7, #12
 80073e8:	46bd      	mov	sp, r7
 80073ea:	bc80      	pop	{r7}
 80073ec:	4770      	bx	lr
	...

080073f0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80073f0:	b480      	push	{r7}
 80073f2:	b085      	sub	sp, #20
 80073f4:	af00      	add	r7, sp, #0
 80073f6:	6078      	str	r0, [r7, #4]
 80073f8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80073fa:	687b      	ldr	r3, [r7, #4]
 80073fc:	681b      	ldr	r3, [r3, #0]
 80073fe:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007400:	687b      	ldr	r3, [r7, #4]
 8007402:	4a29      	ldr	r2, [pc, #164]	; (80074a8 <TIM_Base_SetConfig+0xb8>)
 8007404:	4293      	cmp	r3, r2
 8007406:	d00b      	beq.n	8007420 <TIM_Base_SetConfig+0x30>
 8007408:	687b      	ldr	r3, [r7, #4]
 800740a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800740e:	d007      	beq.n	8007420 <TIM_Base_SetConfig+0x30>
 8007410:	687b      	ldr	r3, [r7, #4]
 8007412:	4a26      	ldr	r2, [pc, #152]	; (80074ac <TIM_Base_SetConfig+0xbc>)
 8007414:	4293      	cmp	r3, r2
 8007416:	d003      	beq.n	8007420 <TIM_Base_SetConfig+0x30>
 8007418:	687b      	ldr	r3, [r7, #4]
 800741a:	4a25      	ldr	r2, [pc, #148]	; (80074b0 <TIM_Base_SetConfig+0xc0>)
 800741c:	4293      	cmp	r3, r2
 800741e:	d108      	bne.n	8007432 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007420:	68fb      	ldr	r3, [r7, #12]
 8007422:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007426:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8007428:	683b      	ldr	r3, [r7, #0]
 800742a:	685b      	ldr	r3, [r3, #4]
 800742c:	68fa      	ldr	r2, [r7, #12]
 800742e:	4313      	orrs	r3, r2
 8007430:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8007432:	687b      	ldr	r3, [r7, #4]
 8007434:	4a1c      	ldr	r2, [pc, #112]	; (80074a8 <TIM_Base_SetConfig+0xb8>)
 8007436:	4293      	cmp	r3, r2
 8007438:	d00b      	beq.n	8007452 <TIM_Base_SetConfig+0x62>
 800743a:	687b      	ldr	r3, [r7, #4]
 800743c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007440:	d007      	beq.n	8007452 <TIM_Base_SetConfig+0x62>
 8007442:	687b      	ldr	r3, [r7, #4]
 8007444:	4a19      	ldr	r2, [pc, #100]	; (80074ac <TIM_Base_SetConfig+0xbc>)
 8007446:	4293      	cmp	r3, r2
 8007448:	d003      	beq.n	8007452 <TIM_Base_SetConfig+0x62>
 800744a:	687b      	ldr	r3, [r7, #4]
 800744c:	4a18      	ldr	r2, [pc, #96]	; (80074b0 <TIM_Base_SetConfig+0xc0>)
 800744e:	4293      	cmp	r3, r2
 8007450:	d108      	bne.n	8007464 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8007452:	68fb      	ldr	r3, [r7, #12]
 8007454:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007458:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800745a:	683b      	ldr	r3, [r7, #0]
 800745c:	68db      	ldr	r3, [r3, #12]
 800745e:	68fa      	ldr	r2, [r7, #12]
 8007460:	4313      	orrs	r3, r2
 8007462:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007464:	68fb      	ldr	r3, [r7, #12]
 8007466:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800746a:	683b      	ldr	r3, [r7, #0]
 800746c:	695b      	ldr	r3, [r3, #20]
 800746e:	4313      	orrs	r3, r2
 8007470:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8007472:	687b      	ldr	r3, [r7, #4]
 8007474:	68fa      	ldr	r2, [r7, #12]
 8007476:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007478:	683b      	ldr	r3, [r7, #0]
 800747a:	689a      	ldr	r2, [r3, #8]
 800747c:	687b      	ldr	r3, [r7, #4]
 800747e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8007480:	683b      	ldr	r3, [r7, #0]
 8007482:	681a      	ldr	r2, [r3, #0]
 8007484:	687b      	ldr	r3, [r7, #4]
 8007486:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8007488:	687b      	ldr	r3, [r7, #4]
 800748a:	4a07      	ldr	r2, [pc, #28]	; (80074a8 <TIM_Base_SetConfig+0xb8>)
 800748c:	4293      	cmp	r3, r2
 800748e:	d103      	bne.n	8007498 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8007490:	683b      	ldr	r3, [r7, #0]
 8007492:	691a      	ldr	r2, [r3, #16]
 8007494:	687b      	ldr	r3, [r7, #4]
 8007496:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8007498:	687b      	ldr	r3, [r7, #4]
 800749a:	2201      	movs	r2, #1
 800749c:	615a      	str	r2, [r3, #20]
}
 800749e:	bf00      	nop
 80074a0:	3714      	adds	r7, #20
 80074a2:	46bd      	mov	sp, r7
 80074a4:	bc80      	pop	{r7}
 80074a6:	4770      	bx	lr
 80074a8:	40012c00 	.word	0x40012c00
 80074ac:	40000400 	.word	0x40000400
 80074b0:	40000800 	.word	0x40000800

080074b4 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80074b4:	b480      	push	{r7}
 80074b6:	b087      	sub	sp, #28
 80074b8:	af00      	add	r7, sp, #0
 80074ba:	6078      	str	r0, [r7, #4]
 80074bc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80074be:	687b      	ldr	r3, [r7, #4]
 80074c0:	6a1b      	ldr	r3, [r3, #32]
 80074c2:	f023 0201 	bic.w	r2, r3, #1
 80074c6:	687b      	ldr	r3, [r7, #4]
 80074c8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80074ca:	687b      	ldr	r3, [r7, #4]
 80074cc:	6a1b      	ldr	r3, [r3, #32]
 80074ce:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80074d0:	687b      	ldr	r3, [r7, #4]
 80074d2:	685b      	ldr	r3, [r3, #4]
 80074d4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80074d6:	687b      	ldr	r3, [r7, #4]
 80074d8:	699b      	ldr	r3, [r3, #24]
 80074da:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80074dc:	68fb      	ldr	r3, [r7, #12]
 80074de:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80074e2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80074e4:	68fb      	ldr	r3, [r7, #12]
 80074e6:	f023 0303 	bic.w	r3, r3, #3
 80074ea:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80074ec:	683b      	ldr	r3, [r7, #0]
 80074ee:	681b      	ldr	r3, [r3, #0]
 80074f0:	68fa      	ldr	r2, [r7, #12]
 80074f2:	4313      	orrs	r3, r2
 80074f4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80074f6:	697b      	ldr	r3, [r7, #20]
 80074f8:	f023 0302 	bic.w	r3, r3, #2
 80074fc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80074fe:	683b      	ldr	r3, [r7, #0]
 8007500:	689b      	ldr	r3, [r3, #8]
 8007502:	697a      	ldr	r2, [r7, #20]
 8007504:	4313      	orrs	r3, r2
 8007506:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8007508:	687b      	ldr	r3, [r7, #4]
 800750a:	4a1c      	ldr	r2, [pc, #112]	; (800757c <TIM_OC1_SetConfig+0xc8>)
 800750c:	4293      	cmp	r3, r2
 800750e:	d10c      	bne.n	800752a <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8007510:	697b      	ldr	r3, [r7, #20]
 8007512:	f023 0308 	bic.w	r3, r3, #8
 8007516:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8007518:	683b      	ldr	r3, [r7, #0]
 800751a:	68db      	ldr	r3, [r3, #12]
 800751c:	697a      	ldr	r2, [r7, #20]
 800751e:	4313      	orrs	r3, r2
 8007520:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8007522:	697b      	ldr	r3, [r7, #20]
 8007524:	f023 0304 	bic.w	r3, r3, #4
 8007528:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800752a:	687b      	ldr	r3, [r7, #4]
 800752c:	4a13      	ldr	r2, [pc, #76]	; (800757c <TIM_OC1_SetConfig+0xc8>)
 800752e:	4293      	cmp	r3, r2
 8007530:	d111      	bne.n	8007556 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8007532:	693b      	ldr	r3, [r7, #16]
 8007534:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007538:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800753a:	693b      	ldr	r3, [r7, #16]
 800753c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8007540:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8007542:	683b      	ldr	r3, [r7, #0]
 8007544:	695b      	ldr	r3, [r3, #20]
 8007546:	693a      	ldr	r2, [r7, #16]
 8007548:	4313      	orrs	r3, r2
 800754a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800754c:	683b      	ldr	r3, [r7, #0]
 800754e:	699b      	ldr	r3, [r3, #24]
 8007550:	693a      	ldr	r2, [r7, #16]
 8007552:	4313      	orrs	r3, r2
 8007554:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007556:	687b      	ldr	r3, [r7, #4]
 8007558:	693a      	ldr	r2, [r7, #16]
 800755a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800755c:	687b      	ldr	r3, [r7, #4]
 800755e:	68fa      	ldr	r2, [r7, #12]
 8007560:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8007562:	683b      	ldr	r3, [r7, #0]
 8007564:	685a      	ldr	r2, [r3, #4]
 8007566:	687b      	ldr	r3, [r7, #4]
 8007568:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800756a:	687b      	ldr	r3, [r7, #4]
 800756c:	697a      	ldr	r2, [r7, #20]
 800756e:	621a      	str	r2, [r3, #32]
}
 8007570:	bf00      	nop
 8007572:	371c      	adds	r7, #28
 8007574:	46bd      	mov	sp, r7
 8007576:	bc80      	pop	{r7}
 8007578:	4770      	bx	lr
 800757a:	bf00      	nop
 800757c:	40012c00 	.word	0x40012c00

08007580 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007580:	b480      	push	{r7}
 8007582:	b087      	sub	sp, #28
 8007584:	af00      	add	r7, sp, #0
 8007586:	6078      	str	r0, [r7, #4]
 8007588:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800758a:	687b      	ldr	r3, [r7, #4]
 800758c:	6a1b      	ldr	r3, [r3, #32]
 800758e:	f023 0210 	bic.w	r2, r3, #16
 8007592:	687b      	ldr	r3, [r7, #4]
 8007594:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007596:	687b      	ldr	r3, [r7, #4]
 8007598:	6a1b      	ldr	r3, [r3, #32]
 800759a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800759c:	687b      	ldr	r3, [r7, #4]
 800759e:	685b      	ldr	r3, [r3, #4]
 80075a0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80075a2:	687b      	ldr	r3, [r7, #4]
 80075a4:	699b      	ldr	r3, [r3, #24]
 80075a6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80075a8:	68fb      	ldr	r3, [r7, #12]
 80075aa:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80075ae:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80075b0:	68fb      	ldr	r3, [r7, #12]
 80075b2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80075b6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80075b8:	683b      	ldr	r3, [r7, #0]
 80075ba:	681b      	ldr	r3, [r3, #0]
 80075bc:	021b      	lsls	r3, r3, #8
 80075be:	68fa      	ldr	r2, [r7, #12]
 80075c0:	4313      	orrs	r3, r2
 80075c2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80075c4:	697b      	ldr	r3, [r7, #20]
 80075c6:	f023 0320 	bic.w	r3, r3, #32
 80075ca:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80075cc:	683b      	ldr	r3, [r7, #0]
 80075ce:	689b      	ldr	r3, [r3, #8]
 80075d0:	011b      	lsls	r3, r3, #4
 80075d2:	697a      	ldr	r2, [r7, #20]
 80075d4:	4313      	orrs	r3, r2
 80075d6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80075d8:	687b      	ldr	r3, [r7, #4]
 80075da:	4a1d      	ldr	r2, [pc, #116]	; (8007650 <TIM_OC2_SetConfig+0xd0>)
 80075dc:	4293      	cmp	r3, r2
 80075de:	d10d      	bne.n	80075fc <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80075e0:	697b      	ldr	r3, [r7, #20]
 80075e2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80075e6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80075e8:	683b      	ldr	r3, [r7, #0]
 80075ea:	68db      	ldr	r3, [r3, #12]
 80075ec:	011b      	lsls	r3, r3, #4
 80075ee:	697a      	ldr	r2, [r7, #20]
 80075f0:	4313      	orrs	r3, r2
 80075f2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80075f4:	697b      	ldr	r3, [r7, #20]
 80075f6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80075fa:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80075fc:	687b      	ldr	r3, [r7, #4]
 80075fe:	4a14      	ldr	r2, [pc, #80]	; (8007650 <TIM_OC2_SetConfig+0xd0>)
 8007600:	4293      	cmp	r3, r2
 8007602:	d113      	bne.n	800762c <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8007604:	693b      	ldr	r3, [r7, #16]
 8007606:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800760a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800760c:	693b      	ldr	r3, [r7, #16]
 800760e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8007612:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8007614:	683b      	ldr	r3, [r7, #0]
 8007616:	695b      	ldr	r3, [r3, #20]
 8007618:	009b      	lsls	r3, r3, #2
 800761a:	693a      	ldr	r2, [r7, #16]
 800761c:	4313      	orrs	r3, r2
 800761e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8007620:	683b      	ldr	r3, [r7, #0]
 8007622:	699b      	ldr	r3, [r3, #24]
 8007624:	009b      	lsls	r3, r3, #2
 8007626:	693a      	ldr	r2, [r7, #16]
 8007628:	4313      	orrs	r3, r2
 800762a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800762c:	687b      	ldr	r3, [r7, #4]
 800762e:	693a      	ldr	r2, [r7, #16]
 8007630:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007632:	687b      	ldr	r3, [r7, #4]
 8007634:	68fa      	ldr	r2, [r7, #12]
 8007636:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8007638:	683b      	ldr	r3, [r7, #0]
 800763a:	685a      	ldr	r2, [r3, #4]
 800763c:	687b      	ldr	r3, [r7, #4]
 800763e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007640:	687b      	ldr	r3, [r7, #4]
 8007642:	697a      	ldr	r2, [r7, #20]
 8007644:	621a      	str	r2, [r3, #32]
}
 8007646:	bf00      	nop
 8007648:	371c      	adds	r7, #28
 800764a:	46bd      	mov	sp, r7
 800764c:	bc80      	pop	{r7}
 800764e:	4770      	bx	lr
 8007650:	40012c00 	.word	0x40012c00

08007654 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007654:	b480      	push	{r7}
 8007656:	b087      	sub	sp, #28
 8007658:	af00      	add	r7, sp, #0
 800765a:	6078      	str	r0, [r7, #4]
 800765c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800765e:	687b      	ldr	r3, [r7, #4]
 8007660:	6a1b      	ldr	r3, [r3, #32]
 8007662:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8007666:	687b      	ldr	r3, [r7, #4]
 8007668:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800766a:	687b      	ldr	r3, [r7, #4]
 800766c:	6a1b      	ldr	r3, [r3, #32]
 800766e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007670:	687b      	ldr	r3, [r7, #4]
 8007672:	685b      	ldr	r3, [r3, #4]
 8007674:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8007676:	687b      	ldr	r3, [r7, #4]
 8007678:	69db      	ldr	r3, [r3, #28]
 800767a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800767c:	68fb      	ldr	r3, [r7, #12]
 800767e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007682:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8007684:	68fb      	ldr	r3, [r7, #12]
 8007686:	f023 0303 	bic.w	r3, r3, #3
 800768a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800768c:	683b      	ldr	r3, [r7, #0]
 800768e:	681b      	ldr	r3, [r3, #0]
 8007690:	68fa      	ldr	r2, [r7, #12]
 8007692:	4313      	orrs	r3, r2
 8007694:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8007696:	697b      	ldr	r3, [r7, #20]
 8007698:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800769c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800769e:	683b      	ldr	r3, [r7, #0]
 80076a0:	689b      	ldr	r3, [r3, #8]
 80076a2:	021b      	lsls	r3, r3, #8
 80076a4:	697a      	ldr	r2, [r7, #20]
 80076a6:	4313      	orrs	r3, r2
 80076a8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80076aa:	687b      	ldr	r3, [r7, #4]
 80076ac:	4a1d      	ldr	r2, [pc, #116]	; (8007724 <TIM_OC3_SetConfig+0xd0>)
 80076ae:	4293      	cmp	r3, r2
 80076b0:	d10d      	bne.n	80076ce <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80076b2:	697b      	ldr	r3, [r7, #20]
 80076b4:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80076b8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80076ba:	683b      	ldr	r3, [r7, #0]
 80076bc:	68db      	ldr	r3, [r3, #12]
 80076be:	021b      	lsls	r3, r3, #8
 80076c0:	697a      	ldr	r2, [r7, #20]
 80076c2:	4313      	orrs	r3, r2
 80076c4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80076c6:	697b      	ldr	r3, [r7, #20]
 80076c8:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80076cc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80076ce:	687b      	ldr	r3, [r7, #4]
 80076d0:	4a14      	ldr	r2, [pc, #80]	; (8007724 <TIM_OC3_SetConfig+0xd0>)
 80076d2:	4293      	cmp	r3, r2
 80076d4:	d113      	bne.n	80076fe <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80076d6:	693b      	ldr	r3, [r7, #16]
 80076d8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80076dc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80076de:	693b      	ldr	r3, [r7, #16]
 80076e0:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80076e4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80076e6:	683b      	ldr	r3, [r7, #0]
 80076e8:	695b      	ldr	r3, [r3, #20]
 80076ea:	011b      	lsls	r3, r3, #4
 80076ec:	693a      	ldr	r2, [r7, #16]
 80076ee:	4313      	orrs	r3, r2
 80076f0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80076f2:	683b      	ldr	r3, [r7, #0]
 80076f4:	699b      	ldr	r3, [r3, #24]
 80076f6:	011b      	lsls	r3, r3, #4
 80076f8:	693a      	ldr	r2, [r7, #16]
 80076fa:	4313      	orrs	r3, r2
 80076fc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80076fe:	687b      	ldr	r3, [r7, #4]
 8007700:	693a      	ldr	r2, [r7, #16]
 8007702:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007704:	687b      	ldr	r3, [r7, #4]
 8007706:	68fa      	ldr	r2, [r7, #12]
 8007708:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800770a:	683b      	ldr	r3, [r7, #0]
 800770c:	685a      	ldr	r2, [r3, #4]
 800770e:	687b      	ldr	r3, [r7, #4]
 8007710:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007712:	687b      	ldr	r3, [r7, #4]
 8007714:	697a      	ldr	r2, [r7, #20]
 8007716:	621a      	str	r2, [r3, #32]
}
 8007718:	bf00      	nop
 800771a:	371c      	adds	r7, #28
 800771c:	46bd      	mov	sp, r7
 800771e:	bc80      	pop	{r7}
 8007720:	4770      	bx	lr
 8007722:	bf00      	nop
 8007724:	40012c00 	.word	0x40012c00

08007728 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007728:	b480      	push	{r7}
 800772a:	b087      	sub	sp, #28
 800772c:	af00      	add	r7, sp, #0
 800772e:	6078      	str	r0, [r7, #4]
 8007730:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8007732:	687b      	ldr	r3, [r7, #4]
 8007734:	6a1b      	ldr	r3, [r3, #32]
 8007736:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800773a:	687b      	ldr	r3, [r7, #4]
 800773c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800773e:	687b      	ldr	r3, [r7, #4]
 8007740:	6a1b      	ldr	r3, [r3, #32]
 8007742:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007744:	687b      	ldr	r3, [r7, #4]
 8007746:	685b      	ldr	r3, [r3, #4]
 8007748:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800774a:	687b      	ldr	r3, [r7, #4]
 800774c:	69db      	ldr	r3, [r3, #28]
 800774e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8007750:	68fb      	ldr	r3, [r7, #12]
 8007752:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007756:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8007758:	68fb      	ldr	r3, [r7, #12]
 800775a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800775e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007760:	683b      	ldr	r3, [r7, #0]
 8007762:	681b      	ldr	r3, [r3, #0]
 8007764:	021b      	lsls	r3, r3, #8
 8007766:	68fa      	ldr	r2, [r7, #12]
 8007768:	4313      	orrs	r3, r2
 800776a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800776c:	693b      	ldr	r3, [r7, #16]
 800776e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8007772:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8007774:	683b      	ldr	r3, [r7, #0]
 8007776:	689b      	ldr	r3, [r3, #8]
 8007778:	031b      	lsls	r3, r3, #12
 800777a:	693a      	ldr	r2, [r7, #16]
 800777c:	4313      	orrs	r3, r2
 800777e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007780:	687b      	ldr	r3, [r7, #4]
 8007782:	4a0f      	ldr	r2, [pc, #60]	; (80077c0 <TIM_OC4_SetConfig+0x98>)
 8007784:	4293      	cmp	r3, r2
 8007786:	d109      	bne.n	800779c <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8007788:	697b      	ldr	r3, [r7, #20]
 800778a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800778e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8007790:	683b      	ldr	r3, [r7, #0]
 8007792:	695b      	ldr	r3, [r3, #20]
 8007794:	019b      	lsls	r3, r3, #6
 8007796:	697a      	ldr	r2, [r7, #20]
 8007798:	4313      	orrs	r3, r2
 800779a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800779c:	687b      	ldr	r3, [r7, #4]
 800779e:	697a      	ldr	r2, [r7, #20]
 80077a0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80077a2:	687b      	ldr	r3, [r7, #4]
 80077a4:	68fa      	ldr	r2, [r7, #12]
 80077a6:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80077a8:	683b      	ldr	r3, [r7, #0]
 80077aa:	685a      	ldr	r2, [r3, #4]
 80077ac:	687b      	ldr	r3, [r7, #4]
 80077ae:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80077b0:	687b      	ldr	r3, [r7, #4]
 80077b2:	693a      	ldr	r2, [r7, #16]
 80077b4:	621a      	str	r2, [r3, #32]
}
 80077b6:	bf00      	nop
 80077b8:	371c      	adds	r7, #28
 80077ba:	46bd      	mov	sp, r7
 80077bc:	bc80      	pop	{r7}
 80077be:	4770      	bx	lr
 80077c0:	40012c00 	.word	0x40012c00

080077c4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80077c4:	b480      	push	{r7}
 80077c6:	b087      	sub	sp, #28
 80077c8:	af00      	add	r7, sp, #0
 80077ca:	60f8      	str	r0, [r7, #12]
 80077cc:	60b9      	str	r1, [r7, #8]
 80077ce:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80077d0:	68fb      	ldr	r3, [r7, #12]
 80077d2:	6a1b      	ldr	r3, [r3, #32]
 80077d4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80077d6:	68fb      	ldr	r3, [r7, #12]
 80077d8:	6a1b      	ldr	r3, [r3, #32]
 80077da:	f023 0201 	bic.w	r2, r3, #1
 80077de:	68fb      	ldr	r3, [r7, #12]
 80077e0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80077e2:	68fb      	ldr	r3, [r7, #12]
 80077e4:	699b      	ldr	r3, [r3, #24]
 80077e6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80077e8:	693b      	ldr	r3, [r7, #16]
 80077ea:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80077ee:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80077f0:	687b      	ldr	r3, [r7, #4]
 80077f2:	011b      	lsls	r3, r3, #4
 80077f4:	693a      	ldr	r2, [r7, #16]
 80077f6:	4313      	orrs	r3, r2
 80077f8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80077fa:	697b      	ldr	r3, [r7, #20]
 80077fc:	f023 030a 	bic.w	r3, r3, #10
 8007800:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8007802:	697a      	ldr	r2, [r7, #20]
 8007804:	68bb      	ldr	r3, [r7, #8]
 8007806:	4313      	orrs	r3, r2
 8007808:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800780a:	68fb      	ldr	r3, [r7, #12]
 800780c:	693a      	ldr	r2, [r7, #16]
 800780e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007810:	68fb      	ldr	r3, [r7, #12]
 8007812:	697a      	ldr	r2, [r7, #20]
 8007814:	621a      	str	r2, [r3, #32]
}
 8007816:	bf00      	nop
 8007818:	371c      	adds	r7, #28
 800781a:	46bd      	mov	sp, r7
 800781c:	bc80      	pop	{r7}
 800781e:	4770      	bx	lr

08007820 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007820:	b480      	push	{r7}
 8007822:	b087      	sub	sp, #28
 8007824:	af00      	add	r7, sp, #0
 8007826:	60f8      	str	r0, [r7, #12]
 8007828:	60b9      	str	r1, [r7, #8]
 800782a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800782c:	68fb      	ldr	r3, [r7, #12]
 800782e:	6a1b      	ldr	r3, [r3, #32]
 8007830:	f023 0210 	bic.w	r2, r3, #16
 8007834:	68fb      	ldr	r3, [r7, #12]
 8007836:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007838:	68fb      	ldr	r3, [r7, #12]
 800783a:	699b      	ldr	r3, [r3, #24]
 800783c:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800783e:	68fb      	ldr	r3, [r7, #12]
 8007840:	6a1b      	ldr	r3, [r3, #32]
 8007842:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8007844:	697b      	ldr	r3, [r7, #20]
 8007846:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800784a:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800784c:	687b      	ldr	r3, [r7, #4]
 800784e:	031b      	lsls	r3, r3, #12
 8007850:	697a      	ldr	r2, [r7, #20]
 8007852:	4313      	orrs	r3, r2
 8007854:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8007856:	693b      	ldr	r3, [r7, #16]
 8007858:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800785c:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800785e:	68bb      	ldr	r3, [r7, #8]
 8007860:	011b      	lsls	r3, r3, #4
 8007862:	693a      	ldr	r2, [r7, #16]
 8007864:	4313      	orrs	r3, r2
 8007866:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8007868:	68fb      	ldr	r3, [r7, #12]
 800786a:	697a      	ldr	r2, [r7, #20]
 800786c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800786e:	68fb      	ldr	r3, [r7, #12]
 8007870:	693a      	ldr	r2, [r7, #16]
 8007872:	621a      	str	r2, [r3, #32]
}
 8007874:	bf00      	nop
 8007876:	371c      	adds	r7, #28
 8007878:	46bd      	mov	sp, r7
 800787a:	bc80      	pop	{r7}
 800787c:	4770      	bx	lr

0800787e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800787e:	b480      	push	{r7}
 8007880:	b085      	sub	sp, #20
 8007882:	af00      	add	r7, sp, #0
 8007884:	6078      	str	r0, [r7, #4]
 8007886:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8007888:	687b      	ldr	r3, [r7, #4]
 800788a:	689b      	ldr	r3, [r3, #8]
 800788c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800788e:	68fb      	ldr	r3, [r7, #12]
 8007890:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007894:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8007896:	683a      	ldr	r2, [r7, #0]
 8007898:	68fb      	ldr	r3, [r7, #12]
 800789a:	4313      	orrs	r3, r2
 800789c:	f043 0307 	orr.w	r3, r3, #7
 80078a0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80078a2:	687b      	ldr	r3, [r7, #4]
 80078a4:	68fa      	ldr	r2, [r7, #12]
 80078a6:	609a      	str	r2, [r3, #8]
}
 80078a8:	bf00      	nop
 80078aa:	3714      	adds	r7, #20
 80078ac:	46bd      	mov	sp, r7
 80078ae:	bc80      	pop	{r7}
 80078b0:	4770      	bx	lr

080078b2 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80078b2:	b480      	push	{r7}
 80078b4:	b087      	sub	sp, #28
 80078b6:	af00      	add	r7, sp, #0
 80078b8:	60f8      	str	r0, [r7, #12]
 80078ba:	60b9      	str	r1, [r7, #8]
 80078bc:	607a      	str	r2, [r7, #4]
 80078be:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80078c0:	68fb      	ldr	r3, [r7, #12]
 80078c2:	689b      	ldr	r3, [r3, #8]
 80078c4:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80078c6:	697b      	ldr	r3, [r7, #20]
 80078c8:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80078cc:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80078ce:	683b      	ldr	r3, [r7, #0]
 80078d0:	021a      	lsls	r2, r3, #8
 80078d2:	687b      	ldr	r3, [r7, #4]
 80078d4:	431a      	orrs	r2, r3
 80078d6:	68bb      	ldr	r3, [r7, #8]
 80078d8:	4313      	orrs	r3, r2
 80078da:	697a      	ldr	r2, [r7, #20]
 80078dc:	4313      	orrs	r3, r2
 80078de:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80078e0:	68fb      	ldr	r3, [r7, #12]
 80078e2:	697a      	ldr	r2, [r7, #20]
 80078e4:	609a      	str	r2, [r3, #8]
}
 80078e6:	bf00      	nop
 80078e8:	371c      	adds	r7, #28
 80078ea:	46bd      	mov	sp, r7
 80078ec:	bc80      	pop	{r7}
 80078ee:	4770      	bx	lr

080078f0 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80078f0:	b480      	push	{r7}
 80078f2:	b087      	sub	sp, #28
 80078f4:	af00      	add	r7, sp, #0
 80078f6:	60f8      	str	r0, [r7, #12]
 80078f8:	60b9      	str	r1, [r7, #8]
 80078fa:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80078fc:	68bb      	ldr	r3, [r7, #8]
 80078fe:	f003 031f 	and.w	r3, r3, #31
 8007902:	2201      	movs	r2, #1
 8007904:	fa02 f303 	lsl.w	r3, r2, r3
 8007908:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800790a:	68fb      	ldr	r3, [r7, #12]
 800790c:	6a1a      	ldr	r2, [r3, #32]
 800790e:	697b      	ldr	r3, [r7, #20]
 8007910:	43db      	mvns	r3, r3
 8007912:	401a      	ands	r2, r3
 8007914:	68fb      	ldr	r3, [r7, #12]
 8007916:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8007918:	68fb      	ldr	r3, [r7, #12]
 800791a:	6a1a      	ldr	r2, [r3, #32]
 800791c:	68bb      	ldr	r3, [r7, #8]
 800791e:	f003 031f 	and.w	r3, r3, #31
 8007922:	6879      	ldr	r1, [r7, #4]
 8007924:	fa01 f303 	lsl.w	r3, r1, r3
 8007928:	431a      	orrs	r2, r3
 800792a:	68fb      	ldr	r3, [r7, #12]
 800792c:	621a      	str	r2, [r3, #32]
}
 800792e:	bf00      	nop
 8007930:	371c      	adds	r7, #28
 8007932:	46bd      	mov	sp, r7
 8007934:	bc80      	pop	{r7}
 8007936:	4770      	bx	lr

08007938 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8007938:	b480      	push	{r7}
 800793a:	b085      	sub	sp, #20
 800793c:	af00      	add	r7, sp, #0
 800793e:	6078      	str	r0, [r7, #4]
 8007940:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8007942:	687b      	ldr	r3, [r7, #4]
 8007944:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007948:	2b01      	cmp	r3, #1
 800794a:	d101      	bne.n	8007950 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800794c:	2302      	movs	r3, #2
 800794e:	e046      	b.n	80079de <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8007950:	687b      	ldr	r3, [r7, #4]
 8007952:	2201      	movs	r2, #1
 8007954:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007958:	687b      	ldr	r3, [r7, #4]
 800795a:	2202      	movs	r2, #2
 800795c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8007960:	687b      	ldr	r3, [r7, #4]
 8007962:	681b      	ldr	r3, [r3, #0]
 8007964:	685b      	ldr	r3, [r3, #4]
 8007966:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007968:	687b      	ldr	r3, [r7, #4]
 800796a:	681b      	ldr	r3, [r3, #0]
 800796c:	689b      	ldr	r3, [r3, #8]
 800796e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8007970:	68fb      	ldr	r3, [r7, #12]
 8007972:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007976:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8007978:	683b      	ldr	r3, [r7, #0]
 800797a:	681b      	ldr	r3, [r3, #0]
 800797c:	68fa      	ldr	r2, [r7, #12]
 800797e:	4313      	orrs	r3, r2
 8007980:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8007982:	687b      	ldr	r3, [r7, #4]
 8007984:	681b      	ldr	r3, [r3, #0]
 8007986:	68fa      	ldr	r2, [r7, #12]
 8007988:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800798a:	687b      	ldr	r3, [r7, #4]
 800798c:	681b      	ldr	r3, [r3, #0]
 800798e:	4a16      	ldr	r2, [pc, #88]	; (80079e8 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8007990:	4293      	cmp	r3, r2
 8007992:	d00e      	beq.n	80079b2 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8007994:	687b      	ldr	r3, [r7, #4]
 8007996:	681b      	ldr	r3, [r3, #0]
 8007998:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800799c:	d009      	beq.n	80079b2 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 800799e:	687b      	ldr	r3, [r7, #4]
 80079a0:	681b      	ldr	r3, [r3, #0]
 80079a2:	4a12      	ldr	r2, [pc, #72]	; (80079ec <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 80079a4:	4293      	cmp	r3, r2
 80079a6:	d004      	beq.n	80079b2 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80079a8:	687b      	ldr	r3, [r7, #4]
 80079aa:	681b      	ldr	r3, [r3, #0]
 80079ac:	4a10      	ldr	r2, [pc, #64]	; (80079f0 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 80079ae:	4293      	cmp	r3, r2
 80079b0:	d10c      	bne.n	80079cc <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80079b2:	68bb      	ldr	r3, [r7, #8]
 80079b4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80079b8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80079ba:	683b      	ldr	r3, [r7, #0]
 80079bc:	685b      	ldr	r3, [r3, #4]
 80079be:	68ba      	ldr	r2, [r7, #8]
 80079c0:	4313      	orrs	r3, r2
 80079c2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80079c4:	687b      	ldr	r3, [r7, #4]
 80079c6:	681b      	ldr	r3, [r3, #0]
 80079c8:	68ba      	ldr	r2, [r7, #8]
 80079ca:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80079cc:	687b      	ldr	r3, [r7, #4]
 80079ce:	2201      	movs	r2, #1
 80079d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80079d4:	687b      	ldr	r3, [r7, #4]
 80079d6:	2200      	movs	r2, #0
 80079d8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80079dc:	2300      	movs	r3, #0
}
 80079de:	4618      	mov	r0, r3
 80079e0:	3714      	adds	r7, #20
 80079e2:	46bd      	mov	sp, r7
 80079e4:	bc80      	pop	{r7}
 80079e6:	4770      	bx	lr
 80079e8:	40012c00 	.word	0x40012c00
 80079ec:	40000400 	.word	0x40000400
 80079f0:	40000800 	.word	0x40000800

080079f4 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80079f4:	b480      	push	{r7}
 80079f6:	b083      	sub	sp, #12
 80079f8:	af00      	add	r7, sp, #0
 80079fa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80079fc:	bf00      	nop
 80079fe:	370c      	adds	r7, #12
 8007a00:	46bd      	mov	sp, r7
 8007a02:	bc80      	pop	{r7}
 8007a04:	4770      	bx	lr

08007a06 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8007a06:	b480      	push	{r7}
 8007a08:	b083      	sub	sp, #12
 8007a0a:	af00      	add	r7, sp, #0
 8007a0c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8007a0e:	bf00      	nop
 8007a10:	370c      	adds	r7, #12
 8007a12:	46bd      	mov	sp, r7
 8007a14:	bc80      	pop	{r7}
 8007a16:	4770      	bx	lr

08007a18 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8007a18:	b580      	push	{r7, lr}
 8007a1a:	b082      	sub	sp, #8
 8007a1c:	af00      	add	r7, sp, #0
 8007a1e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007a20:	687b      	ldr	r3, [r7, #4]
 8007a22:	2b00      	cmp	r3, #0
 8007a24:	d101      	bne.n	8007a2a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8007a26:	2301      	movs	r3, #1
 8007a28:	e03f      	b.n	8007aaa <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8007a2a:	687b      	ldr	r3, [r7, #4]
 8007a2c:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8007a30:	b2db      	uxtb	r3, r3
 8007a32:	2b00      	cmp	r3, #0
 8007a34:	d106      	bne.n	8007a44 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8007a36:	687b      	ldr	r3, [r7, #4]
 8007a38:	2200      	movs	r2, #0
 8007a3a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8007a3e:	6878      	ldr	r0, [r7, #4]
 8007a40:	f7fd f812 	bl	8004a68 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8007a44:	687b      	ldr	r3, [r7, #4]
 8007a46:	2224      	movs	r2, #36	; 0x24
 8007a48:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8007a4c:	687b      	ldr	r3, [r7, #4]
 8007a4e:	681b      	ldr	r3, [r3, #0]
 8007a50:	68da      	ldr	r2, [r3, #12]
 8007a52:	687b      	ldr	r3, [r7, #4]
 8007a54:	681b      	ldr	r3, [r3, #0]
 8007a56:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8007a5a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8007a5c:	6878      	ldr	r0, [r7, #4]
 8007a5e:	f000 fc21 	bl	80082a4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007a62:	687b      	ldr	r3, [r7, #4]
 8007a64:	681b      	ldr	r3, [r3, #0]
 8007a66:	691a      	ldr	r2, [r3, #16]
 8007a68:	687b      	ldr	r3, [r7, #4]
 8007a6a:	681b      	ldr	r3, [r3, #0]
 8007a6c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8007a70:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8007a72:	687b      	ldr	r3, [r7, #4]
 8007a74:	681b      	ldr	r3, [r3, #0]
 8007a76:	695a      	ldr	r2, [r3, #20]
 8007a78:	687b      	ldr	r3, [r7, #4]
 8007a7a:	681b      	ldr	r3, [r3, #0]
 8007a7c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8007a80:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8007a82:	687b      	ldr	r3, [r7, #4]
 8007a84:	681b      	ldr	r3, [r3, #0]
 8007a86:	68da      	ldr	r2, [r3, #12]
 8007a88:	687b      	ldr	r3, [r7, #4]
 8007a8a:	681b      	ldr	r3, [r3, #0]
 8007a8c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8007a90:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007a92:	687b      	ldr	r3, [r7, #4]
 8007a94:	2200      	movs	r2, #0
 8007a96:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8007a98:	687b      	ldr	r3, [r7, #4]
 8007a9a:	2220      	movs	r2, #32
 8007a9c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8007aa0:	687b      	ldr	r3, [r7, #4]
 8007aa2:	2220      	movs	r2, #32
 8007aa4:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8007aa8:	2300      	movs	r3, #0
}
 8007aaa:	4618      	mov	r0, r3
 8007aac:	3708      	adds	r7, #8
 8007aae:	46bd      	mov	sp, r7
 8007ab0:	bd80      	pop	{r7, pc}
	...

08007ab4 <HAL_UART_Transmit_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8007ab4:	b580      	push	{r7, lr}
 8007ab6:	b086      	sub	sp, #24
 8007ab8:	af00      	add	r7, sp, #0
 8007aba:	60f8      	str	r0, [r7, #12]
 8007abc:	60b9      	str	r1, [r7, #8]
 8007abe:	4613      	mov	r3, r2
 8007ac0:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8007ac2:	68fb      	ldr	r3, [r7, #12]
 8007ac4:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8007ac8:	b2db      	uxtb	r3, r3
 8007aca:	2b20      	cmp	r3, #32
 8007acc:	d153      	bne.n	8007b76 <HAL_UART_Transmit_DMA+0xc2>
  {
    if ((pData == NULL) || (Size == 0U))
 8007ace:	68bb      	ldr	r3, [r7, #8]
 8007ad0:	2b00      	cmp	r3, #0
 8007ad2:	d002      	beq.n	8007ada <HAL_UART_Transmit_DMA+0x26>
 8007ad4:	88fb      	ldrh	r3, [r7, #6]
 8007ad6:	2b00      	cmp	r3, #0
 8007ad8:	d101      	bne.n	8007ade <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 8007ada:	2301      	movs	r3, #1
 8007adc:	e04c      	b.n	8007b78 <HAL_UART_Transmit_DMA+0xc4>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8007ade:	68fb      	ldr	r3, [r7, #12]
 8007ae0:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8007ae4:	2b01      	cmp	r3, #1
 8007ae6:	d101      	bne.n	8007aec <HAL_UART_Transmit_DMA+0x38>
 8007ae8:	2302      	movs	r3, #2
 8007aea:	e045      	b.n	8007b78 <HAL_UART_Transmit_DMA+0xc4>
 8007aec:	68fb      	ldr	r3, [r7, #12]
 8007aee:	2201      	movs	r2, #1
 8007af0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->pTxBuffPtr = pData;
 8007af4:	68ba      	ldr	r2, [r7, #8]
 8007af6:	68fb      	ldr	r3, [r7, #12]
 8007af8:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 8007afa:	68fb      	ldr	r3, [r7, #12]
 8007afc:	88fa      	ldrh	r2, [r7, #6]
 8007afe:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8007b00:	68fb      	ldr	r3, [r7, #12]
 8007b02:	88fa      	ldrh	r2, [r7, #6]
 8007b04:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007b06:	68fb      	ldr	r3, [r7, #12]
 8007b08:	2200      	movs	r2, #0
 8007b0a:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8007b0c:	68fb      	ldr	r3, [r7, #12]
 8007b0e:	2221      	movs	r2, #33	; 0x21
 8007b10:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Set the UART DMA transfer complete callback */
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8007b14:	68fb      	ldr	r3, [r7, #12]
 8007b16:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007b18:	4a19      	ldr	r2, [pc, #100]	; (8007b80 <HAL_UART_Transmit_DMA+0xcc>)
 8007b1a:	629a      	str	r2, [r3, #40]	; 0x28

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8007b1c:	68fb      	ldr	r3, [r7, #12]
 8007b1e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007b20:	4a18      	ldr	r2, [pc, #96]	; (8007b84 <HAL_UART_Transmit_DMA+0xd0>)
 8007b22:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the DMA error callback */
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 8007b24:	68fb      	ldr	r3, [r7, #12]
 8007b26:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007b28:	4a17      	ldr	r2, [pc, #92]	; (8007b88 <HAL_UART_Transmit_DMA+0xd4>)
 8007b2a:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the DMA abort callback */
    huart->hdmatx->XferAbortCallback = NULL;
 8007b2c:	68fb      	ldr	r3, [r7, #12]
 8007b2e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007b30:	2200      	movs	r2, #0
 8007b32:	635a      	str	r2, [r3, #52]	; 0x34

    /* Enable the UART transmit DMA channel */
    tmp = (uint32_t *)&pData;
 8007b34:	f107 0308 	add.w	r3, r7, #8
 8007b38:	617b      	str	r3, [r7, #20]
    HAL_DMA_Start_IT(huart->hdmatx, *(uint32_t *)tmp, (uint32_t)&huart->Instance->DR, Size);
 8007b3a:	68fb      	ldr	r3, [r7, #12]
 8007b3c:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8007b3e:	697b      	ldr	r3, [r7, #20]
 8007b40:	6819      	ldr	r1, [r3, #0]
 8007b42:	68fb      	ldr	r3, [r7, #12]
 8007b44:	681b      	ldr	r3, [r3, #0]
 8007b46:	3304      	adds	r3, #4
 8007b48:	461a      	mov	r2, r3
 8007b4a:	88fb      	ldrh	r3, [r7, #6]
 8007b4c:	f7fd ffb2 	bl	8005ab4 <HAL_DMA_Start_IT>

    /* Clear the TC flag in the SR register by writing 0 to it */
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 8007b50:	68fb      	ldr	r3, [r7, #12]
 8007b52:	681b      	ldr	r3, [r3, #0]
 8007b54:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8007b58:	601a      	str	r2, [r3, #0]

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8007b5a:	68fb      	ldr	r3, [r7, #12]
 8007b5c:	2200      	movs	r2, #0
 8007b5e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8007b62:	68fb      	ldr	r3, [r7, #12]
 8007b64:	681b      	ldr	r3, [r3, #0]
 8007b66:	695a      	ldr	r2, [r3, #20]
 8007b68:	68fb      	ldr	r3, [r7, #12]
 8007b6a:	681b      	ldr	r3, [r3, #0]
 8007b6c:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8007b70:	615a      	str	r2, [r3, #20]

    return HAL_OK;
 8007b72:	2300      	movs	r3, #0
 8007b74:	e000      	b.n	8007b78 <HAL_UART_Transmit_DMA+0xc4>
  }
  else
  {
    return HAL_BUSY;
 8007b76:	2302      	movs	r3, #2
  }
}
 8007b78:	4618      	mov	r0, r3
 8007b7a:	3718      	adds	r7, #24
 8007b7c:	46bd      	mov	sp, r7
 8007b7e:	bd80      	pop	{r7, pc}
 8007b80:	08007ec3 	.word	0x08007ec3
 8007b84:	08007f15 	.word	0x08007f15
 8007b88:	08007fb5 	.word	0x08007fb5

08007b8c <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8007b8c:	b580      	push	{r7, lr}
 8007b8e:	b086      	sub	sp, #24
 8007b90:	af00      	add	r7, sp, #0
 8007b92:	60f8      	str	r0, [r7, #12]
 8007b94:	60b9      	str	r1, [r7, #8]
 8007b96:	4613      	mov	r3, r2
 8007b98:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8007b9a:	68fb      	ldr	r3, [r7, #12]
 8007b9c:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8007ba0:	b2db      	uxtb	r3, r3
 8007ba2:	2b20      	cmp	r3, #32
 8007ba4:	d166      	bne.n	8007c74 <HAL_UART_Receive_DMA+0xe8>
  {
    if ((pData == NULL) || (Size == 0U))
 8007ba6:	68bb      	ldr	r3, [r7, #8]
 8007ba8:	2b00      	cmp	r3, #0
 8007baa:	d002      	beq.n	8007bb2 <HAL_UART_Receive_DMA+0x26>
 8007bac:	88fb      	ldrh	r3, [r7, #6]
 8007bae:	2b00      	cmp	r3, #0
 8007bb0:	d101      	bne.n	8007bb6 <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 8007bb2:	2301      	movs	r3, #1
 8007bb4:	e05f      	b.n	8007c76 <HAL_UART_Receive_DMA+0xea>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8007bb6:	68fb      	ldr	r3, [r7, #12]
 8007bb8:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8007bbc:	2b01      	cmp	r3, #1
 8007bbe:	d101      	bne.n	8007bc4 <HAL_UART_Receive_DMA+0x38>
 8007bc0:	2302      	movs	r3, #2
 8007bc2:	e058      	b.n	8007c76 <HAL_UART_Receive_DMA+0xea>
 8007bc4:	68fb      	ldr	r3, [r7, #12]
 8007bc6:	2201      	movs	r2, #1
 8007bc8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->pRxBuffPtr = pData;
 8007bcc:	68ba      	ldr	r2, [r7, #8]
 8007bce:	68fb      	ldr	r3, [r7, #12]
 8007bd0:	629a      	str	r2, [r3, #40]	; 0x28
    huart->RxXferSize = Size;
 8007bd2:	68fb      	ldr	r3, [r7, #12]
 8007bd4:	88fa      	ldrh	r2, [r7, #6]
 8007bd6:	859a      	strh	r2, [r3, #44]	; 0x2c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007bd8:	68fb      	ldr	r3, [r7, #12]
 8007bda:	2200      	movs	r2, #0
 8007bdc:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8007bde:	68fb      	ldr	r3, [r7, #12]
 8007be0:	2222      	movs	r2, #34	; 0x22
 8007be2:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8007be6:	68fb      	ldr	r3, [r7, #12]
 8007be8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007bea:	4a25      	ldr	r2, [pc, #148]	; (8007c80 <HAL_UART_Receive_DMA+0xf4>)
 8007bec:	629a      	str	r2, [r3, #40]	; 0x28

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8007bee:	68fb      	ldr	r3, [r7, #12]
 8007bf0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007bf2:	4a24      	ldr	r2, [pc, #144]	; (8007c84 <HAL_UART_Receive_DMA+0xf8>)
 8007bf4:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 8007bf6:	68fb      	ldr	r3, [r7, #12]
 8007bf8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007bfa:	4a23      	ldr	r2, [pc, #140]	; (8007c88 <HAL_UART_Receive_DMA+0xfc>)
 8007bfc:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 8007bfe:	68fb      	ldr	r3, [r7, #12]
 8007c00:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007c02:	2200      	movs	r2, #0
 8007c04:	635a      	str	r2, [r3, #52]	; 0x34

    /* Enable the DMA channel */
    tmp = (uint32_t *)&pData;
 8007c06:	f107 0308 	add.w	r3, r7, #8
 8007c0a:	617b      	str	r3, [r7, #20]
    HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 8007c0c:	68fb      	ldr	r3, [r7, #12]
 8007c0e:	6b58      	ldr	r0, [r3, #52]	; 0x34
 8007c10:	68fb      	ldr	r3, [r7, #12]
 8007c12:	681b      	ldr	r3, [r3, #0]
 8007c14:	3304      	adds	r3, #4
 8007c16:	4619      	mov	r1, r3
 8007c18:	697b      	ldr	r3, [r7, #20]
 8007c1a:	681a      	ldr	r2, [r3, #0]
 8007c1c:	88fb      	ldrh	r3, [r7, #6]
 8007c1e:	f7fd ff49 	bl	8005ab4 <HAL_DMA_Start_IT>

    /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
    __HAL_UART_CLEAR_OREFLAG(huart);
 8007c22:	2300      	movs	r3, #0
 8007c24:	613b      	str	r3, [r7, #16]
 8007c26:	68fb      	ldr	r3, [r7, #12]
 8007c28:	681b      	ldr	r3, [r3, #0]
 8007c2a:	681b      	ldr	r3, [r3, #0]
 8007c2c:	613b      	str	r3, [r7, #16]
 8007c2e:	68fb      	ldr	r3, [r7, #12]
 8007c30:	681b      	ldr	r3, [r3, #0]
 8007c32:	685b      	ldr	r3, [r3, #4]
 8007c34:	613b      	str	r3, [r7, #16]
 8007c36:	693b      	ldr	r3, [r7, #16]

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8007c38:	68fb      	ldr	r3, [r7, #12]
 8007c3a:	2200      	movs	r2, #0
 8007c3c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Enable the UART Parity Error Interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007c40:	68fb      	ldr	r3, [r7, #12]
 8007c42:	681b      	ldr	r3, [r3, #0]
 8007c44:	68da      	ldr	r2, [r3, #12]
 8007c46:	68fb      	ldr	r3, [r7, #12]
 8007c48:	681b      	ldr	r3, [r3, #0]
 8007c4a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8007c4e:	60da      	str	r2, [r3, #12]

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007c50:	68fb      	ldr	r3, [r7, #12]
 8007c52:	681b      	ldr	r3, [r3, #0]
 8007c54:	695a      	ldr	r2, [r3, #20]
 8007c56:	68fb      	ldr	r3, [r7, #12]
 8007c58:	681b      	ldr	r3, [r3, #0]
 8007c5a:	f042 0201 	orr.w	r2, r2, #1
 8007c5e:	615a      	str	r2, [r3, #20]

    /* Enable the DMA transfer for the receiver request by setting the DMAR bit
    in the UART CR3 register */
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007c60:	68fb      	ldr	r3, [r7, #12]
 8007c62:	681b      	ldr	r3, [r3, #0]
 8007c64:	695a      	ldr	r2, [r3, #20]
 8007c66:	68fb      	ldr	r3, [r7, #12]
 8007c68:	681b      	ldr	r3, [r3, #0]
 8007c6a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007c6e:	615a      	str	r2, [r3, #20]

    return HAL_OK;
 8007c70:	2300      	movs	r3, #0
 8007c72:	e000      	b.n	8007c76 <HAL_UART_Receive_DMA+0xea>
  }
  else
  {
    return HAL_BUSY;
 8007c74:	2302      	movs	r3, #2
  }
}
 8007c76:	4618      	mov	r0, r3
 8007c78:	3718      	adds	r7, #24
 8007c7a:	46bd      	mov	sp, r7
 8007c7c:	bd80      	pop	{r7, pc}
 8007c7e:	bf00      	nop
 8007c80:	08007f31 	.word	0x08007f31
 8007c84:	08007f99 	.word	0x08007f99
 8007c88:	08007fb5 	.word	0x08007fb5

08007c8c <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8007c8c:	b580      	push	{r7, lr}
 8007c8e:	b088      	sub	sp, #32
 8007c90:	af00      	add	r7, sp, #0
 8007c92:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8007c94:	687b      	ldr	r3, [r7, #4]
 8007c96:	681b      	ldr	r3, [r3, #0]
 8007c98:	681b      	ldr	r3, [r3, #0]
 8007c9a:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8007c9c:	687b      	ldr	r3, [r7, #4]
 8007c9e:	681b      	ldr	r3, [r3, #0]
 8007ca0:	68db      	ldr	r3, [r3, #12]
 8007ca2:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8007ca4:	687b      	ldr	r3, [r7, #4]
 8007ca6:	681b      	ldr	r3, [r3, #0]
 8007ca8:	695b      	ldr	r3, [r3, #20]
 8007caa:	617b      	str	r3, [r7, #20]
  uint32_t errorflags = 0x00U;
 8007cac:	2300      	movs	r3, #0
 8007cae:	613b      	str	r3, [r7, #16]
  uint32_t dmarequest = 0x00U;
 8007cb0:	2300      	movs	r3, #0
 8007cb2:	60fb      	str	r3, [r7, #12]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8007cb4:	69fb      	ldr	r3, [r7, #28]
 8007cb6:	f003 030f 	and.w	r3, r3, #15
 8007cba:	613b      	str	r3, [r7, #16]
  if (errorflags == RESET)
 8007cbc:	693b      	ldr	r3, [r7, #16]
 8007cbe:	2b00      	cmp	r3, #0
 8007cc0:	d10d      	bne.n	8007cde <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8007cc2:	69fb      	ldr	r3, [r7, #28]
 8007cc4:	f003 0320 	and.w	r3, r3, #32
 8007cc8:	2b00      	cmp	r3, #0
 8007cca:	d008      	beq.n	8007cde <HAL_UART_IRQHandler+0x52>
 8007ccc:	69bb      	ldr	r3, [r7, #24]
 8007cce:	f003 0320 	and.w	r3, r3, #32
 8007cd2:	2b00      	cmp	r3, #0
 8007cd4:	d003      	beq.n	8007cde <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 8007cd6:	6878      	ldr	r0, [r7, #4]
 8007cd8:	f000 fa63 	bl	80081a2 <UART_Receive_IT>
      return;
 8007cdc:	e0d0      	b.n	8007e80 <HAL_UART_IRQHandler+0x1f4>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8007cde:	693b      	ldr	r3, [r7, #16]
 8007ce0:	2b00      	cmp	r3, #0
 8007ce2:	f000 80b0 	beq.w	8007e46 <HAL_UART_IRQHandler+0x1ba>
 8007ce6:	697b      	ldr	r3, [r7, #20]
 8007ce8:	f003 0301 	and.w	r3, r3, #1
 8007cec:	2b00      	cmp	r3, #0
 8007cee:	d105      	bne.n	8007cfc <HAL_UART_IRQHandler+0x70>
 8007cf0:	69bb      	ldr	r3, [r7, #24]
 8007cf2:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8007cf6:	2b00      	cmp	r3, #0
 8007cf8:	f000 80a5 	beq.w	8007e46 <HAL_UART_IRQHandler+0x1ba>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8007cfc:	69fb      	ldr	r3, [r7, #28]
 8007cfe:	f003 0301 	and.w	r3, r3, #1
 8007d02:	2b00      	cmp	r3, #0
 8007d04:	d00a      	beq.n	8007d1c <HAL_UART_IRQHandler+0x90>
 8007d06:	69bb      	ldr	r3, [r7, #24]
 8007d08:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007d0c:	2b00      	cmp	r3, #0
 8007d0e:	d005      	beq.n	8007d1c <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8007d10:	687b      	ldr	r3, [r7, #4]
 8007d12:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007d14:	f043 0201 	orr.w	r2, r3, #1
 8007d18:	687b      	ldr	r3, [r7, #4]
 8007d1a:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8007d1c:	69fb      	ldr	r3, [r7, #28]
 8007d1e:	f003 0304 	and.w	r3, r3, #4
 8007d22:	2b00      	cmp	r3, #0
 8007d24:	d00a      	beq.n	8007d3c <HAL_UART_IRQHandler+0xb0>
 8007d26:	697b      	ldr	r3, [r7, #20]
 8007d28:	f003 0301 	and.w	r3, r3, #1
 8007d2c:	2b00      	cmp	r3, #0
 8007d2e:	d005      	beq.n	8007d3c <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8007d30:	687b      	ldr	r3, [r7, #4]
 8007d32:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007d34:	f043 0202 	orr.w	r2, r3, #2
 8007d38:	687b      	ldr	r3, [r7, #4]
 8007d3a:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8007d3c:	69fb      	ldr	r3, [r7, #28]
 8007d3e:	f003 0302 	and.w	r3, r3, #2
 8007d42:	2b00      	cmp	r3, #0
 8007d44:	d00a      	beq.n	8007d5c <HAL_UART_IRQHandler+0xd0>
 8007d46:	697b      	ldr	r3, [r7, #20]
 8007d48:	f003 0301 	and.w	r3, r3, #1
 8007d4c:	2b00      	cmp	r3, #0
 8007d4e:	d005      	beq.n	8007d5c <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8007d50:	687b      	ldr	r3, [r7, #4]
 8007d52:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007d54:	f043 0204 	orr.w	r2, r3, #4
 8007d58:	687b      	ldr	r3, [r7, #4]
 8007d5a:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8007d5c:	69fb      	ldr	r3, [r7, #28]
 8007d5e:	f003 0308 	and.w	r3, r3, #8
 8007d62:	2b00      	cmp	r3, #0
 8007d64:	d00f      	beq.n	8007d86 <HAL_UART_IRQHandler+0xfa>
 8007d66:	69bb      	ldr	r3, [r7, #24]
 8007d68:	f003 0320 	and.w	r3, r3, #32
 8007d6c:	2b00      	cmp	r3, #0
 8007d6e:	d104      	bne.n	8007d7a <HAL_UART_IRQHandler+0xee>
 8007d70:	697b      	ldr	r3, [r7, #20]
 8007d72:	f003 0301 	and.w	r3, r3, #1
 8007d76:	2b00      	cmp	r3, #0
 8007d78:	d005      	beq.n	8007d86 <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8007d7a:	687b      	ldr	r3, [r7, #4]
 8007d7c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007d7e:	f043 0208 	orr.w	r2, r3, #8
 8007d82:	687b      	ldr	r3, [r7, #4]
 8007d84:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8007d86:	687b      	ldr	r3, [r7, #4]
 8007d88:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007d8a:	2b00      	cmp	r3, #0
 8007d8c:	d077      	beq.n	8007e7e <HAL_UART_IRQHandler+0x1f2>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8007d8e:	69fb      	ldr	r3, [r7, #28]
 8007d90:	f003 0320 	and.w	r3, r3, #32
 8007d94:	2b00      	cmp	r3, #0
 8007d96:	d007      	beq.n	8007da8 <HAL_UART_IRQHandler+0x11c>
 8007d98:	69bb      	ldr	r3, [r7, #24]
 8007d9a:	f003 0320 	and.w	r3, r3, #32
 8007d9e:	2b00      	cmp	r3, #0
 8007da0:	d002      	beq.n	8007da8 <HAL_UART_IRQHandler+0x11c>
      {
        UART_Receive_IT(huart);
 8007da2:	6878      	ldr	r0, [r7, #4]
 8007da4:	f000 f9fd 	bl	80081a2 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8007da8:	687b      	ldr	r3, [r7, #4]
 8007daa:	681b      	ldr	r3, [r3, #0]
 8007dac:	695b      	ldr	r3, [r3, #20]
 8007dae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007db2:	2b00      	cmp	r3, #0
 8007db4:	bf14      	ite	ne
 8007db6:	2301      	movne	r3, #1
 8007db8:	2300      	moveq	r3, #0
 8007dba:	b2db      	uxtb	r3, r3
 8007dbc:	60fb      	str	r3, [r7, #12]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8007dbe:	687b      	ldr	r3, [r7, #4]
 8007dc0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007dc2:	f003 0308 	and.w	r3, r3, #8
 8007dc6:	2b00      	cmp	r3, #0
 8007dc8:	d102      	bne.n	8007dd0 <HAL_UART_IRQHandler+0x144>
 8007dca:	68fb      	ldr	r3, [r7, #12]
 8007dcc:	2b00      	cmp	r3, #0
 8007dce:	d031      	beq.n	8007e34 <HAL_UART_IRQHandler+0x1a8>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8007dd0:	6878      	ldr	r0, [r7, #4]
 8007dd2:	f000 f94e 	bl	8008072 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007dd6:	687b      	ldr	r3, [r7, #4]
 8007dd8:	681b      	ldr	r3, [r3, #0]
 8007dda:	695b      	ldr	r3, [r3, #20]
 8007ddc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007de0:	2b00      	cmp	r3, #0
 8007de2:	d023      	beq.n	8007e2c <HAL_UART_IRQHandler+0x1a0>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007de4:	687b      	ldr	r3, [r7, #4]
 8007de6:	681b      	ldr	r3, [r3, #0]
 8007de8:	695a      	ldr	r2, [r3, #20]
 8007dea:	687b      	ldr	r3, [r7, #4]
 8007dec:	681b      	ldr	r3, [r3, #0]
 8007dee:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007df2:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8007df4:	687b      	ldr	r3, [r7, #4]
 8007df6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007df8:	2b00      	cmp	r3, #0
 8007dfa:	d013      	beq.n	8007e24 <HAL_UART_IRQHandler+0x198>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8007dfc:	687b      	ldr	r3, [r7, #4]
 8007dfe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007e00:	4a21      	ldr	r2, [pc, #132]	; (8007e88 <HAL_UART_IRQHandler+0x1fc>)
 8007e02:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8007e04:	687b      	ldr	r3, [r7, #4]
 8007e06:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007e08:	4618      	mov	r0, r3
 8007e0a:	f7fd feb3 	bl	8005b74 <HAL_DMA_Abort_IT>
 8007e0e:	4603      	mov	r3, r0
 8007e10:	2b00      	cmp	r3, #0
 8007e12:	d016      	beq.n	8007e42 <HAL_UART_IRQHandler+0x1b6>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8007e14:	687b      	ldr	r3, [r7, #4]
 8007e16:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007e18:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007e1a:	687a      	ldr	r2, [r7, #4]
 8007e1c:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8007e1e:	4610      	mov	r0, r2
 8007e20:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007e22:	e00e      	b.n	8007e42 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8007e24:	6878      	ldr	r0, [r7, #4]
 8007e26:	f000 f843 	bl	8007eb0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007e2a:	e00a      	b.n	8007e42 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8007e2c:	6878      	ldr	r0, [r7, #4]
 8007e2e:	f000 f83f 	bl	8007eb0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007e32:	e006      	b.n	8007e42 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8007e34:	6878      	ldr	r0, [r7, #4]
 8007e36:	f000 f83b 	bl	8007eb0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007e3a:	687b      	ldr	r3, [r7, #4]
 8007e3c:	2200      	movs	r2, #0
 8007e3e:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
    return;
 8007e40:	e01d      	b.n	8007e7e <HAL_UART_IRQHandler+0x1f2>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007e42:	bf00      	nop
    return;
 8007e44:	e01b      	b.n	8007e7e <HAL_UART_IRQHandler+0x1f2>
  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8007e46:	69fb      	ldr	r3, [r7, #28]
 8007e48:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007e4c:	2b00      	cmp	r3, #0
 8007e4e:	d008      	beq.n	8007e62 <HAL_UART_IRQHandler+0x1d6>
 8007e50:	69bb      	ldr	r3, [r7, #24]
 8007e52:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007e56:	2b00      	cmp	r3, #0
 8007e58:	d003      	beq.n	8007e62 <HAL_UART_IRQHandler+0x1d6>
  {
    UART_Transmit_IT(huart);
 8007e5a:	6878      	ldr	r0, [r7, #4]
 8007e5c:	f000 f93a 	bl	80080d4 <UART_Transmit_IT>
    return;
 8007e60:	e00e      	b.n	8007e80 <HAL_UART_IRQHandler+0x1f4>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8007e62:	69fb      	ldr	r3, [r7, #28]
 8007e64:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007e68:	2b00      	cmp	r3, #0
 8007e6a:	d009      	beq.n	8007e80 <HAL_UART_IRQHandler+0x1f4>
 8007e6c:	69bb      	ldr	r3, [r7, #24]
 8007e6e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007e72:	2b00      	cmp	r3, #0
 8007e74:	d004      	beq.n	8007e80 <HAL_UART_IRQHandler+0x1f4>
  {
    UART_EndTransmit_IT(huart);
 8007e76:	6878      	ldr	r0, [r7, #4]
 8007e78:	f000 f97b 	bl	8008172 <UART_EndTransmit_IT>
    return;
 8007e7c:	e000      	b.n	8007e80 <HAL_UART_IRQHandler+0x1f4>
    return;
 8007e7e:	bf00      	nop
  }
}
 8007e80:	3720      	adds	r7, #32
 8007e82:	46bd      	mov	sp, r7
 8007e84:	bd80      	pop	{r7, pc}
 8007e86:	bf00      	nop
 8007e88:	080080ad 	.word	0x080080ad

08007e8c <HAL_UART_TxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8007e8c:	b480      	push	{r7}
 8007e8e:	b083      	sub	sp, #12
 8007e90:	af00      	add	r7, sp, #0
 8007e92:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback could be implemented in the user file
   */
}
 8007e94:	bf00      	nop
 8007e96:	370c      	adds	r7, #12
 8007e98:	46bd      	mov	sp, r7
 8007e9a:	bc80      	pop	{r7}
 8007e9c:	4770      	bx	lr

08007e9e <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8007e9e:	b480      	push	{r7}
 8007ea0:	b083      	sub	sp, #12
 8007ea2:	af00      	add	r7, sp, #0
 8007ea4:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 8007ea6:	bf00      	nop
 8007ea8:	370c      	adds	r7, #12
 8007eaa:	46bd      	mov	sp, r7
 8007eac:	bc80      	pop	{r7}
 8007eae:	4770      	bx	lr

08007eb0 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8007eb0:	b480      	push	{r7}
 8007eb2:	b083      	sub	sp, #12
 8007eb4:	af00      	add	r7, sp, #0
 8007eb6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8007eb8:	bf00      	nop
 8007eba:	370c      	adds	r7, #12
 8007ebc:	46bd      	mov	sp, r7
 8007ebe:	bc80      	pop	{r7}
 8007ec0:	4770      	bx	lr

08007ec2 <UART_DMATransmitCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8007ec2:	b580      	push	{r7, lr}
 8007ec4:	b084      	sub	sp, #16
 8007ec6:	af00      	add	r7, sp, #0
 8007ec8:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007eca:	687b      	ldr	r3, [r7, #4]
 8007ecc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007ece:	60fb      	str	r3, [r7, #12]
  /* DMA Normal mode*/
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8007ed0:	687b      	ldr	r3, [r7, #4]
 8007ed2:	681b      	ldr	r3, [r3, #0]
 8007ed4:	681b      	ldr	r3, [r3, #0]
 8007ed6:	f003 0320 	and.w	r3, r3, #32
 8007eda:	2b00      	cmp	r3, #0
 8007edc:	d113      	bne.n	8007f06 <UART_DMATransmitCplt+0x44>
  {
    huart->TxXferCount = 0x00U;
 8007ede:	68fb      	ldr	r3, [r7, #12]
 8007ee0:	2200      	movs	r2, #0
 8007ee2:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Disable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8007ee4:	68fb      	ldr	r3, [r7, #12]
 8007ee6:	681b      	ldr	r3, [r3, #0]
 8007ee8:	695a      	ldr	r2, [r3, #20]
 8007eea:	68fb      	ldr	r3, [r7, #12]
 8007eec:	681b      	ldr	r3, [r3, #0]
 8007eee:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8007ef2:	615a      	str	r2, [r3, #20]

    /* Enable the UART Transmit Complete Interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8007ef4:	68fb      	ldr	r3, [r7, #12]
 8007ef6:	681b      	ldr	r3, [r3, #0]
 8007ef8:	68da      	ldr	r2, [r3, #12]
 8007efa:	68fb      	ldr	r3, [r7, #12]
 8007efc:	681b      	ldr	r3, [r3, #0]
 8007efe:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007f02:	60da      	str	r2, [r3, #12]
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8007f04:	e002      	b.n	8007f0c <UART_DMATransmitCplt+0x4a>
    HAL_UART_TxCpltCallback(huart);
 8007f06:	68f8      	ldr	r0, [r7, #12]
 8007f08:	f7f9 ff12 	bl	8001d30 <HAL_UART_TxCpltCallback>
}
 8007f0c:	bf00      	nop
 8007f0e:	3710      	adds	r7, #16
 8007f10:	46bd      	mov	sp, r7
 8007f12:	bd80      	pop	{r7, pc}

08007f14 <UART_DMATxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8007f14:	b580      	push	{r7, lr}
 8007f16:	b084      	sub	sp, #16
 8007f18:	af00      	add	r7, sp, #0
 8007f1a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007f1c:	687b      	ldr	r3, [r7, #4]
 8007f1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007f20:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 8007f22:	68f8      	ldr	r0, [r7, #12]
 8007f24:	f7ff ffb2 	bl	8007e8c <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007f28:	bf00      	nop
 8007f2a:	3710      	adds	r7, #16
 8007f2c:	46bd      	mov	sp, r7
 8007f2e:	bd80      	pop	{r7, pc}

08007f30 <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8007f30:	b580      	push	{r7, lr}
 8007f32:	b084      	sub	sp, #16
 8007f34:	af00      	add	r7, sp, #0
 8007f36:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007f38:	687b      	ldr	r3, [r7, #4]
 8007f3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007f3c:	60fb      	str	r3, [r7, #12]
  /* DMA Normal mode*/
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8007f3e:	687b      	ldr	r3, [r7, #4]
 8007f40:	681b      	ldr	r3, [r3, #0]
 8007f42:	681b      	ldr	r3, [r3, #0]
 8007f44:	f003 0320 	and.w	r3, r3, #32
 8007f48:	2b00      	cmp	r3, #0
 8007f4a:	d11e      	bne.n	8007f8a <UART_DMAReceiveCplt+0x5a>
  {
    huart->RxXferCount = 0U;
 8007f4c:	68fb      	ldr	r3, [r7, #12]
 8007f4e:	2200      	movs	r2, #0
 8007f50:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007f52:	68fb      	ldr	r3, [r7, #12]
 8007f54:	681b      	ldr	r3, [r3, #0]
 8007f56:	68da      	ldr	r2, [r3, #12]
 8007f58:	68fb      	ldr	r3, [r7, #12]
 8007f5a:	681b      	ldr	r3, [r3, #0]
 8007f5c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8007f60:	60da      	str	r2, [r3, #12]
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007f62:	68fb      	ldr	r3, [r7, #12]
 8007f64:	681b      	ldr	r3, [r3, #0]
 8007f66:	695a      	ldr	r2, [r3, #20]
 8007f68:	68fb      	ldr	r3, [r7, #12]
 8007f6a:	681b      	ldr	r3, [r3, #0]
 8007f6c:	f022 0201 	bic.w	r2, r2, #1
 8007f70:	615a      	str	r2, [r3, #20]

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007f72:	68fb      	ldr	r3, [r7, #12]
 8007f74:	681b      	ldr	r3, [r3, #0]
 8007f76:	695a      	ldr	r2, [r3, #20]
 8007f78:	68fb      	ldr	r3, [r7, #12]
 8007f7a:	681b      	ldr	r3, [r3, #0]
 8007f7c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007f80:	615a      	str	r2, [r3, #20]

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8007f82:	68fb      	ldr	r3, [r7, #12]
 8007f84:	2220      	movs	r2, #32
 8007f86:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Rx complete callback*/
  huart->RxCpltCallback(huart);
#else
  /*Call legacy weak Rx complete callback*/
  HAL_UART_RxCpltCallback(huart);
 8007f8a:	68f8      	ldr	r0, [r7, #12]
 8007f8c:	f7f9 feec 	bl	8001d68 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007f90:	bf00      	nop
 8007f92:	3710      	adds	r7, #16
 8007f94:	46bd      	mov	sp, r7
 8007f96:	bd80      	pop	{r7, pc}

08007f98 <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8007f98:	b580      	push	{r7, lr}
 8007f9a:	b084      	sub	sp, #16
 8007f9c:	af00      	add	r7, sp, #0
 8007f9e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007fa0:	687b      	ldr	r3, [r7, #4]
 8007fa2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007fa4:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Rx Half complete callback*/
  huart->RxHalfCpltCallback(huart);
#else
  /*Call legacy weak Rx Half complete callback*/
  HAL_UART_RxHalfCpltCallback(huart);
 8007fa6:	68f8      	ldr	r0, [r7, #12]
 8007fa8:	f7ff ff79 	bl	8007e9e <HAL_UART_RxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007fac:	bf00      	nop
 8007fae:	3710      	adds	r7, #16
 8007fb0:	46bd      	mov	sp, r7
 8007fb2:	bd80      	pop	{r7, pc}

08007fb4 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8007fb4:	b580      	push	{r7, lr}
 8007fb6:	b084      	sub	sp, #16
 8007fb8:	af00      	add	r7, sp, #0
 8007fba:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8007fbc:	2300      	movs	r3, #0
 8007fbe:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007fc0:	687b      	ldr	r3, [r7, #4]
 8007fc2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007fc4:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8007fc6:	68bb      	ldr	r3, [r7, #8]
 8007fc8:	681b      	ldr	r3, [r3, #0]
 8007fca:	695b      	ldr	r3, [r3, #20]
 8007fcc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007fd0:	2b00      	cmp	r3, #0
 8007fd2:	bf14      	ite	ne
 8007fd4:	2301      	movne	r3, #1
 8007fd6:	2300      	moveq	r3, #0
 8007fd8:	b2db      	uxtb	r3, r3
 8007fda:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8007fdc:	68bb      	ldr	r3, [r7, #8]
 8007fde:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8007fe2:	b2db      	uxtb	r3, r3
 8007fe4:	2b21      	cmp	r3, #33	; 0x21
 8007fe6:	d108      	bne.n	8007ffa <UART_DMAError+0x46>
 8007fe8:	68fb      	ldr	r3, [r7, #12]
 8007fea:	2b00      	cmp	r3, #0
 8007fec:	d005      	beq.n	8007ffa <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 8007fee:	68bb      	ldr	r3, [r7, #8]
 8007ff0:	2200      	movs	r2, #0
 8007ff2:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 8007ff4:	68b8      	ldr	r0, [r7, #8]
 8007ff6:	f000 f827 	bl	8008048 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8007ffa:	68bb      	ldr	r3, [r7, #8]
 8007ffc:	681b      	ldr	r3, [r3, #0]
 8007ffe:	695b      	ldr	r3, [r3, #20]
 8008000:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008004:	2b00      	cmp	r3, #0
 8008006:	bf14      	ite	ne
 8008008:	2301      	movne	r3, #1
 800800a:	2300      	moveq	r3, #0
 800800c:	b2db      	uxtb	r3, r3
 800800e:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8008010:	68bb      	ldr	r3, [r7, #8]
 8008012:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8008016:	b2db      	uxtb	r3, r3
 8008018:	2b22      	cmp	r3, #34	; 0x22
 800801a:	d108      	bne.n	800802e <UART_DMAError+0x7a>
 800801c:	68fb      	ldr	r3, [r7, #12]
 800801e:	2b00      	cmp	r3, #0
 8008020:	d005      	beq.n	800802e <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 8008022:	68bb      	ldr	r3, [r7, #8]
 8008024:	2200      	movs	r2, #0
 8008026:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 8008028:	68b8      	ldr	r0, [r7, #8]
 800802a:	f000 f822 	bl	8008072 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800802e:	68bb      	ldr	r3, [r7, #8]
 8008030:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008032:	f043 0210 	orr.w	r2, r3, #16
 8008036:	68bb      	ldr	r3, [r7, #8]
 8008038:	63da      	str	r2, [r3, #60]	; 0x3c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800803a:	68b8      	ldr	r0, [r7, #8]
 800803c:	f7ff ff38 	bl	8007eb0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008040:	bf00      	nop
 8008042:	3710      	adds	r7, #16
 8008044:	46bd      	mov	sp, r7
 8008046:	bd80      	pop	{r7, pc}

08008048 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8008048:	b480      	push	{r7}
 800804a:	b083      	sub	sp, #12
 800804c:	af00      	add	r7, sp, #0
 800804e:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8008050:	687b      	ldr	r3, [r7, #4]
 8008052:	681b      	ldr	r3, [r3, #0]
 8008054:	68da      	ldr	r2, [r3, #12]
 8008056:	687b      	ldr	r3, [r7, #4]
 8008058:	681b      	ldr	r3, [r3, #0]
 800805a:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 800805e:	60da      	str	r2, [r3, #12]

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8008060:	687b      	ldr	r3, [r7, #4]
 8008062:	2220      	movs	r2, #32
 8008064:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
}
 8008068:	bf00      	nop
 800806a:	370c      	adds	r7, #12
 800806c:	46bd      	mov	sp, r7
 800806e:	bc80      	pop	{r7}
 8008070:	4770      	bx	lr

08008072 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8008072:	b480      	push	{r7}
 8008074:	b083      	sub	sp, #12
 8008076:	af00      	add	r7, sp, #0
 8008078:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800807a:	687b      	ldr	r3, [r7, #4]
 800807c:	681b      	ldr	r3, [r3, #0]
 800807e:	68da      	ldr	r2, [r3, #12]
 8008080:	687b      	ldr	r3, [r7, #4]
 8008082:	681b      	ldr	r3, [r3, #0]
 8008084:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8008088:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800808a:	687b      	ldr	r3, [r7, #4]
 800808c:	681b      	ldr	r3, [r3, #0]
 800808e:	695a      	ldr	r2, [r3, #20]
 8008090:	687b      	ldr	r3, [r7, #4]
 8008092:	681b      	ldr	r3, [r3, #0]
 8008094:	f022 0201 	bic.w	r2, r2, #1
 8008098:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800809a:	687b      	ldr	r3, [r7, #4]
 800809c:	2220      	movs	r2, #32
 800809e:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 80080a2:	bf00      	nop
 80080a4:	370c      	adds	r7, #12
 80080a6:	46bd      	mov	sp, r7
 80080a8:	bc80      	pop	{r7}
 80080aa:	4770      	bx	lr

080080ac <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80080ac:	b580      	push	{r7, lr}
 80080ae:	b084      	sub	sp, #16
 80080b0:	af00      	add	r7, sp, #0
 80080b2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80080b4:	687b      	ldr	r3, [r7, #4]
 80080b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80080b8:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80080ba:	68fb      	ldr	r3, [r7, #12]
 80080bc:	2200      	movs	r2, #0
 80080be:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 80080c0:	68fb      	ldr	r3, [r7, #12]
 80080c2:	2200      	movs	r2, #0
 80080c4:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80080c6:	68f8      	ldr	r0, [r7, #12]
 80080c8:	f7ff fef2 	bl	8007eb0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80080cc:	bf00      	nop
 80080ce:	3710      	adds	r7, #16
 80080d0:	46bd      	mov	sp, r7
 80080d2:	bd80      	pop	{r7, pc}

080080d4 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80080d4:	b480      	push	{r7}
 80080d6:	b085      	sub	sp, #20
 80080d8:	af00      	add	r7, sp, #0
 80080da:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80080dc:	687b      	ldr	r3, [r7, #4]
 80080de:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80080e2:	b2db      	uxtb	r3, r3
 80080e4:	2b21      	cmp	r3, #33	; 0x21
 80080e6:	d13e      	bne.n	8008166 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80080e8:	687b      	ldr	r3, [r7, #4]
 80080ea:	689b      	ldr	r3, [r3, #8]
 80080ec:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80080f0:	d114      	bne.n	800811c <UART_Transmit_IT+0x48>
 80080f2:	687b      	ldr	r3, [r7, #4]
 80080f4:	691b      	ldr	r3, [r3, #16]
 80080f6:	2b00      	cmp	r3, #0
 80080f8:	d110      	bne.n	800811c <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 80080fa:	687b      	ldr	r3, [r7, #4]
 80080fc:	6a1b      	ldr	r3, [r3, #32]
 80080fe:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8008100:	68fb      	ldr	r3, [r7, #12]
 8008102:	881b      	ldrh	r3, [r3, #0]
 8008104:	461a      	mov	r2, r3
 8008106:	687b      	ldr	r3, [r7, #4]
 8008108:	681b      	ldr	r3, [r3, #0]
 800810a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800810e:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8008110:	687b      	ldr	r3, [r7, #4]
 8008112:	6a1b      	ldr	r3, [r3, #32]
 8008114:	1c9a      	adds	r2, r3, #2
 8008116:	687b      	ldr	r3, [r7, #4]
 8008118:	621a      	str	r2, [r3, #32]
 800811a:	e008      	b.n	800812e <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800811c:	687b      	ldr	r3, [r7, #4]
 800811e:	6a1b      	ldr	r3, [r3, #32]
 8008120:	1c59      	adds	r1, r3, #1
 8008122:	687a      	ldr	r2, [r7, #4]
 8008124:	6211      	str	r1, [r2, #32]
 8008126:	781a      	ldrb	r2, [r3, #0]
 8008128:	687b      	ldr	r3, [r7, #4]
 800812a:	681b      	ldr	r3, [r3, #0]
 800812c:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800812e:	687b      	ldr	r3, [r7, #4]
 8008130:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8008132:	b29b      	uxth	r3, r3
 8008134:	3b01      	subs	r3, #1
 8008136:	b29b      	uxth	r3, r3
 8008138:	687a      	ldr	r2, [r7, #4]
 800813a:	4619      	mov	r1, r3
 800813c:	84d1      	strh	r1, [r2, #38]	; 0x26
 800813e:	2b00      	cmp	r3, #0
 8008140:	d10f      	bne.n	8008162 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8008142:	687b      	ldr	r3, [r7, #4]
 8008144:	681b      	ldr	r3, [r3, #0]
 8008146:	68da      	ldr	r2, [r3, #12]
 8008148:	687b      	ldr	r3, [r7, #4]
 800814a:	681b      	ldr	r3, [r3, #0]
 800814c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8008150:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8008152:	687b      	ldr	r3, [r7, #4]
 8008154:	681b      	ldr	r3, [r3, #0]
 8008156:	68da      	ldr	r2, [r3, #12]
 8008158:	687b      	ldr	r3, [r7, #4]
 800815a:	681b      	ldr	r3, [r3, #0]
 800815c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8008160:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8008162:	2300      	movs	r3, #0
 8008164:	e000      	b.n	8008168 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8008166:	2302      	movs	r3, #2
  }
}
 8008168:	4618      	mov	r0, r3
 800816a:	3714      	adds	r7, #20
 800816c:	46bd      	mov	sp, r7
 800816e:	bc80      	pop	{r7}
 8008170:	4770      	bx	lr

08008172 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8008172:	b580      	push	{r7, lr}
 8008174:	b082      	sub	sp, #8
 8008176:	af00      	add	r7, sp, #0
 8008178:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800817a:	687b      	ldr	r3, [r7, #4]
 800817c:	681b      	ldr	r3, [r3, #0]
 800817e:	68da      	ldr	r2, [r3, #12]
 8008180:	687b      	ldr	r3, [r7, #4]
 8008182:	681b      	ldr	r3, [r3, #0]
 8008184:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008188:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800818a:	687b      	ldr	r3, [r7, #4]
 800818c:	2220      	movs	r2, #32
 800818e:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8008192:	6878      	ldr	r0, [r7, #4]
 8008194:	f7f9 fdcc 	bl	8001d30 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8008198:	2300      	movs	r3, #0
}
 800819a:	4618      	mov	r0, r3
 800819c:	3708      	adds	r7, #8
 800819e:	46bd      	mov	sp, r7
 80081a0:	bd80      	pop	{r7, pc}

080081a2 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80081a2:	b580      	push	{r7, lr}
 80081a4:	b084      	sub	sp, #16
 80081a6:	af00      	add	r7, sp, #0
 80081a8:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80081aa:	687b      	ldr	r3, [r7, #4]
 80081ac:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 80081b0:	b2db      	uxtb	r3, r3
 80081b2:	2b22      	cmp	r3, #34	; 0x22
 80081b4:	d170      	bne.n	8008298 <UART_Receive_IT+0xf6>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80081b6:	687b      	ldr	r3, [r7, #4]
 80081b8:	689b      	ldr	r3, [r3, #8]
 80081ba:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80081be:	d117      	bne.n	80081f0 <UART_Receive_IT+0x4e>
 80081c0:	687b      	ldr	r3, [r7, #4]
 80081c2:	691b      	ldr	r3, [r3, #16]
 80081c4:	2b00      	cmp	r3, #0
 80081c6:	d113      	bne.n	80081f0 <UART_Receive_IT+0x4e>
    {
      pdata8bits  = NULL;
 80081c8:	2300      	movs	r3, #0
 80081ca:	60fb      	str	r3, [r7, #12]
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80081cc:	687b      	ldr	r3, [r7, #4]
 80081ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80081d0:	60bb      	str	r3, [r7, #8]
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80081d2:	687b      	ldr	r3, [r7, #4]
 80081d4:	681b      	ldr	r3, [r3, #0]
 80081d6:	685b      	ldr	r3, [r3, #4]
 80081d8:	b29b      	uxth	r3, r3
 80081da:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80081de:	b29a      	uxth	r2, r3
 80081e0:	68bb      	ldr	r3, [r7, #8]
 80081e2:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80081e4:	687b      	ldr	r3, [r7, #4]
 80081e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80081e8:	1c9a      	adds	r2, r3, #2
 80081ea:	687b      	ldr	r3, [r7, #4]
 80081ec:	629a      	str	r2, [r3, #40]	; 0x28
 80081ee:	e026      	b.n	800823e <UART_Receive_IT+0x9c>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80081f0:	687b      	ldr	r3, [r7, #4]
 80081f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80081f4:	60fb      	str	r3, [r7, #12]
      pdata16bits  = NULL;
 80081f6:	2300      	movs	r3, #0
 80081f8:	60bb      	str	r3, [r7, #8]

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80081fa:	687b      	ldr	r3, [r7, #4]
 80081fc:	689b      	ldr	r3, [r3, #8]
 80081fe:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008202:	d007      	beq.n	8008214 <UART_Receive_IT+0x72>
 8008204:	687b      	ldr	r3, [r7, #4]
 8008206:	689b      	ldr	r3, [r3, #8]
 8008208:	2b00      	cmp	r3, #0
 800820a:	d10a      	bne.n	8008222 <UART_Receive_IT+0x80>
 800820c:	687b      	ldr	r3, [r7, #4]
 800820e:	691b      	ldr	r3, [r3, #16]
 8008210:	2b00      	cmp	r3, #0
 8008212:	d106      	bne.n	8008222 <UART_Receive_IT+0x80>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8008214:	687b      	ldr	r3, [r7, #4]
 8008216:	681b      	ldr	r3, [r3, #0]
 8008218:	685b      	ldr	r3, [r3, #4]
 800821a:	b2da      	uxtb	r2, r3
 800821c:	68fb      	ldr	r3, [r7, #12]
 800821e:	701a      	strb	r2, [r3, #0]
 8008220:	e008      	b.n	8008234 <UART_Receive_IT+0x92>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8008222:	687b      	ldr	r3, [r7, #4]
 8008224:	681b      	ldr	r3, [r3, #0]
 8008226:	685b      	ldr	r3, [r3, #4]
 8008228:	b2db      	uxtb	r3, r3
 800822a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800822e:	b2da      	uxtb	r2, r3
 8008230:	68fb      	ldr	r3, [r7, #12]
 8008232:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8008234:	687b      	ldr	r3, [r7, #4]
 8008236:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008238:	1c5a      	adds	r2, r3, #1
 800823a:	687b      	ldr	r3, [r7, #4]
 800823c:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 800823e:	687b      	ldr	r3, [r7, #4]
 8008240:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8008242:	b29b      	uxth	r3, r3
 8008244:	3b01      	subs	r3, #1
 8008246:	b29b      	uxth	r3, r3
 8008248:	687a      	ldr	r2, [r7, #4]
 800824a:	4619      	mov	r1, r3
 800824c:	85d1      	strh	r1, [r2, #46]	; 0x2e
 800824e:	2b00      	cmp	r3, #0
 8008250:	d120      	bne.n	8008294 <UART_Receive_IT+0xf2>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8008252:	687b      	ldr	r3, [r7, #4]
 8008254:	681b      	ldr	r3, [r3, #0]
 8008256:	68da      	ldr	r2, [r3, #12]
 8008258:	687b      	ldr	r3, [r7, #4]
 800825a:	681b      	ldr	r3, [r3, #0]
 800825c:	f022 0220 	bic.w	r2, r2, #32
 8008260:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8008262:	687b      	ldr	r3, [r7, #4]
 8008264:	681b      	ldr	r3, [r3, #0]
 8008266:	68da      	ldr	r2, [r3, #12]
 8008268:	687b      	ldr	r3, [r7, #4]
 800826a:	681b      	ldr	r3, [r3, #0]
 800826c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8008270:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8008272:	687b      	ldr	r3, [r7, #4]
 8008274:	681b      	ldr	r3, [r3, #0]
 8008276:	695a      	ldr	r2, [r3, #20]
 8008278:	687b      	ldr	r3, [r7, #4]
 800827a:	681b      	ldr	r3, [r3, #0]
 800827c:	f022 0201 	bic.w	r2, r2, #1
 8008280:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8008282:	687b      	ldr	r3, [r7, #4]
 8008284:	2220      	movs	r2, #32
 8008286:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 800828a:	6878      	ldr	r0, [r7, #4]
 800828c:	f7f9 fd6c 	bl	8001d68 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

      return HAL_OK;
 8008290:	2300      	movs	r3, #0
 8008292:	e002      	b.n	800829a <UART_Receive_IT+0xf8>
    }
    return HAL_OK;
 8008294:	2300      	movs	r3, #0
 8008296:	e000      	b.n	800829a <UART_Receive_IT+0xf8>
  }
  else
  {
    return HAL_BUSY;
 8008298:	2302      	movs	r3, #2
  }
}
 800829a:	4618      	mov	r0, r3
 800829c:	3710      	adds	r7, #16
 800829e:	46bd      	mov	sp, r7
 80082a0:	bd80      	pop	{r7, pc}
	...

080082a4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80082a4:	b580      	push	{r7, lr}
 80082a6:	b084      	sub	sp, #16
 80082a8:	af00      	add	r7, sp, #0
 80082aa:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80082ac:	687b      	ldr	r3, [r7, #4]
 80082ae:	681b      	ldr	r3, [r3, #0]
 80082b0:	691b      	ldr	r3, [r3, #16]
 80082b2:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80082b6:	687b      	ldr	r3, [r7, #4]
 80082b8:	68da      	ldr	r2, [r3, #12]
 80082ba:	687b      	ldr	r3, [r7, #4]
 80082bc:	681b      	ldr	r3, [r3, #0]
 80082be:	430a      	orrs	r2, r1
 80082c0:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 80082c2:	687b      	ldr	r3, [r7, #4]
 80082c4:	689a      	ldr	r2, [r3, #8]
 80082c6:	687b      	ldr	r3, [r7, #4]
 80082c8:	691b      	ldr	r3, [r3, #16]
 80082ca:	431a      	orrs	r2, r3
 80082cc:	687b      	ldr	r3, [r7, #4]
 80082ce:	695b      	ldr	r3, [r3, #20]
 80082d0:	4313      	orrs	r3, r2
 80082d2:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 80082d4:	687b      	ldr	r3, [r7, #4]
 80082d6:	681b      	ldr	r3, [r3, #0]
 80082d8:	68db      	ldr	r3, [r3, #12]
 80082da:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 80082de:	f023 030c 	bic.w	r3, r3, #12
 80082e2:	687a      	ldr	r2, [r7, #4]
 80082e4:	6812      	ldr	r2, [r2, #0]
 80082e6:	68b9      	ldr	r1, [r7, #8]
 80082e8:	430b      	orrs	r3, r1
 80082ea:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80082ec:	687b      	ldr	r3, [r7, #4]
 80082ee:	681b      	ldr	r3, [r3, #0]
 80082f0:	695b      	ldr	r3, [r3, #20]
 80082f2:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80082f6:	687b      	ldr	r3, [r7, #4]
 80082f8:	699a      	ldr	r2, [r3, #24]
 80082fa:	687b      	ldr	r3, [r7, #4]
 80082fc:	681b      	ldr	r3, [r3, #0]
 80082fe:	430a      	orrs	r2, r1
 8008300:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8008302:	687b      	ldr	r3, [r7, #4]
 8008304:	681b      	ldr	r3, [r3, #0]
 8008306:	4a2c      	ldr	r2, [pc, #176]	; (80083b8 <UART_SetConfig+0x114>)
 8008308:	4293      	cmp	r3, r2
 800830a:	d103      	bne.n	8008314 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 800830c:	f7fe fb78 	bl	8006a00 <HAL_RCC_GetPCLK2Freq>
 8008310:	60f8      	str	r0, [r7, #12]
 8008312:	e002      	b.n	800831a <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8008314:	f7fe fb60 	bl	80069d8 <HAL_RCC_GetPCLK1Freq>
 8008318:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800831a:	68fa      	ldr	r2, [r7, #12]
 800831c:	4613      	mov	r3, r2
 800831e:	009b      	lsls	r3, r3, #2
 8008320:	4413      	add	r3, r2
 8008322:	009a      	lsls	r2, r3, #2
 8008324:	441a      	add	r2, r3
 8008326:	687b      	ldr	r3, [r7, #4]
 8008328:	685b      	ldr	r3, [r3, #4]
 800832a:	009b      	lsls	r3, r3, #2
 800832c:	fbb2 f3f3 	udiv	r3, r2, r3
 8008330:	4a22      	ldr	r2, [pc, #136]	; (80083bc <UART_SetConfig+0x118>)
 8008332:	fba2 2303 	umull	r2, r3, r2, r3
 8008336:	095b      	lsrs	r3, r3, #5
 8008338:	0119      	lsls	r1, r3, #4
 800833a:	68fa      	ldr	r2, [r7, #12]
 800833c:	4613      	mov	r3, r2
 800833e:	009b      	lsls	r3, r3, #2
 8008340:	4413      	add	r3, r2
 8008342:	009a      	lsls	r2, r3, #2
 8008344:	441a      	add	r2, r3
 8008346:	687b      	ldr	r3, [r7, #4]
 8008348:	685b      	ldr	r3, [r3, #4]
 800834a:	009b      	lsls	r3, r3, #2
 800834c:	fbb2 f2f3 	udiv	r2, r2, r3
 8008350:	4b1a      	ldr	r3, [pc, #104]	; (80083bc <UART_SetConfig+0x118>)
 8008352:	fba3 0302 	umull	r0, r3, r3, r2
 8008356:	095b      	lsrs	r3, r3, #5
 8008358:	2064      	movs	r0, #100	; 0x64
 800835a:	fb00 f303 	mul.w	r3, r0, r3
 800835e:	1ad3      	subs	r3, r2, r3
 8008360:	011b      	lsls	r3, r3, #4
 8008362:	3332      	adds	r3, #50	; 0x32
 8008364:	4a15      	ldr	r2, [pc, #84]	; (80083bc <UART_SetConfig+0x118>)
 8008366:	fba2 2303 	umull	r2, r3, r2, r3
 800836a:	095b      	lsrs	r3, r3, #5
 800836c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8008370:	4419      	add	r1, r3
 8008372:	68fa      	ldr	r2, [r7, #12]
 8008374:	4613      	mov	r3, r2
 8008376:	009b      	lsls	r3, r3, #2
 8008378:	4413      	add	r3, r2
 800837a:	009a      	lsls	r2, r3, #2
 800837c:	441a      	add	r2, r3
 800837e:	687b      	ldr	r3, [r7, #4]
 8008380:	685b      	ldr	r3, [r3, #4]
 8008382:	009b      	lsls	r3, r3, #2
 8008384:	fbb2 f2f3 	udiv	r2, r2, r3
 8008388:	4b0c      	ldr	r3, [pc, #48]	; (80083bc <UART_SetConfig+0x118>)
 800838a:	fba3 0302 	umull	r0, r3, r3, r2
 800838e:	095b      	lsrs	r3, r3, #5
 8008390:	2064      	movs	r0, #100	; 0x64
 8008392:	fb00 f303 	mul.w	r3, r0, r3
 8008396:	1ad3      	subs	r3, r2, r3
 8008398:	011b      	lsls	r3, r3, #4
 800839a:	3332      	adds	r3, #50	; 0x32
 800839c:	4a07      	ldr	r2, [pc, #28]	; (80083bc <UART_SetConfig+0x118>)
 800839e:	fba2 2303 	umull	r2, r3, r2, r3
 80083a2:	095b      	lsrs	r3, r3, #5
 80083a4:	f003 020f 	and.w	r2, r3, #15
 80083a8:	687b      	ldr	r3, [r7, #4]
 80083aa:	681b      	ldr	r3, [r3, #0]
 80083ac:	440a      	add	r2, r1
 80083ae:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 80083b0:	bf00      	nop
 80083b2:	3710      	adds	r7, #16
 80083b4:	46bd      	mov	sp, r7
 80083b6:	bd80      	pop	{r7, pc}
 80083b8:	40013800 	.word	0x40013800
 80083bc:	51eb851f 	.word	0x51eb851f

080083c0 <JoyStick_Init>:
		ADC_CHANNEL_8,
		ADC_CHANNEL_9
	};

void JoyStick_Init()
{
 80083c0:	b580      	push	{r7, lr}
 80083c2:	b084      	sub	sp, #16
 80083c4:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 80083c6:	463b      	mov	r3, r7
 80083c8:	2200      	movs	r2, #0
 80083ca:	601a      	str	r2, [r3, #0]
 80083cc:	605a      	str	r2, [r3, #4]
 80083ce:	609a      	str	r2, [r3, #8]
 80083d0:	60da      	str	r2, [r3, #12]
	// Configure adc pins
	GPIO_InitStruct.Pin = Manual_Joy.JoyStick_xPIN;
 80083d2:	2301      	movs	r3, #1
 80083d4:	603b      	str	r3, [r7, #0]
	GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80083d6:	2303      	movs	r3, #3
 80083d8:	607b      	str	r3, [r7, #4]
	HAL_GPIO_Init(Manual_Joy.JoyStick_xGPIO, &GPIO_InitStruct);
 80083da:	4a22      	ldr	r2, [pc, #136]	; (8008464 <JoyStick_Init+0xa4>)
 80083dc:	463b      	mov	r3, r7
 80083de:	4619      	mov	r1, r3
 80083e0:	4610      	mov	r0, r2
 80083e2:	f7fd fd71 	bl	8005ec8 <HAL_GPIO_Init>

	GPIO_InitStruct.Pin = Manual_Joy.JoyStick_yPIN;
 80083e6:	2302      	movs	r3, #2
 80083e8:	603b      	str	r3, [r7, #0]
	GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80083ea:	2303      	movs	r3, #3
 80083ec:	607b      	str	r3, [r7, #4]
	HAL_GPIO_Init(Manual_Joy.JoyStick_yGPIO, &GPIO_InitStruct);
 80083ee:	4a1d      	ldr	r2, [pc, #116]	; (8008464 <JoyStick_Init+0xa4>)
 80083f0:	463b      	mov	r3, r7
 80083f2:	4619      	mov	r1, r3
 80083f4:	4610      	mov	r0, r2
 80083f6:	f7fd fd67 	bl	8005ec8 <HAL_GPIO_Init>
	// Configure ADC
	hadc.Instance = Manual_Joy.ADC_Instance;
 80083fa:	4a1b      	ldr	r2, [pc, #108]	; (8008468 <JoyStick_Init+0xa8>)
 80083fc:	4b1b      	ldr	r3, [pc, #108]	; (800846c <JoyStick_Init+0xac>)
 80083fe:	601a      	str	r2, [r3, #0]
	hadc.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8008400:	4b1a      	ldr	r3, [pc, #104]	; (800846c <JoyStick_Init+0xac>)
 8008402:	2200      	movs	r2, #0
 8008404:	609a      	str	r2, [r3, #8]
	hadc.Init.ContinuousConvMode = DISABLE;
 8008406:	4b19      	ldr	r3, [pc, #100]	; (800846c <JoyStick_Init+0xac>)
 8008408:	2200      	movs	r2, #0
 800840a:	731a      	strb	r2, [r3, #12]
	hadc.Init.DiscontinuousConvMode = DISABLE;
 800840c:	4b17      	ldr	r3, [pc, #92]	; (800846c <JoyStick_Init+0xac>)
 800840e:	2200      	movs	r2, #0
 8008410:	751a      	strb	r2, [r3, #20]
	hadc.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8008412:	4b16      	ldr	r3, [pc, #88]	; (800846c <JoyStick_Init+0xac>)
 8008414:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 8008418:	61da      	str	r2, [r3, #28]
	hadc.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800841a:	4b14      	ldr	r3, [pc, #80]	; (800846c <JoyStick_Init+0xac>)
 800841c:	2200      	movs	r2, #0
 800841e:	605a      	str	r2, [r3, #4]
	hadc.Init.NbrOfConversion = 1;
 8008420:	4b12      	ldr	r3, [pc, #72]	; (800846c <JoyStick_Init+0xac>)
 8008422:	2201      	movs	r2, #1
 8008424:	611a      	str	r2, [r3, #16]
	HAL_ADC_Init(&hadc);
 8008426:	4811      	ldr	r0, [pc, #68]	; (800846c <JoyStick_Init+0xac>)
 8008428:	f7fc fd30 	bl	8004e8c <HAL_ADC_Init>
	sConfig.Channel = Manual_Joy.ADCx_CH;
 800842c:	2208      	movs	r2, #8
 800842e:	4b10      	ldr	r3, [pc, #64]	; (8008470 <JoyStick_Init+0xb0>)
 8008430:	601a      	str	r2, [r3, #0]
	sConfig.Rank = ADC_REGULAR_RANK_1;
 8008432:	4b0f      	ldr	r3, [pc, #60]	; (8008470 <JoyStick_Init+0xb0>)
 8008434:	2201      	movs	r2, #1
 8008436:	605a      	str	r2, [r3, #4]
	sConfig.SamplingTime = ADC_SAMPLETIME_28CYCLES_5;
 8008438:	4b0d      	ldr	r3, [pc, #52]	; (8008470 <JoyStick_Init+0xb0>)
 800843a:	2203      	movs	r2, #3
 800843c:	609a      	str	r2, [r3, #8]
	HAL_ADC_ConfigChannel(&hadc, &sConfig);
 800843e:	490c      	ldr	r1, [pc, #48]	; (8008470 <JoyStick_Init+0xb0>)
 8008440:	480a      	ldr	r0, [pc, #40]	; (800846c <JoyStick_Init+0xac>)
 8008442:	f7fc ffaf 	bl	80053a4 <HAL_ADC_ConfigChannel>

	if(calibrated == 0)
 8008446:	4b0b      	ldr	r3, [pc, #44]	; (8008474 <JoyStick_Init+0xb4>)
 8008448:	781b      	ldrb	r3, [r3, #0]
 800844a:	2b00      	cmp	r3, #0
 800844c:	d105      	bne.n	800845a <JoyStick_Init+0x9a>
	{
		HAL_ADCEx_Calibration_Start(&hadc);
 800844e:	4807      	ldr	r0, [pc, #28]	; (800846c <JoyStick_Init+0xac>)
 8008450:	f7fd f92c 	bl	80056ac <HAL_ADCEx_Calibration_Start>
		calibrated = 1;
 8008454:	4b07      	ldr	r3, [pc, #28]	; (8008474 <JoyStick_Init+0xb4>)
 8008456:	2201      	movs	r2, #1
 8008458:	701a      	strb	r2, [r3, #0]
	}
}
 800845a:	bf00      	nop
 800845c:	3710      	adds	r7, #16
 800845e:	46bd      	mov	sp, r7
 8008460:	bd80      	pop	{r7, pc}
 8008462:	bf00      	nop
 8008464:	40010c00 	.word	0x40010c00
 8008468:	40012400 	.word	0x40012400
 800846c:	200023cc 	.word	0x200023cc
 8008470:	200023fc 	.word	0x200023fc
 8008474:	20002408 	.word	0x20002408

08008478 <JoyStick_Read>:


void JoyStick_Read(uint16_t* JoyStick_XY)
{
 8008478:	b580      	push	{r7, lr}
 800847a:	b084      	sub	sp, #16
 800847c:	af00      	add	r7, sp, #0
 800847e:	6078      	str	r0, [r7, #4]
	uint32_t AD_RES;

	// Select channel
	sConfig.Channel = Manual_Joy.ADCx_CH;
 8008480:	2208      	movs	r2, #8
 8008482:	4b18      	ldr	r3, [pc, #96]	; (80084e4 <JoyStick_Read+0x6c>)
 8008484:	601a      	str	r2, [r3, #0]
	HAL_ADC_ConfigChannel(&hadc, &sConfig);
 8008486:	4917      	ldr	r1, [pc, #92]	; (80084e4 <JoyStick_Read+0x6c>)
 8008488:	4817      	ldr	r0, [pc, #92]	; (80084e8 <JoyStick_Read+0x70>)
 800848a:	f7fc ff8b 	bl	80053a4 <HAL_ADC_ConfigChannel>
	// Start ADC Conversion
	HAL_ADC_Start(&hadc);
 800848e:	4816      	ldr	r0, [pc, #88]	; (80084e8 <JoyStick_Read+0x70>)
 8008490:	f7fc fdd4 	bl	800503c <HAL_ADC_Start>
	// Poll for 1ms
	HAL_ADC_PollForConversion(&hadc, 1);
 8008494:	2101      	movs	r1, #1
 8008496:	4814      	ldr	r0, [pc, #80]	; (80084e8 <JoyStick_Read+0x70>)
 8008498:	f7fc fe7e 	bl	8005198 <HAL_ADC_PollForConversion>
	// Read The ADC Conversion Result Write It To JoyStick X
	AD_RES = HAL_ADC_GetValue(&hadc);
 800849c:	4812      	ldr	r0, [pc, #72]	; (80084e8 <JoyStick_Read+0x70>)
 800849e:	f7fc ff75 	bl	800538c <HAL_ADC_GetValue>
 80084a2:	60f8      	str	r0, [r7, #12]
	JoyStick_XY[0] = AD_RES;
 80084a4:	68fb      	ldr	r3, [r7, #12]
 80084a6:	b29a      	uxth	r2, r3
 80084a8:	687b      	ldr	r3, [r7, #4]
 80084aa:	801a      	strh	r2, [r3, #0]

	sConfig.Channel = Manual_Joy.ADCy_CH;
 80084ac:	2209      	movs	r2, #9
 80084ae:	4b0d      	ldr	r3, [pc, #52]	; (80084e4 <JoyStick_Read+0x6c>)
 80084b0:	601a      	str	r2, [r3, #0]
	HAL_ADC_ConfigChannel(&hadc, &sConfig);
 80084b2:	490c      	ldr	r1, [pc, #48]	; (80084e4 <JoyStick_Read+0x6c>)
 80084b4:	480c      	ldr	r0, [pc, #48]	; (80084e8 <JoyStick_Read+0x70>)
 80084b6:	f7fc ff75 	bl	80053a4 <HAL_ADC_ConfigChannel>
	HAL_ADC_Start(&hadc);
 80084ba:	480b      	ldr	r0, [pc, #44]	; (80084e8 <JoyStick_Read+0x70>)
 80084bc:	f7fc fdbe 	bl	800503c <HAL_ADC_Start>
	HAL_ADC_PollForConversion(&hadc, 1);
 80084c0:	2101      	movs	r1, #1
 80084c2:	4809      	ldr	r0, [pc, #36]	; (80084e8 <JoyStick_Read+0x70>)
 80084c4:	f7fc fe68 	bl	8005198 <HAL_ADC_PollForConversion>
	AD_RES = HAL_ADC_GetValue(&hadc);
 80084c8:	4807      	ldr	r0, [pc, #28]	; (80084e8 <JoyStick_Read+0x70>)
 80084ca:	f7fc ff5f 	bl	800538c <HAL_ADC_GetValue>
 80084ce:	60f8      	str	r0, [r7, #12]
	JoyStick_XY[1] = AD_RES;
 80084d0:	687b      	ldr	r3, [r7, #4]
 80084d2:	3302      	adds	r3, #2
 80084d4:	68fa      	ldr	r2, [r7, #12]
 80084d6:	b292      	uxth	r2, r2
 80084d8:	801a      	strh	r2, [r3, #0]
}
 80084da:	bf00      	nop
 80084dc:	3710      	adds	r7, #16
 80084de:	46bd      	mov	sp, r7
 80084e0:	bd80      	pop	{r7, pc}
 80084e2:	bf00      	nop
 80084e4:	200023fc 	.word	0x200023fc
 80084e8:	200023cc 	.word	0x200023cc

080084ec <DWT_Delay_ms>:
  while ((DWT->CYCCNT - au32_initial_ticks) < au32_microseconds-au32_ticks);
}

// This Function Provides Delay In Milliseconds Using DWT
__STATIC_INLINE void DWT_Delay_ms(volatile uint32_t au32_milliseconds)
{
 80084ec:	b580      	push	{r7, lr}
 80084ee:	b084      	sub	sp, #16
 80084f0:	af00      	add	r7, sp, #0
 80084f2:	6078      	str	r0, [r7, #4]
  uint32_t au32_initial_ticks = DWT->CYCCNT;
 80084f4:	4b0e      	ldr	r3, [pc, #56]	; (8008530 <DWT_Delay_ms+0x44>)
 80084f6:	685b      	ldr	r3, [r3, #4]
 80084f8:	60fb      	str	r3, [r7, #12]
  uint32_t au32_ticks = (HAL_RCC_GetHCLKFreq() / 1000);
 80084fa:	f7fe fa63 	bl	80069c4 <HAL_RCC_GetHCLKFreq>
 80084fe:	4603      	mov	r3, r0
 8008500:	4a0c      	ldr	r2, [pc, #48]	; (8008534 <DWT_Delay_ms+0x48>)
 8008502:	fba2 2303 	umull	r2, r3, r2, r3
 8008506:	099b      	lsrs	r3, r3, #6
 8008508:	60bb      	str	r3, [r7, #8]
  au32_milliseconds *= au32_ticks;
 800850a:	687b      	ldr	r3, [r7, #4]
 800850c:	68ba      	ldr	r2, [r7, #8]
 800850e:	fb02 f303 	mul.w	r3, r2, r3
 8008512:	607b      	str	r3, [r7, #4]
  while ((DWT->CYCCNT - au32_initial_ticks) < au32_milliseconds);
 8008514:	bf00      	nop
 8008516:	4b06      	ldr	r3, [pc, #24]	; (8008530 <DWT_Delay_ms+0x44>)
 8008518:	685a      	ldr	r2, [r3, #4]
 800851a:	68fb      	ldr	r3, [r7, #12]
 800851c:	1ad2      	subs	r2, r2, r3
 800851e:	687b      	ldr	r3, [r7, #4]
 8008520:	429a      	cmp	r2, r3
 8008522:	d3f8      	bcc.n	8008516 <DWT_Delay_ms+0x2a>
}
 8008524:	bf00      	nop
 8008526:	bf00      	nop
 8008528:	3710      	adds	r7, #16
 800852a:	46bd      	mov	sp, r7
 800852c:	bd80      	pop	{r7, pc}
 800852e:	bf00      	nop
 8008530:	e0001000 	.word	0xe0001000
 8008534:	10624dd3 	.word	0x10624dd3

08008538 <SERVO_Init>:

static SERVO_info gs_SERVO_info[SERVO_NUM] = {0};


void SERVO_Init(uint16_t SERVO_Instance)
{
 8008538:	b5b0      	push	{r4, r5, r7, lr}
 800853a:	b0ac      	sub	sp, #176	; 0xb0
 800853c:	af00      	add	r7, sp, #0
 800853e:	4603      	mov	r3, r0
 8008540:	80fb      	strh	r3, [r7, #6]
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8008542:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8008546:	2200      	movs	r2, #0
 8008548:	601a      	str	r2, [r3, #0]
 800854a:	605a      	str	r2, [r3, #4]
 800854c:	609a      	str	r2, [r3, #8]
 800854e:	60da      	str	r2, [r3, #12]
	TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8008550:	f107 0388 	add.w	r3, r7, #136	; 0x88
 8008554:	2200      	movs	r2, #0
 8008556:	601a      	str	r2, [r3, #0]
 8008558:	605a      	str	r2, [r3, #4]
 800855a:	609a      	str	r2, [r3, #8]
 800855c:	60da      	str	r2, [r3, #12]
	TIM_MasterConfigTypeDef sMasterConfig = {0};
 800855e:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8008562:	2200      	movs	r2, #0
 8008564:	601a      	str	r2, [r3, #0]
 8008566:	605a      	str	r2, [r3, #4]
	TIM_OC_InitTypeDef sConfigOC = {0};
 8008568:	f107 0364 	add.w	r3, r7, #100	; 0x64
 800856c:	2200      	movs	r2, #0
 800856e:	601a      	str	r2, [r3, #0]
 8008570:	605a      	str	r2, [r3, #4]
 8008572:	609a      	str	r2, [r3, #8]
 8008574:	60da      	str	r2, [r3, #12]
 8008576:	611a      	str	r2, [r3, #16]
 8008578:	615a      	str	r2, [r3, #20]
 800857a:	619a      	str	r2, [r3, #24]
	TIM_HandleTypeDef htim;
	uint32_t PSC_Value = 0;
 800857c:	2300      	movs	r3, #0
 800857e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
	uint32_t ARR_Value = 0;
 8008582:	2300      	movs	r3, #0
 8008584:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
	DWT_Delay_Init();
 8008588:	f000 fa52 	bl	8008a30 <DWT_Delay_Init>

	// Configure The Servo PWM GPIO Pin
	GPIO_InitStruct.Pin = SERVO_CfgParam[SERVO_Instance].SERVO_PIN;
 800858c:	88fb      	ldrh	r3, [r7, #6]
 800858e:	4ab2      	ldr	r2, [pc, #712]	; (8008858 <SERVO_Init+0x320>)
 8008590:	015b      	lsls	r3, r3, #5
 8008592:	4413      	add	r3, r2
 8008594:	3304      	adds	r3, #4
 8008596:	881b      	ldrh	r3, [r3, #0]
 8008598:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800859c:	2302      	movs	r3, #2
 800859e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80085a2:	2302      	movs	r3, #2
 80085a4:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
	HAL_GPIO_Init(SERVO_CfgParam[SERVO_Instance].SERVO_GPIO, &GPIO_InitStruct);
 80085a8:	88fb      	ldrh	r3, [r7, #6]
 80085aa:	4aab      	ldr	r2, [pc, #684]	; (8008858 <SERVO_Init+0x320>)
 80085ac:	015b      	lsls	r3, r3, #5
 80085ae:	4413      	add	r3, r2
 80085b0:	681b      	ldr	r3, [r3, #0]
 80085b2:	f107 0298 	add.w	r2, r7, #152	; 0x98
 80085b6:	4611      	mov	r1, r2
 80085b8:	4618      	mov	r0, r3
 80085ba:	f7fd fc85 	bl	8005ec8 <HAL_GPIO_Init>

	//Calculate The PSC & ARR Values To Maximize PWM Resolution
	// F_pwm = 50Hz
	PSC_Value = (uint32_t) (SERVO_CfgParam[SERVO_Instance].TIM_CLK / 3276800.0);
 80085be:	88fb      	ldrh	r3, [r7, #6]
 80085c0:	4aa5      	ldr	r2, [pc, #660]	; (8008858 <SERVO_Init+0x320>)
 80085c2:	015b      	lsls	r3, r3, #5
 80085c4:	4413      	add	r3, r2
 80085c6:	3314      	adds	r3, #20
 80085c8:	681b      	ldr	r3, [r3, #0]
 80085ca:	4618      	mov	r0, r3
 80085cc:	f7f7 ffbe 	bl	800054c <__aeabi_ui2d>
 80085d0:	f04f 0200 	mov.w	r2, #0
 80085d4:	4ba1      	ldr	r3, [pc, #644]	; (800885c <SERVO_Init+0x324>)
 80085d6:	f7f8 f95d 	bl	8000894 <__aeabi_ddiv>
 80085da:	4602      	mov	r2, r0
 80085dc:	460b      	mov	r3, r1
 80085de:	4610      	mov	r0, r2
 80085e0:	4619      	mov	r1, r3
 80085e2:	f7f8 fa3f 	bl	8000a64 <__aeabi_d2uiz>
 80085e6:	4603      	mov	r3, r0
 80085e8:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
	ARR_Value = (uint32_t) ((SERVO_CfgParam[SERVO_Instance].TIM_CLK / (50.0*(PSC_Value+1.0)))-1.0);
 80085ec:	88fb      	ldrh	r3, [r7, #6]
 80085ee:	4a9a      	ldr	r2, [pc, #616]	; (8008858 <SERVO_Init+0x320>)
 80085f0:	015b      	lsls	r3, r3, #5
 80085f2:	4413      	add	r3, r2
 80085f4:	3314      	adds	r3, #20
 80085f6:	681b      	ldr	r3, [r3, #0]
 80085f8:	4618      	mov	r0, r3
 80085fa:	f7f7 ffa7 	bl	800054c <__aeabi_ui2d>
 80085fe:	4604      	mov	r4, r0
 8008600:	460d      	mov	r5, r1
 8008602:	f8d7 00ac 	ldr.w	r0, [r7, #172]	; 0xac
 8008606:	f7f7 ffa1 	bl	800054c <__aeabi_ui2d>
 800860a:	f04f 0200 	mov.w	r2, #0
 800860e:	4b94      	ldr	r3, [pc, #592]	; (8008860 <SERVO_Init+0x328>)
 8008610:	f7f7 fe60 	bl	80002d4 <__adddf3>
 8008614:	4602      	mov	r2, r0
 8008616:	460b      	mov	r3, r1
 8008618:	4610      	mov	r0, r2
 800861a:	4619      	mov	r1, r3
 800861c:	f04f 0200 	mov.w	r2, #0
 8008620:	4b90      	ldr	r3, [pc, #576]	; (8008864 <SERVO_Init+0x32c>)
 8008622:	f7f8 f80d 	bl	8000640 <__aeabi_dmul>
 8008626:	4602      	mov	r2, r0
 8008628:	460b      	mov	r3, r1
 800862a:	4620      	mov	r0, r4
 800862c:	4629      	mov	r1, r5
 800862e:	f7f8 f931 	bl	8000894 <__aeabi_ddiv>
 8008632:	4602      	mov	r2, r0
 8008634:	460b      	mov	r3, r1
 8008636:	4610      	mov	r0, r2
 8008638:	4619      	mov	r1, r3
 800863a:	f04f 0200 	mov.w	r2, #0
 800863e:	4b88      	ldr	r3, [pc, #544]	; (8008860 <SERVO_Init+0x328>)
 8008640:	f7f7 fe46 	bl	80002d0 <__aeabi_dsub>
 8008644:	4602      	mov	r2, r0
 8008646:	460b      	mov	r3, r1
 8008648:	4610      	mov	r0, r2
 800864a:	4619      	mov	r1, r3
 800864c:	f7f8 fa0a 	bl	8000a64 <__aeabi_d2uiz>
 8008650:	4603      	mov	r3, r0
 8008652:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8


	// Enable corresponding clock
	if(SERVO_CfgParam[SERVO_Instance].TIM_Instance == TIM1)
 8008656:	88fb      	ldrh	r3, [r7, #6]
 8008658:	4a7f      	ldr	r2, [pc, #508]	; (8008858 <SERVO_Init+0x320>)
 800865a:	015b      	lsls	r3, r3, #5
 800865c:	4413      	add	r3, r2
 800865e:	3308      	adds	r3, #8
 8008660:	681b      	ldr	r3, [r3, #0]
 8008662:	4a81      	ldr	r2, [pc, #516]	; (8008868 <SERVO_Init+0x330>)
 8008664:	4293      	cmp	r3, r2
 8008666:	d10c      	bne.n	8008682 <SERVO_Init+0x14a>
	{
		__HAL_RCC_TIM1_CLK_ENABLE();
 8008668:	4b80      	ldr	r3, [pc, #512]	; (800886c <SERVO_Init+0x334>)
 800866a:	699b      	ldr	r3, [r3, #24]
 800866c:	4a7f      	ldr	r2, [pc, #508]	; (800886c <SERVO_Init+0x334>)
 800866e:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8008672:	6193      	str	r3, [r2, #24]
 8008674:	4b7d      	ldr	r3, [pc, #500]	; (800886c <SERVO_Init+0x334>)
 8008676:	699b      	ldr	r3, [r3, #24]
 8008678:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800867c:	61bb      	str	r3, [r7, #24]
 800867e:	69bb      	ldr	r3, [r7, #24]
 8008680:	e040      	b.n	8008704 <SERVO_Init+0x1cc>
	}
	else if(SERVO_CfgParam[SERVO_Instance].TIM_Instance == TIM2)
 8008682:	88fb      	ldrh	r3, [r7, #6]
 8008684:	4a74      	ldr	r2, [pc, #464]	; (8008858 <SERVO_Init+0x320>)
 8008686:	015b      	lsls	r3, r3, #5
 8008688:	4413      	add	r3, r2
 800868a:	3308      	adds	r3, #8
 800868c:	681b      	ldr	r3, [r3, #0]
 800868e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008692:	d10c      	bne.n	80086ae <SERVO_Init+0x176>
	{
		__HAL_RCC_TIM2_CLK_ENABLE();
 8008694:	4b75      	ldr	r3, [pc, #468]	; (800886c <SERVO_Init+0x334>)
 8008696:	69db      	ldr	r3, [r3, #28]
 8008698:	4a74      	ldr	r2, [pc, #464]	; (800886c <SERVO_Init+0x334>)
 800869a:	f043 0301 	orr.w	r3, r3, #1
 800869e:	61d3      	str	r3, [r2, #28]
 80086a0:	4b72      	ldr	r3, [pc, #456]	; (800886c <SERVO_Init+0x334>)
 80086a2:	69db      	ldr	r3, [r3, #28]
 80086a4:	f003 0301 	and.w	r3, r3, #1
 80086a8:	617b      	str	r3, [r7, #20]
 80086aa:	697b      	ldr	r3, [r7, #20]
 80086ac:	e02a      	b.n	8008704 <SERVO_Init+0x1cc>
	}
	else if(SERVO_CfgParam[SERVO_Instance].TIM_Instance == TIM3)
 80086ae:	88fb      	ldrh	r3, [r7, #6]
 80086b0:	4a69      	ldr	r2, [pc, #420]	; (8008858 <SERVO_Init+0x320>)
 80086b2:	015b      	lsls	r3, r3, #5
 80086b4:	4413      	add	r3, r2
 80086b6:	3308      	adds	r3, #8
 80086b8:	681b      	ldr	r3, [r3, #0]
 80086ba:	4a6d      	ldr	r2, [pc, #436]	; (8008870 <SERVO_Init+0x338>)
 80086bc:	4293      	cmp	r3, r2
 80086be:	d10c      	bne.n	80086da <SERVO_Init+0x1a2>
	{
		__HAL_RCC_TIM3_CLK_ENABLE();
 80086c0:	4b6a      	ldr	r3, [pc, #424]	; (800886c <SERVO_Init+0x334>)
 80086c2:	69db      	ldr	r3, [r3, #28]
 80086c4:	4a69      	ldr	r2, [pc, #420]	; (800886c <SERVO_Init+0x334>)
 80086c6:	f043 0302 	orr.w	r3, r3, #2
 80086ca:	61d3      	str	r3, [r2, #28]
 80086cc:	4b67      	ldr	r3, [pc, #412]	; (800886c <SERVO_Init+0x334>)
 80086ce:	69db      	ldr	r3, [r3, #28]
 80086d0:	f003 0302 	and.w	r3, r3, #2
 80086d4:	613b      	str	r3, [r7, #16]
 80086d6:	693b      	ldr	r3, [r7, #16]
 80086d8:	e014      	b.n	8008704 <SERVO_Init+0x1cc>
	}
	else if(SERVO_CfgParam[SERVO_Instance].TIM_Instance == TIM4)
 80086da:	88fb      	ldrh	r3, [r7, #6]
 80086dc:	4a5e      	ldr	r2, [pc, #376]	; (8008858 <SERVO_Init+0x320>)
 80086de:	015b      	lsls	r3, r3, #5
 80086e0:	4413      	add	r3, r2
 80086e2:	3308      	adds	r3, #8
 80086e4:	681b      	ldr	r3, [r3, #0]
 80086e6:	4a63      	ldr	r2, [pc, #396]	; (8008874 <SERVO_Init+0x33c>)
 80086e8:	4293      	cmp	r3, r2
 80086ea:	d10b      	bne.n	8008704 <SERVO_Init+0x1cc>
	{
		__HAL_RCC_TIM4_CLK_ENABLE();
 80086ec:	4b5f      	ldr	r3, [pc, #380]	; (800886c <SERVO_Init+0x334>)
 80086ee:	69db      	ldr	r3, [r3, #28]
 80086f0:	4a5e      	ldr	r2, [pc, #376]	; (800886c <SERVO_Init+0x334>)
 80086f2:	f043 0304 	orr.w	r3, r3, #4
 80086f6:	61d3      	str	r3, [r2, #28]
 80086f8:	4b5c      	ldr	r3, [pc, #368]	; (800886c <SERVO_Init+0x334>)
 80086fa:	69db      	ldr	r3, [r3, #28]
 80086fc:	f003 0304 	and.w	r3, r3, #4
 8008700:	60fb      	str	r3, [r7, #12]
 8008702:	68fb      	ldr	r3, [r7, #12]
	}

	htim.Instance = SERVO_CfgParam[SERVO_Instance].TIM_Instance;
 8008704:	88fb      	ldrh	r3, [r7, #6]
 8008706:	4a54      	ldr	r2, [pc, #336]	; (8008858 <SERVO_Init+0x320>)
 8008708:	015b      	lsls	r3, r3, #5
 800870a:	4413      	add	r3, r2
 800870c:	3308      	adds	r3, #8
 800870e:	681b      	ldr	r3, [r3, #0]
 8008710:	61fb      	str	r3, [r7, #28]
	htim.Init.Prescaler = PSC_Value;
 8008712:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8008716:	623b      	str	r3, [r7, #32]
	htim.Init.CounterMode = TIM_COUNTERMODE_UP;
 8008718:	2300      	movs	r3, #0
 800871a:	627b      	str	r3, [r7, #36]	; 0x24
	htim.Init.Period = ARR_Value;
 800871c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8008720:	62bb      	str	r3, [r7, #40]	; 0x28
	htim.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8008722:	2300      	movs	r3, #0
 8008724:	62fb      	str	r3, [r7, #44]	; 0x2c
	htim.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8008726:	2380      	movs	r3, #128	; 0x80
 8008728:	637b      	str	r3, [r7, #52]	; 0x34
	HAL_TIM_Base_Init(&htim);
 800872a:	f107 031c 	add.w	r3, r7, #28
 800872e:	4618      	mov	r0, r3
 8008730:	f7fe fa5c 	bl	8006bec <HAL_TIM_Base_Init>
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8008734:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8008738:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
	HAL_TIM_ConfigClockSource(&htim, &sClockSourceConfig);
 800873c:	f107 0288 	add.w	r2, r7, #136	; 0x88
 8008740:	f107 031c 	add.w	r3, r7, #28
 8008744:	4611      	mov	r1, r2
 8008746:	4618      	mov	r0, r3
 8008748:	f7fe fd60 	bl	800720c <HAL_TIM_ConfigClockSource>
	HAL_TIM_PWM_Init(&htim);
 800874c:	f107 031c 	add.w	r3, r7, #28
 8008750:	4618      	mov	r0, r3
 8008752:	f7fe fa9a 	bl	8006c8a <HAL_TIM_PWM_Init>
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8008756:	2300      	movs	r3, #0
 8008758:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800875c:	2300      	movs	r3, #0
 800875e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
	HAL_TIMEx_MasterConfigSynchronization(&htim, &sMasterConfig);
 8008762:	f107 0280 	add.w	r2, r7, #128	; 0x80
 8008766:	f107 031c 	add.w	r3, r7, #28
 800876a:	4611      	mov	r1, r2
 800876c:	4618      	mov	r0, r3
 800876e:	f7ff f8e3 	bl	8007938 <HAL_TIMEx_MasterConfigSynchronization>
	sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8008772:	2360      	movs	r3, #96	; 0x60
 8008774:	667b      	str	r3, [r7, #100]	; 0x64
	sConfigOC.Pulse = 0;
 8008776:	2300      	movs	r3, #0
 8008778:	66bb      	str	r3, [r7, #104]	; 0x68
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800877a:	2300      	movs	r3, #0
 800877c:	66fb      	str	r3, [r7, #108]	; 0x6c
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800877e:	2300      	movs	r3, #0
 8008780:	677b      	str	r3, [r7, #116]	; 0x74
	HAL_TIM_PWM_ConfigChannel(&htim, &sConfigOC, SERVO_CfgParam[SERVO_Instance].PWM_TIM_CH);
 8008782:	88fb      	ldrh	r3, [r7, #6]
 8008784:	4a34      	ldr	r2, [pc, #208]	; (8008858 <SERVO_Init+0x320>)
 8008786:	015b      	lsls	r3, r3, #5
 8008788:	4413      	add	r3, r2
 800878a:	3310      	adds	r3, #16
 800878c:	681a      	ldr	r2, [r3, #0]
 800878e:	f107 0164 	add.w	r1, r7, #100	; 0x64
 8008792:	f107 031c 	add.w	r3, r7, #28
 8008796:	4618      	mov	r0, r3
 8008798:	f7fe fc7a 	bl	8007090 <HAL_TIM_PWM_ConfigChannel>

	// Calculate pulse values and store them in a structure
	gs_SERVO_info[SERVO_Instance].Period_Min = (uint16_t) (ARR_Value * (SERVO_CfgParam[SERVO_Instance].MinPulse/20.0));
 800879c:	f8d7 00a8 	ldr.w	r0, [r7, #168]	; 0xa8
 80087a0:	f7f7 fed4 	bl	800054c <__aeabi_ui2d>
 80087a4:	4604      	mov	r4, r0
 80087a6:	460d      	mov	r5, r1
 80087a8:	88fb      	ldrh	r3, [r7, #6]
 80087aa:	4a2b      	ldr	r2, [pc, #172]	; (8008858 <SERVO_Init+0x320>)
 80087ac:	015b      	lsls	r3, r3, #5
 80087ae:	4413      	add	r3, r2
 80087b0:	3318      	adds	r3, #24
 80087b2:	681b      	ldr	r3, [r3, #0]
 80087b4:	4618      	mov	r0, r3
 80087b6:	f7f7 feeb 	bl	8000590 <__aeabi_f2d>
 80087ba:	f04f 0200 	mov.w	r2, #0
 80087be:	4b2e      	ldr	r3, [pc, #184]	; (8008878 <SERVO_Init+0x340>)
 80087c0:	f7f8 f868 	bl	8000894 <__aeabi_ddiv>
 80087c4:	4602      	mov	r2, r0
 80087c6:	460b      	mov	r3, r1
 80087c8:	4620      	mov	r0, r4
 80087ca:	4629      	mov	r1, r5
 80087cc:	f7f7 ff38 	bl	8000640 <__aeabi_dmul>
 80087d0:	4602      	mov	r2, r0
 80087d2:	460b      	mov	r3, r1
 80087d4:	88fc      	ldrh	r4, [r7, #6]
 80087d6:	4610      	mov	r0, r2
 80087d8:	4619      	mov	r1, r3
 80087da:	f7f8 f943 	bl	8000a64 <__aeabi_d2uiz>
 80087de:	4603      	mov	r3, r0
 80087e0:	b29a      	uxth	r2, r3
 80087e2:	4b26      	ldr	r3, [pc, #152]	; (800887c <SERVO_Init+0x344>)
 80087e4:	f823 2024 	strh.w	r2, [r3, r4, lsl #2]
	gs_SERVO_info[SERVO_Instance].Period_Max = (uint16_t) (ARR_Value * (SERVO_CfgParam[SERVO_Instance].MaxPulse/20.0));
 80087e8:	f8d7 00a8 	ldr.w	r0, [r7, #168]	; 0xa8
 80087ec:	f7f7 feae 	bl	800054c <__aeabi_ui2d>
 80087f0:	4604      	mov	r4, r0
 80087f2:	460d      	mov	r5, r1
 80087f4:	88fb      	ldrh	r3, [r7, #6]
 80087f6:	4a18      	ldr	r2, [pc, #96]	; (8008858 <SERVO_Init+0x320>)
 80087f8:	015b      	lsls	r3, r3, #5
 80087fa:	4413      	add	r3, r2
 80087fc:	331c      	adds	r3, #28
 80087fe:	681b      	ldr	r3, [r3, #0]
 8008800:	4618      	mov	r0, r3
 8008802:	f7f7 fec5 	bl	8000590 <__aeabi_f2d>
 8008806:	f04f 0200 	mov.w	r2, #0
 800880a:	4b1b      	ldr	r3, [pc, #108]	; (8008878 <SERVO_Init+0x340>)
 800880c:	f7f8 f842 	bl	8000894 <__aeabi_ddiv>
 8008810:	4602      	mov	r2, r0
 8008812:	460b      	mov	r3, r1
 8008814:	4620      	mov	r0, r4
 8008816:	4629      	mov	r1, r5
 8008818:	f7f7 ff12 	bl	8000640 <__aeabi_dmul>
 800881c:	4602      	mov	r2, r0
 800881e:	460b      	mov	r3, r1
 8008820:	88fc      	ldrh	r4, [r7, #6]
 8008822:	4610      	mov	r0, r2
 8008824:	4619      	mov	r1, r3
 8008826:	f7f8 f91d 	bl	8000a64 <__aeabi_d2uiz>
 800882a:	4603      	mov	r3, r0
 800882c:	b299      	uxth	r1, r3
 800882e:	4a13      	ldr	r2, [pc, #76]	; (800887c <SERVO_Init+0x344>)
 8008830:	00a3      	lsls	r3, r4, #2
 8008832:	4413      	add	r3, r2
 8008834:	460a      	mov	r2, r1
 8008836:	805a      	strh	r2, [r3, #2]

	// Start PWM
	HAL_TIM_PWM_Start(&htim, SERVO_CfgParam[SERVO_Instance].PWM_TIM_CH);
 8008838:	88fb      	ldrh	r3, [r7, #6]
 800883a:	4a07      	ldr	r2, [pc, #28]	; (8008858 <SERVO_Init+0x320>)
 800883c:	015b      	lsls	r3, r3, #5
 800883e:	4413      	add	r3, r2
 8008840:	3310      	adds	r3, #16
 8008842:	681a      	ldr	r2, [r3, #0]
 8008844:	f107 031c 	add.w	r3, r7, #28
 8008848:	4611      	mov	r1, r2
 800884a:	4618      	mov	r0, r3
 800884c:	f7fe fa76 	bl	8006d3c <HAL_TIM_PWM_Start>
}
 8008850:	bf00      	nop
 8008852:	37b0      	adds	r7, #176	; 0xb0
 8008854:	46bd      	mov	sp, r7
 8008856:	bdb0      	pop	{r4, r5, r7, pc}
 8008858:	08009340 	.word	0x08009340
 800885c:	41490000 	.word	0x41490000
 8008860:	3ff00000 	.word	0x3ff00000
 8008864:	40490000 	.word	0x40490000
 8008868:	40012c00 	.word	0x40012c00
 800886c:	40021000 	.word	0x40021000
 8008870:	40000400 	.word	0x40000400
 8008874:	40000800 	.word	0x40000800
 8008878:	40340000 	.word	0x40340000
 800887c:	2000240c 	.word	0x2000240c

08008880 <SERVO_MoveTo>:

// Moves a servo using degree value
void SERVO_MoveTo(uint16_t SERVO_Instance, float af_Angle)
{
 8008880:	b5b0      	push	{r4, r5, r7, lr}
 8008882:	b084      	sub	sp, #16
 8008884:	af00      	add	r7, sp, #0
 8008886:	4603      	mov	r3, r0
 8008888:	6039      	str	r1, [r7, #0]
 800888a:	80fb      	strh	r3, [r7, #6]
	uint16_t Pulse = 0;
 800888c:	2300      	movs	r3, #0
 800888e:	81fb      	strh	r3, [r7, #14]

	Pulse = ((af_Angle*(gs_SERVO_info[SERVO_Instance].Period_Max - gs_SERVO_info[SERVO_Instance].Period_Min))/180.0)
 8008890:	88fb      	ldrh	r3, [r7, #6]
 8008892:	4a20      	ldr	r2, [pc, #128]	; (8008914 <SERVO_MoveTo+0x94>)
 8008894:	009b      	lsls	r3, r3, #2
 8008896:	4413      	add	r3, r2
 8008898:	885b      	ldrh	r3, [r3, #2]
 800889a:	4619      	mov	r1, r3
 800889c:	88fb      	ldrh	r3, [r7, #6]
 800889e:	4a1d      	ldr	r2, [pc, #116]	; (8008914 <SERVO_MoveTo+0x94>)
 80088a0:	f832 3023 	ldrh.w	r3, [r2, r3, lsl #2]
 80088a4:	1acb      	subs	r3, r1, r3
 80088a6:	4618      	mov	r0, r3
 80088a8:	f7f8 fa06 	bl	8000cb8 <__aeabi_i2f>
 80088ac:	4603      	mov	r3, r0
 80088ae:	6839      	ldr	r1, [r7, #0]
 80088b0:	4618      	mov	r0, r3
 80088b2:	f7f7 fc55 	bl	8000160 <__aeabi_fmul>
 80088b6:	4603      	mov	r3, r0
 80088b8:	4618      	mov	r0, r3
 80088ba:	f7f7 fe69 	bl	8000590 <__aeabi_f2d>
 80088be:	f04f 0200 	mov.w	r2, #0
 80088c2:	4b15      	ldr	r3, [pc, #84]	; (8008918 <SERVO_MoveTo+0x98>)
 80088c4:	f7f7 ffe6 	bl	8000894 <__aeabi_ddiv>
 80088c8:	4602      	mov	r2, r0
 80088ca:	460b      	mov	r3, r1
 80088cc:	4614      	mov	r4, r2
 80088ce:	461d      	mov	r5, r3
			+ gs_SERVO_info[SERVO_Instance].Period_Min;
 80088d0:	88fb      	ldrh	r3, [r7, #6]
 80088d2:	4a10      	ldr	r2, [pc, #64]	; (8008914 <SERVO_MoveTo+0x94>)
 80088d4:	f832 3023 	ldrh.w	r3, [r2, r3, lsl #2]
 80088d8:	4618      	mov	r0, r3
 80088da:	f7f7 fe47 	bl	800056c <__aeabi_i2d>
 80088de:	4602      	mov	r2, r0
 80088e0:	460b      	mov	r3, r1
 80088e2:	4620      	mov	r0, r4
 80088e4:	4629      	mov	r1, r5
 80088e6:	f7f7 fcf5 	bl	80002d4 <__adddf3>
 80088ea:	4602      	mov	r2, r0
 80088ec:	460b      	mov	r3, r1
	Pulse = ((af_Angle*(gs_SERVO_info[SERVO_Instance].Period_Max - gs_SERVO_info[SERVO_Instance].Period_Min))/180.0)
 80088ee:	4610      	mov	r0, r2
 80088f0:	4619      	mov	r1, r3
 80088f2:	f7f8 f8b7 	bl	8000a64 <__aeabi_d2uiz>
 80088f6:	4603      	mov	r3, r0
 80088f8:	81fb      	strh	r3, [r7, #14]

	*(SERVO_CfgParam[SERVO_Instance].TIM_CCRx) = Pulse;
 80088fa:	88fb      	ldrh	r3, [r7, #6]
 80088fc:	4a07      	ldr	r2, [pc, #28]	; (800891c <SERVO_MoveTo+0x9c>)
 80088fe:	015b      	lsls	r3, r3, #5
 8008900:	4413      	add	r3, r2
 8008902:	330c      	adds	r3, #12
 8008904:	681b      	ldr	r3, [r3, #0]
 8008906:	89fa      	ldrh	r2, [r7, #14]
 8008908:	601a      	str	r2, [r3, #0]
}
 800890a:	bf00      	nop
 800890c:	3710      	adds	r7, #16
 800890e:	46bd      	mov	sp, r7
 8008910:	bdb0      	pop	{r4, r5, r7, pc}
 8008912:	bf00      	nop
 8008914:	2000240c 	.word	0x2000240c
 8008918:	40668000 	.word	0x40668000
 800891c:	08009340 	.word	0x08009340

08008920 <SERVO_RawMove>:

// Moves a servo using actual pulse value
void SERVO_RawMove(uint16_t SERVO_Instance, uint16_t Pulse)
{
 8008920:	b480      	push	{r7}
 8008922:	b083      	sub	sp, #12
 8008924:	af00      	add	r7, sp, #0
 8008926:	4603      	mov	r3, r0
 8008928:	460a      	mov	r2, r1
 800892a:	80fb      	strh	r3, [r7, #6]
 800892c:	4613      	mov	r3, r2
 800892e:	80bb      	strh	r3, [r7, #4]
	if(Pulse <= gs_SERVO_info[SERVO_Instance].Period_Max && Pulse >= gs_SERVO_info[SERVO_Instance].Period_Min)
 8008930:	88fb      	ldrh	r3, [r7, #6]
 8008932:	4a0d      	ldr	r2, [pc, #52]	; (8008968 <SERVO_RawMove+0x48>)
 8008934:	009b      	lsls	r3, r3, #2
 8008936:	4413      	add	r3, r2
 8008938:	885b      	ldrh	r3, [r3, #2]
 800893a:	88ba      	ldrh	r2, [r7, #4]
 800893c:	429a      	cmp	r2, r3
 800893e:	d80e      	bhi.n	800895e <SERVO_RawMove+0x3e>
 8008940:	88fb      	ldrh	r3, [r7, #6]
 8008942:	4a09      	ldr	r2, [pc, #36]	; (8008968 <SERVO_RawMove+0x48>)
 8008944:	f832 3023 	ldrh.w	r3, [r2, r3, lsl #2]
 8008948:	88ba      	ldrh	r2, [r7, #4]
 800894a:	429a      	cmp	r2, r3
 800894c:	d307      	bcc.n	800895e <SERVO_RawMove+0x3e>
	{
		*(SERVO_CfgParam[SERVO_Instance].TIM_CCRx) = Pulse;
 800894e:	88fb      	ldrh	r3, [r7, #6]
 8008950:	4a06      	ldr	r2, [pc, #24]	; (800896c <SERVO_RawMove+0x4c>)
 8008952:	015b      	lsls	r3, r3, #5
 8008954:	4413      	add	r3, r2
 8008956:	330c      	adds	r3, #12
 8008958:	681b      	ldr	r3, [r3, #0]
 800895a:	88ba      	ldrh	r2, [r7, #4]
 800895c:	601a      	str	r2, [r3, #0]
	}
}
 800895e:	bf00      	nop
 8008960:	370c      	adds	r7, #12
 8008962:	46bd      	mov	sp, r7
 8008964:	bc80      	pop	{r7}
 8008966:	4770      	bx	lr
 8008968:	2000240c 	.word	0x2000240c
 800896c:	08009340 	.word	0x08009340

08008970 <SERVO_Get_MaxPulse>:

// Gets The Maximum Pulse Width Value
uint16_t SERVO_Get_MaxPulse(uint16_t SERVO_Instance)
{
 8008970:	b480      	push	{r7}
 8008972:	b083      	sub	sp, #12
 8008974:	af00      	add	r7, sp, #0
 8008976:	4603      	mov	r3, r0
 8008978:	80fb      	strh	r3, [r7, #6]
	return (gs_SERVO_info[SERVO_Instance].Period_Max);
 800897a:	88fb      	ldrh	r3, [r7, #6]
 800897c:	4a04      	ldr	r2, [pc, #16]	; (8008990 <SERVO_Get_MaxPulse+0x20>)
 800897e:	009b      	lsls	r3, r3, #2
 8008980:	4413      	add	r3, r2
 8008982:	885b      	ldrh	r3, [r3, #2]
}
 8008984:	4618      	mov	r0, r3
 8008986:	370c      	adds	r7, #12
 8008988:	46bd      	mov	sp, r7
 800898a:	bc80      	pop	{r7}
 800898c:	4770      	bx	lr
 800898e:	bf00      	nop
 8008990:	2000240c 	.word	0x2000240c

08008994 <SERVO_Get_MinPulse>:


// Gets The Minimum Pulse Width Value
uint16_t SERVO_Get_MinPulse(uint16_t SERVO_Instance)
{
 8008994:	b480      	push	{r7}
 8008996:	b083      	sub	sp, #12
 8008998:	af00      	add	r7, sp, #0
 800899a:	4603      	mov	r3, r0
 800899c:	80fb      	strh	r3, [r7, #6]
	return (gs_SERVO_info[SERVO_Instance].Period_Min);
 800899e:	88fb      	ldrh	r3, [r7, #6]
 80089a0:	4a03      	ldr	r2, [pc, #12]	; (80089b0 <SERVO_Get_MinPulse+0x1c>)
 80089a2:	f832 3023 	ldrh.w	r3, [r2, r3, lsl #2]
}
 80089a6:	4618      	mov	r0, r3
 80089a8:	370c      	adds	r7, #12
 80089aa:	46bd      	mov	sp, r7
 80089ac:	bc80      	pop	{r7}
 80089ae:	4770      	bx	lr
 80089b0:	2000240c 	.word	0x2000240c

080089b4 <SERVO_Sweep>:

// Moves servo back and forth
void SERVO_Sweep(uint16_t SERVO_Instance)
{
 80089b4:	b580      	push	{r7, lr}
 80089b6:	b084      	sub	sp, #16
 80089b8:	af00      	add	r7, sp, #0
 80089ba:	4603      	mov	r3, r0
 80089bc:	80fb      	strh	r3, [r7, #6]
	uint8_t Angle = 0;
 80089be:	2300      	movs	r3, #0
 80089c0:	73fb      	strb	r3, [r7, #15]

	SERVO_MoveTo(SERVO_Instance, 0);
 80089c2:	88fb      	ldrh	r3, [r7, #6]
 80089c4:	f04f 0100 	mov.w	r1, #0
 80089c8:	4618      	mov	r0, r3
 80089ca:	f7ff ff59 	bl	8008880 <SERVO_MoveTo>

	DWT_Delay_ms(250);
 80089ce:	20fa      	movs	r0, #250	; 0xfa
 80089d0:	f7ff fd8c 	bl	80084ec <DWT_Delay_ms>
	while(Angle < 180)
 80089d4:	e00e      	b.n	80089f4 <SERVO_Sweep+0x40>
	{
		SERVO_MoveTo(SERVO_Instance, Angle++);
 80089d6:	7bfb      	ldrb	r3, [r7, #15]
 80089d8:	1c5a      	adds	r2, r3, #1
 80089da:	73fa      	strb	r2, [r7, #15]
 80089dc:	4618      	mov	r0, r3
 80089de:	f7f8 f967 	bl	8000cb0 <__aeabi_ui2f>
 80089e2:	4602      	mov	r2, r0
 80089e4:	88fb      	ldrh	r3, [r7, #6]
 80089e6:	4611      	mov	r1, r2
 80089e8:	4618      	mov	r0, r3
 80089ea:	f7ff ff49 	bl	8008880 <SERVO_MoveTo>
		DWT_Delay_ms(10);
 80089ee:	200a      	movs	r0, #10
 80089f0:	f7ff fd7c 	bl	80084ec <DWT_Delay_ms>
	while(Angle < 180)
 80089f4:	7bfb      	ldrb	r3, [r7, #15]
 80089f6:	2bb3      	cmp	r3, #179	; 0xb3
 80089f8:	d9ed      	bls.n	80089d6 <SERVO_Sweep+0x22>
	}
	DWT_Delay_ms(250);
 80089fa:	20fa      	movs	r0, #250	; 0xfa
 80089fc:	f7ff fd76 	bl	80084ec <DWT_Delay_ms>
	while(Angle > 0)
 8008a00:	e00e      	b.n	8008a20 <SERVO_Sweep+0x6c>
	{
		SERVO_MoveTo(SERVO_Instance, Angle--);
 8008a02:	7bfb      	ldrb	r3, [r7, #15]
 8008a04:	1e5a      	subs	r2, r3, #1
 8008a06:	73fa      	strb	r2, [r7, #15]
 8008a08:	4618      	mov	r0, r3
 8008a0a:	f7f8 f951 	bl	8000cb0 <__aeabi_ui2f>
 8008a0e:	4602      	mov	r2, r0
 8008a10:	88fb      	ldrh	r3, [r7, #6]
 8008a12:	4611      	mov	r1, r2
 8008a14:	4618      	mov	r0, r3
 8008a16:	f7ff ff33 	bl	8008880 <SERVO_MoveTo>
		DWT_Delay_ms(10);
 8008a1a:	200a      	movs	r0, #10
 8008a1c:	f7ff fd66 	bl	80084ec <DWT_Delay_ms>
	while(Angle > 0)
 8008a20:	7bfb      	ldrb	r3, [r7, #15]
 8008a22:	2b00      	cmp	r3, #0
 8008a24:	d1ed      	bne.n	8008a02 <SERVO_Sweep+0x4e>
	}
}
 8008a26:	bf00      	nop
 8008a28:	bf00      	nop
 8008a2a:	3710      	adds	r7, #16
 8008a2c:	46bd      	mov	sp, r7
 8008a2e:	bd80      	pop	{r7, pc}

08008a30 <DWT_Delay_Init>:

#include "DWT_Delay.h"


uint32_t DWT_Delay_Init(void)
{
 8008a30:	b480      	push	{r7}
 8008a32:	af00      	add	r7, sp, #0
    /* Disable TRC */
    CoreDebug->DEMCR &= ~CoreDebug_DEMCR_TRCENA_Msk; // ~0x01000000;
 8008a34:	4b14      	ldr	r3, [pc, #80]	; (8008a88 <DWT_Delay_Init+0x58>)
 8008a36:	68db      	ldr	r3, [r3, #12]
 8008a38:	4a13      	ldr	r2, [pc, #76]	; (8008a88 <DWT_Delay_Init+0x58>)
 8008a3a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8008a3e:	60d3      	str	r3, [r2, #12]
    /* Enable TRC */
    CoreDebug->DEMCR |=  CoreDebug_DEMCR_TRCENA_Msk; // 0x01000000;
 8008a40:	4b11      	ldr	r3, [pc, #68]	; (8008a88 <DWT_Delay_Init+0x58>)
 8008a42:	68db      	ldr	r3, [r3, #12]
 8008a44:	4a10      	ldr	r2, [pc, #64]	; (8008a88 <DWT_Delay_Init+0x58>)
 8008a46:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8008a4a:	60d3      	str	r3, [r2, #12]

    /* Disable clock cycle counter */
    DWT->CTRL &= ~DWT_CTRL_CYCCNTENA_Msk; //~0x00000001;
 8008a4c:	4b0f      	ldr	r3, [pc, #60]	; (8008a8c <DWT_Delay_Init+0x5c>)
 8008a4e:	681b      	ldr	r3, [r3, #0]
 8008a50:	4a0e      	ldr	r2, [pc, #56]	; (8008a8c <DWT_Delay_Init+0x5c>)
 8008a52:	f023 0301 	bic.w	r3, r3, #1
 8008a56:	6013      	str	r3, [r2, #0]
    /* Enable  clock cycle counter */
    DWT->CTRL |=  DWT_CTRL_CYCCNTENA_Msk; //0x00000001;
 8008a58:	4b0c      	ldr	r3, [pc, #48]	; (8008a8c <DWT_Delay_Init+0x5c>)
 8008a5a:	681b      	ldr	r3, [r3, #0]
 8008a5c:	4a0b      	ldr	r2, [pc, #44]	; (8008a8c <DWT_Delay_Init+0x5c>)
 8008a5e:	f043 0301 	orr.w	r3, r3, #1
 8008a62:	6013      	str	r3, [r2, #0]

    /* Reset the clock cycle counter value */
    DWT->CYCCNT = 0;
 8008a64:	4b09      	ldr	r3, [pc, #36]	; (8008a8c <DWT_Delay_Init+0x5c>)
 8008a66:	2200      	movs	r2, #0
 8008a68:	605a      	str	r2, [r3, #4]

    /* 3 NO OPERATION instructions */
    __ASM volatile ("NOP");
 8008a6a:	bf00      	nop
    __ASM volatile ("NOP");
 8008a6c:	bf00      	nop
    __ASM volatile ("NOP");
 8008a6e:	bf00      	nop

    /* Check if clock cycle counter has started */
    if(DWT->CYCCNT)
 8008a70:	4b06      	ldr	r3, [pc, #24]	; (8008a8c <DWT_Delay_Init+0x5c>)
 8008a72:	685b      	ldr	r3, [r3, #4]
 8008a74:	2b00      	cmp	r3, #0
 8008a76:	d001      	beq.n	8008a7c <DWT_Delay_Init+0x4c>
    {
       return 0; /*clock cycle counter started*/
 8008a78:	2300      	movs	r3, #0
 8008a7a:	e000      	b.n	8008a7e <DWT_Delay_Init+0x4e>
    }
    else
    {
      return 1; /*clock cycle counter not started*/
 8008a7c:	2301      	movs	r3, #1
    }
}
 8008a7e:	4618      	mov	r0, r3
 8008a80:	46bd      	mov	sp, r7
 8008a82:	bc80      	pop	{r7}
 8008a84:	4770      	bx	lr
 8008a86:	bf00      	nop
 8008a88:	e000edf0 	.word	0xe000edf0
 8008a8c:	e0001000 	.word	0xe0001000

08008a90 <BTN_Init>:

uint8_t Filters_Buffer[9] = {0};
FIR_Filter Filter_Instance[1] = {0};

void BTN_Init(uint8_t State)
{
 8008a90:	b480      	push	{r7}
 8008a92:	b083      	sub	sp, #12
 8008a94:	af00      	add	r7, sp, #0
 8008a96:	4603      	mov	r3, r0
 8008a98:	71fb      	strb	r3, [r7, #7]
	Filter_Instance[0].Filter_Order = 8;
 8008a9a:	4b07      	ldr	r3, [pc, #28]	; (8008ab8 <BTN_Init+0x28>)
 8008a9c:	2208      	movs	r2, #8
 8008a9e:	801a      	strh	r2, [r3, #0]
	Filter_Instance[0].Data_Buffer = Filters_Buffer;
 8008aa0:	4b05      	ldr	r3, [pc, #20]	; (8008ab8 <BTN_Init+0x28>)
 8008aa2:	4a06      	ldr	r2, [pc, #24]	; (8008abc <BTN_Init+0x2c>)
 8008aa4:	605a      	str	r2, [r3, #4]
	Filter_Instance[0].Buffer_Index = 0;
 8008aa6:	4b04      	ldr	r3, [pc, #16]	; (8008ab8 <BTN_Init+0x28>)
 8008aa8:	2200      	movs	r2, #0
 8008aaa:	805a      	strh	r2, [r3, #2]

	//BTN_State = State;
}
 8008aac:	bf00      	nop
 8008aae:	370c      	adds	r7, #12
 8008ab0:	46bd      	mov	sp, r7
 8008ab2:	bc80      	pop	{r7}
 8008ab4:	4770      	bx	lr
 8008ab6:	bf00      	nop
 8008ab8:	2000242c 	.word	0x2000242c
 8008abc:	20002420 	.word	0x20002420

08008ac0 <BTN_Main>:
	*BTN_State = HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_7);
}

// function to be called from inside the SysTick interrupt
void BTN_Main(void)
{
 8008ac0:	b580      	push	{r7, lr}
 8008ac2:	b082      	sub	sp, #8
 8008ac4:	af00      	add	r7, sp, #0
	uint8_t Read_State = 0;
 8008ac6:	2300      	movs	r3, #0
 8008ac8:	71fb      	strb	r3, [r7, #7]
	uint8_t FilterSum = 0;
 8008aca:	2300      	movs	r3, #0
 8008acc:	717b      	strb	r3, [r7, #5]
	uint8_t Filtered_State = 0;
 8008ace:	2300      	movs	r3, #0
 8008ad0:	71bb      	strb	r3, [r7, #6]


	Read_State = HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_14);
 8008ad2:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8008ad6:	4813      	ldr	r0, [pc, #76]	; (8008b24 <BTN_Main+0x64>)
 8008ad8:	f7fd fb7a 	bl	80061d0 <HAL_GPIO_ReadPin>
 8008adc:	4603      	mov	r3, r0
 8008ade:	71fb      	strb	r3, [r7, #7]
	/* Call The SUM Filter Function */
	SUM_BUFFER(Read_State, &FilterSum, &Filter_Instance[0]);
 8008ae0:	79fb      	ldrb	r3, [r7, #7]
 8008ae2:	4618      	mov	r0, r3
 8008ae4:	f7f8 f8e4 	bl	8000cb0 <__aeabi_ui2f>
 8008ae8:	1d7b      	adds	r3, r7, #5
 8008aea:	4a0f      	ldr	r2, [pc, #60]	; (8008b28 <BTN_Main+0x68>)
 8008aec:	4619      	mov	r1, r3
 8008aee:	f000 f81f 	bl	8008b30 <SUM_BUFFER>
	if(FilterSum == Filter_Instance[0].Filter_Order+1)
 8008af2:	797b      	ldrb	r3, [r7, #5]
 8008af4:	461a      	mov	r2, r3
 8008af6:	4b0c      	ldr	r3, [pc, #48]	; (8008b28 <BTN_Main+0x68>)
 8008af8:	881b      	ldrh	r3, [r3, #0]
 8008afa:	3301      	adds	r3, #1
 8008afc:	429a      	cmp	r2, r3
 8008afe:	d104      	bne.n	8008b0a <BTN_Main+0x4a>
	{
		Filtered_State = 1;
 8008b00:	2301      	movs	r3, #1
 8008b02:	71bb      	strb	r3, [r7, #6]
		// return filtered state
		BTN_State = Filtered_State;
 8008b04:	4a09      	ldr	r2, [pc, #36]	; (8008b2c <BTN_Main+0x6c>)
 8008b06:	79bb      	ldrb	r3, [r7, #6]
 8008b08:	7013      	strb	r3, [r2, #0]
	}
	if(FilterSum == 0)
 8008b0a:	797b      	ldrb	r3, [r7, #5]
 8008b0c:	2b00      	cmp	r3, #0
 8008b0e:	d104      	bne.n	8008b1a <BTN_Main+0x5a>
	{
		Filtered_State = 0;
 8008b10:	2300      	movs	r3, #0
 8008b12:	71bb      	strb	r3, [r7, #6]
		BTN_State = Filtered_State;
 8008b14:	4a05      	ldr	r2, [pc, #20]	; (8008b2c <BTN_Main+0x6c>)
 8008b16:	79bb      	ldrb	r3, [r7, #6]
 8008b18:	7013      	strb	r3, [r2, #0]
	}
}
 8008b1a:	bf00      	nop
 8008b1c:	3708      	adds	r7, #8
 8008b1e:	46bd      	mov	sp, r7
 8008b20:	bd80      	pop	{r7, pc}
 8008b22:	bf00      	nop
 8008b24:	40011000 	.word	0x40011000
 8008b28:	2000242c 	.word	0x2000242c
 8008b2c:	200010a0 	.word	0x200010a0

08008b30 <SUM_BUFFER>:
#include <filter.h>



void SUM_BUFFER(float IN, uint8_t* SUM, FIR_Filter* FILTER_OBJ){
 8008b30:	b590      	push	{r4, r7, lr}
 8008b32:	b087      	sub	sp, #28
 8008b34:	af00      	add	r7, sp, #0
 8008b36:	60f8      	str	r0, [r7, #12]
 8008b38:	60b9      	str	r1, [r7, #8]
 8008b3a:	607a      	str	r2, [r7, #4]
	int32_t temp_sum = 0;
 8008b3c:	2300      	movs	r3, #0
 8008b3e:	617b      	str	r3, [r7, #20]
	uint16_t i = 0;
 8008b40:	2300      	movs	r3, #0
 8008b42:	827b      	strh	r3, [r7, #18]

	// Push The New Input To The History Buffer
	FILTER_OBJ->Data_Buffer[FILTER_OBJ->Buffer_Index] = IN;
 8008b44:	687b      	ldr	r3, [r7, #4]
 8008b46:	685b      	ldr	r3, [r3, #4]
 8008b48:	687a      	ldr	r2, [r7, #4]
 8008b4a:	8852      	ldrh	r2, [r2, #2]
 8008b4c:	189c      	adds	r4, r3, r2
 8008b4e:	68f8      	ldr	r0, [r7, #12]
 8008b50:	f7f8 f97c 	bl	8000e4c <__aeabi_f2uiz>
 8008b54:	4603      	mov	r3, r0
 8008b56:	b2db      	uxtb	r3, r3
 8008b58:	7023      	strb	r3, [r4, #0]
	FILTER_OBJ->Buffer_Index++;
 8008b5a:	687b      	ldr	r3, [r7, #4]
 8008b5c:	885b      	ldrh	r3, [r3, #2]
 8008b5e:	3301      	adds	r3, #1
 8008b60:	b29a      	uxth	r2, r3
 8008b62:	687b      	ldr	r3, [r7, #4]
 8008b64:	805a      	strh	r2, [r3, #2]

	if(FILTER_OBJ->Buffer_Index == FILTER_OBJ->Filter_Order+1)
 8008b66:	687b      	ldr	r3, [r7, #4]
 8008b68:	885b      	ldrh	r3, [r3, #2]
 8008b6a:	461a      	mov	r2, r3
 8008b6c:	687b      	ldr	r3, [r7, #4]
 8008b6e:	881b      	ldrh	r3, [r3, #0]
 8008b70:	3301      	adds	r3, #1
 8008b72:	429a      	cmp	r2, r3
 8008b74:	d102      	bne.n	8008b7c <SUM_BUFFER+0x4c>
	{ FILTER_OBJ->Buffer_Index = 0; }
 8008b76:	687b      	ldr	r3, [r7, #4]
 8008b78:	2200      	movs	r2, #0
 8008b7a:	805a      	strh	r2, [r3, #2]

	// Calculate The Accumulated Sum For The Buffer Data
	for(i = 0; i < FILTER_OBJ->Filter_Order+1; i++)
 8008b7c:	2300      	movs	r3, #0
 8008b7e:	827b      	strh	r3, [r7, #18]
 8008b80:	e00b      	b.n	8008b9a <SUM_BUFFER+0x6a>
	{
		temp_sum += FILTER_OBJ->Data_Buffer[i];
 8008b82:	687b      	ldr	r3, [r7, #4]
 8008b84:	685a      	ldr	r2, [r3, #4]
 8008b86:	8a7b      	ldrh	r3, [r7, #18]
 8008b88:	4413      	add	r3, r2
 8008b8a:	781b      	ldrb	r3, [r3, #0]
 8008b8c:	461a      	mov	r2, r3
 8008b8e:	697b      	ldr	r3, [r7, #20]
 8008b90:	4413      	add	r3, r2
 8008b92:	617b      	str	r3, [r7, #20]
	for(i = 0; i < FILTER_OBJ->Filter_Order+1; i++)
 8008b94:	8a7b      	ldrh	r3, [r7, #18]
 8008b96:	3301      	adds	r3, #1
 8008b98:	827b      	strh	r3, [r7, #18]
 8008b9a:	687b      	ldr	r3, [r7, #4]
 8008b9c:	881b      	ldrh	r3, [r3, #0]
 8008b9e:	8a7a      	ldrh	r2, [r7, #18]
 8008ba0:	429a      	cmp	r2, r3
 8008ba2:	d9ee      	bls.n	8008b82 <SUM_BUFFER+0x52>
	}
	*SUM = (float)temp_sum;
 8008ba4:	6978      	ldr	r0, [r7, #20]
 8008ba6:	f7f8 f887 	bl	8000cb8 <__aeabi_i2f>
 8008baa:	4603      	mov	r3, r0
 8008bac:	4618      	mov	r0, r3
 8008bae:	f7f8 f94d 	bl	8000e4c <__aeabi_f2uiz>
 8008bb2:	4603      	mov	r3, r0
 8008bb4:	b2da      	uxtb	r2, r3
 8008bb6:	68bb      	ldr	r3, [r7, #8]
 8008bb8:	701a      	strb	r2, [r3, #0]
	}
 8008bba:	bf00      	nop
 8008bbc:	371c      	adds	r7, #28
 8008bbe:	46bd      	mov	sp, r7
 8008bc0:	bd90      	pop	{r4, r7, pc}

08008bc2 <__cxa_pure_virtual>:
 8008bc2:	b508      	push	{r3, lr}
 8008bc4:	f000 f80c 	bl	8008be0 <_ZSt9terminatev>

08008bc8 <_ZN10__cxxabiv111__terminateEPFvvE>:
 8008bc8:	b508      	push	{r3, lr}
 8008bca:	4780      	blx	r0
 8008bcc:	f000 f80d 	bl	8008bea <abort>

08008bd0 <_ZSt13get_terminatev>:
 8008bd0:	4b02      	ldr	r3, [pc, #8]	; (8008bdc <_ZSt13get_terminatev+0xc>)
 8008bd2:	6818      	ldr	r0, [r3, #0]
 8008bd4:	f3bf 8f5b 	dmb	ish
 8008bd8:	4770      	bx	lr
 8008bda:	bf00      	nop
 8008bdc:	20000010 	.word	0x20000010

08008be0 <_ZSt9terminatev>:
 8008be0:	b508      	push	{r3, lr}
 8008be2:	f7ff fff5 	bl	8008bd0 <_ZSt13get_terminatev>
 8008be6:	f7ff ffef 	bl	8008bc8 <_ZN10__cxxabiv111__terminateEPFvvE>

08008bea <abort>:
 8008bea:	2006      	movs	r0, #6
 8008bec:	b508      	push	{r3, lr}
 8008bee:	f000 f873 	bl	8008cd8 <raise>
 8008bf2:	2001      	movs	r0, #1
 8008bf4:	f7fc f857 	bl	8004ca6 <_exit>

08008bf8 <__errno>:
 8008bf8:	4b01      	ldr	r3, [pc, #4]	; (8008c00 <__errno+0x8>)
 8008bfa:	6818      	ldr	r0, [r3, #0]
 8008bfc:	4770      	bx	lr
 8008bfe:	bf00      	nop
 8008c00:	20000014 	.word	0x20000014

08008c04 <__libc_init_array>:
 8008c04:	b570      	push	{r4, r5, r6, lr}
 8008c06:	2600      	movs	r6, #0
 8008c08:	4d0c      	ldr	r5, [pc, #48]	; (8008c3c <__libc_init_array+0x38>)
 8008c0a:	4c0d      	ldr	r4, [pc, #52]	; (8008c40 <__libc_init_array+0x3c>)
 8008c0c:	1b64      	subs	r4, r4, r5
 8008c0e:	10a4      	asrs	r4, r4, #2
 8008c10:	42a6      	cmp	r6, r4
 8008c12:	d109      	bne.n	8008c28 <__libc_init_array+0x24>
 8008c14:	f000 f96e 	bl	8008ef4 <_init>
 8008c18:	2600      	movs	r6, #0
 8008c1a:	4d0a      	ldr	r5, [pc, #40]	; (8008c44 <__libc_init_array+0x40>)
 8008c1c:	4c0a      	ldr	r4, [pc, #40]	; (8008c48 <__libc_init_array+0x44>)
 8008c1e:	1b64      	subs	r4, r4, r5
 8008c20:	10a4      	asrs	r4, r4, #2
 8008c22:	42a6      	cmp	r6, r4
 8008c24:	d105      	bne.n	8008c32 <__libc_init_array+0x2e>
 8008c26:	bd70      	pop	{r4, r5, r6, pc}
 8008c28:	f855 3b04 	ldr.w	r3, [r5], #4
 8008c2c:	4798      	blx	r3
 8008c2e:	3601      	adds	r6, #1
 8008c30:	e7ee      	b.n	8008c10 <__libc_init_array+0xc>
 8008c32:	f855 3b04 	ldr.w	r3, [r5], #4
 8008c36:	4798      	blx	r3
 8008c38:	3601      	adds	r6, #1
 8008c3a:	e7f2      	b.n	8008c22 <__libc_init_array+0x1e>
 8008c3c:	080093e0 	.word	0x080093e0
 8008c40:	080093e0 	.word	0x080093e0
 8008c44:	080093e0 	.word	0x080093e0
 8008c48:	080093e8 	.word	0x080093e8

08008c4c <memcpy>:
 8008c4c:	440a      	add	r2, r1
 8008c4e:	4291      	cmp	r1, r2
 8008c50:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8008c54:	d100      	bne.n	8008c58 <memcpy+0xc>
 8008c56:	4770      	bx	lr
 8008c58:	b510      	push	{r4, lr}
 8008c5a:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008c5e:	4291      	cmp	r1, r2
 8008c60:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008c64:	d1f9      	bne.n	8008c5a <memcpy+0xe>
 8008c66:	bd10      	pop	{r4, pc}

08008c68 <memset>:
 8008c68:	4603      	mov	r3, r0
 8008c6a:	4402      	add	r2, r0
 8008c6c:	4293      	cmp	r3, r2
 8008c6e:	d100      	bne.n	8008c72 <memset+0xa>
 8008c70:	4770      	bx	lr
 8008c72:	f803 1b01 	strb.w	r1, [r3], #1
 8008c76:	e7f9      	b.n	8008c6c <memset+0x4>

08008c78 <realloc>:
 8008c78:	4b02      	ldr	r3, [pc, #8]	; (8008c84 <realloc+0xc>)
 8008c7a:	460a      	mov	r2, r1
 8008c7c:	4601      	mov	r1, r0
 8008c7e:	6818      	ldr	r0, [r3, #0]
 8008c80:	f000 b8a0 	b.w	8008dc4 <_realloc_r>
 8008c84:	20000014 	.word	0x20000014

08008c88 <_raise_r>:
 8008c88:	291f      	cmp	r1, #31
 8008c8a:	b538      	push	{r3, r4, r5, lr}
 8008c8c:	4604      	mov	r4, r0
 8008c8e:	460d      	mov	r5, r1
 8008c90:	d904      	bls.n	8008c9c <_raise_r+0x14>
 8008c92:	2316      	movs	r3, #22
 8008c94:	6003      	str	r3, [r0, #0]
 8008c96:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008c9a:	bd38      	pop	{r3, r4, r5, pc}
 8008c9c:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8008c9e:	b112      	cbz	r2, 8008ca6 <_raise_r+0x1e>
 8008ca0:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8008ca4:	b94b      	cbnz	r3, 8008cba <_raise_r+0x32>
 8008ca6:	4620      	mov	r0, r4
 8008ca8:	f000 f830 	bl	8008d0c <_getpid_r>
 8008cac:	462a      	mov	r2, r5
 8008cae:	4601      	mov	r1, r0
 8008cb0:	4620      	mov	r0, r4
 8008cb2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008cb6:	f000 b817 	b.w	8008ce8 <_kill_r>
 8008cba:	2b01      	cmp	r3, #1
 8008cbc:	d00a      	beq.n	8008cd4 <_raise_r+0x4c>
 8008cbe:	1c59      	adds	r1, r3, #1
 8008cc0:	d103      	bne.n	8008cca <_raise_r+0x42>
 8008cc2:	2316      	movs	r3, #22
 8008cc4:	6003      	str	r3, [r0, #0]
 8008cc6:	2001      	movs	r0, #1
 8008cc8:	e7e7      	b.n	8008c9a <_raise_r+0x12>
 8008cca:	2400      	movs	r4, #0
 8008ccc:	4628      	mov	r0, r5
 8008cce:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8008cd2:	4798      	blx	r3
 8008cd4:	2000      	movs	r0, #0
 8008cd6:	e7e0      	b.n	8008c9a <_raise_r+0x12>

08008cd8 <raise>:
 8008cd8:	4b02      	ldr	r3, [pc, #8]	; (8008ce4 <raise+0xc>)
 8008cda:	4601      	mov	r1, r0
 8008cdc:	6818      	ldr	r0, [r3, #0]
 8008cde:	f7ff bfd3 	b.w	8008c88 <_raise_r>
 8008ce2:	bf00      	nop
 8008ce4:	20000014 	.word	0x20000014

08008ce8 <_kill_r>:
 8008ce8:	b538      	push	{r3, r4, r5, lr}
 8008cea:	2300      	movs	r3, #0
 8008cec:	4d06      	ldr	r5, [pc, #24]	; (8008d08 <_kill_r+0x20>)
 8008cee:	4604      	mov	r4, r0
 8008cf0:	4608      	mov	r0, r1
 8008cf2:	4611      	mov	r1, r2
 8008cf4:	602b      	str	r3, [r5, #0]
 8008cf6:	f7fb ffc6 	bl	8004c86 <_kill>
 8008cfa:	1c43      	adds	r3, r0, #1
 8008cfc:	d102      	bne.n	8008d04 <_kill_r+0x1c>
 8008cfe:	682b      	ldr	r3, [r5, #0]
 8008d00:	b103      	cbz	r3, 8008d04 <_kill_r+0x1c>
 8008d02:	6023      	str	r3, [r4, #0]
 8008d04:	bd38      	pop	{r3, r4, r5, pc}
 8008d06:	bf00      	nop
 8008d08:	20002440 	.word	0x20002440

08008d0c <_getpid_r>:
 8008d0c:	f7fb bfb4 	b.w	8004c78 <_getpid>

08008d10 <_malloc_r>:
 8008d10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008d12:	1ccd      	adds	r5, r1, #3
 8008d14:	f025 0503 	bic.w	r5, r5, #3
 8008d18:	3508      	adds	r5, #8
 8008d1a:	2d0c      	cmp	r5, #12
 8008d1c:	bf38      	it	cc
 8008d1e:	250c      	movcc	r5, #12
 8008d20:	2d00      	cmp	r5, #0
 8008d22:	4606      	mov	r6, r0
 8008d24:	db01      	blt.n	8008d2a <_malloc_r+0x1a>
 8008d26:	42a9      	cmp	r1, r5
 8008d28:	d903      	bls.n	8008d32 <_malloc_r+0x22>
 8008d2a:	230c      	movs	r3, #12
 8008d2c:	6033      	str	r3, [r6, #0]
 8008d2e:	2000      	movs	r0, #0
 8008d30:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008d32:	f000 f87d 	bl	8008e30 <__malloc_lock>
 8008d36:	4921      	ldr	r1, [pc, #132]	; (8008dbc <_malloc_r+0xac>)
 8008d38:	680a      	ldr	r2, [r1, #0]
 8008d3a:	4614      	mov	r4, r2
 8008d3c:	b99c      	cbnz	r4, 8008d66 <_malloc_r+0x56>
 8008d3e:	4f20      	ldr	r7, [pc, #128]	; (8008dc0 <_malloc_r+0xb0>)
 8008d40:	683b      	ldr	r3, [r7, #0]
 8008d42:	b923      	cbnz	r3, 8008d4e <_malloc_r+0x3e>
 8008d44:	4621      	mov	r1, r4
 8008d46:	4630      	mov	r0, r6
 8008d48:	f000 f862 	bl	8008e10 <_sbrk_r>
 8008d4c:	6038      	str	r0, [r7, #0]
 8008d4e:	4629      	mov	r1, r5
 8008d50:	4630      	mov	r0, r6
 8008d52:	f000 f85d 	bl	8008e10 <_sbrk_r>
 8008d56:	1c43      	adds	r3, r0, #1
 8008d58:	d123      	bne.n	8008da2 <_malloc_r+0x92>
 8008d5a:	230c      	movs	r3, #12
 8008d5c:	4630      	mov	r0, r6
 8008d5e:	6033      	str	r3, [r6, #0]
 8008d60:	f000 f86c 	bl	8008e3c <__malloc_unlock>
 8008d64:	e7e3      	b.n	8008d2e <_malloc_r+0x1e>
 8008d66:	6823      	ldr	r3, [r4, #0]
 8008d68:	1b5b      	subs	r3, r3, r5
 8008d6a:	d417      	bmi.n	8008d9c <_malloc_r+0x8c>
 8008d6c:	2b0b      	cmp	r3, #11
 8008d6e:	d903      	bls.n	8008d78 <_malloc_r+0x68>
 8008d70:	6023      	str	r3, [r4, #0]
 8008d72:	441c      	add	r4, r3
 8008d74:	6025      	str	r5, [r4, #0]
 8008d76:	e004      	b.n	8008d82 <_malloc_r+0x72>
 8008d78:	6863      	ldr	r3, [r4, #4]
 8008d7a:	42a2      	cmp	r2, r4
 8008d7c:	bf0c      	ite	eq
 8008d7e:	600b      	streq	r3, [r1, #0]
 8008d80:	6053      	strne	r3, [r2, #4]
 8008d82:	4630      	mov	r0, r6
 8008d84:	f000 f85a 	bl	8008e3c <__malloc_unlock>
 8008d88:	f104 000b 	add.w	r0, r4, #11
 8008d8c:	1d23      	adds	r3, r4, #4
 8008d8e:	f020 0007 	bic.w	r0, r0, #7
 8008d92:	1ac2      	subs	r2, r0, r3
 8008d94:	d0cc      	beq.n	8008d30 <_malloc_r+0x20>
 8008d96:	1a1b      	subs	r3, r3, r0
 8008d98:	50a3      	str	r3, [r4, r2]
 8008d9a:	e7c9      	b.n	8008d30 <_malloc_r+0x20>
 8008d9c:	4622      	mov	r2, r4
 8008d9e:	6864      	ldr	r4, [r4, #4]
 8008da0:	e7cc      	b.n	8008d3c <_malloc_r+0x2c>
 8008da2:	1cc4      	adds	r4, r0, #3
 8008da4:	f024 0403 	bic.w	r4, r4, #3
 8008da8:	42a0      	cmp	r0, r4
 8008daa:	d0e3      	beq.n	8008d74 <_malloc_r+0x64>
 8008dac:	1a21      	subs	r1, r4, r0
 8008dae:	4630      	mov	r0, r6
 8008db0:	f000 f82e 	bl	8008e10 <_sbrk_r>
 8008db4:	3001      	adds	r0, #1
 8008db6:	d1dd      	bne.n	8008d74 <_malloc_r+0x64>
 8008db8:	e7cf      	b.n	8008d5a <_malloc_r+0x4a>
 8008dba:	bf00      	nop
 8008dbc:	20002434 	.word	0x20002434
 8008dc0:	20002438 	.word	0x20002438

08008dc4 <_realloc_r>:
 8008dc4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008dc6:	4607      	mov	r7, r0
 8008dc8:	4614      	mov	r4, r2
 8008dca:	460e      	mov	r6, r1
 8008dcc:	b921      	cbnz	r1, 8008dd8 <_realloc_r+0x14>
 8008dce:	4611      	mov	r1, r2
 8008dd0:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8008dd4:	f7ff bf9c 	b.w	8008d10 <_malloc_r>
 8008dd8:	b922      	cbnz	r2, 8008de4 <_realloc_r+0x20>
 8008dda:	f000 f835 	bl	8008e48 <_free_r>
 8008dde:	4625      	mov	r5, r4
 8008de0:	4628      	mov	r0, r5
 8008de2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008de4:	f000 f87c 	bl	8008ee0 <_malloc_usable_size_r>
 8008de8:	42a0      	cmp	r0, r4
 8008dea:	d20f      	bcs.n	8008e0c <_realloc_r+0x48>
 8008dec:	4621      	mov	r1, r4
 8008dee:	4638      	mov	r0, r7
 8008df0:	f7ff ff8e 	bl	8008d10 <_malloc_r>
 8008df4:	4605      	mov	r5, r0
 8008df6:	2800      	cmp	r0, #0
 8008df8:	d0f2      	beq.n	8008de0 <_realloc_r+0x1c>
 8008dfa:	4631      	mov	r1, r6
 8008dfc:	4622      	mov	r2, r4
 8008dfe:	f7ff ff25 	bl	8008c4c <memcpy>
 8008e02:	4631      	mov	r1, r6
 8008e04:	4638      	mov	r0, r7
 8008e06:	f000 f81f 	bl	8008e48 <_free_r>
 8008e0a:	e7e9      	b.n	8008de0 <_realloc_r+0x1c>
 8008e0c:	4635      	mov	r5, r6
 8008e0e:	e7e7      	b.n	8008de0 <_realloc_r+0x1c>

08008e10 <_sbrk_r>:
 8008e10:	b538      	push	{r3, r4, r5, lr}
 8008e12:	2300      	movs	r3, #0
 8008e14:	4d05      	ldr	r5, [pc, #20]	; (8008e2c <_sbrk_r+0x1c>)
 8008e16:	4604      	mov	r4, r0
 8008e18:	4608      	mov	r0, r1
 8008e1a:	602b      	str	r3, [r5, #0]
 8008e1c:	f7fb ff4e 	bl	8004cbc <_sbrk>
 8008e20:	1c43      	adds	r3, r0, #1
 8008e22:	d102      	bne.n	8008e2a <_sbrk_r+0x1a>
 8008e24:	682b      	ldr	r3, [r5, #0]
 8008e26:	b103      	cbz	r3, 8008e2a <_sbrk_r+0x1a>
 8008e28:	6023      	str	r3, [r4, #0]
 8008e2a:	bd38      	pop	{r3, r4, r5, pc}
 8008e2c:	20002440 	.word	0x20002440

08008e30 <__malloc_lock>:
 8008e30:	4801      	ldr	r0, [pc, #4]	; (8008e38 <__malloc_lock+0x8>)
 8008e32:	f000 b85d 	b.w	8008ef0 <__retarget_lock_acquire_recursive>
 8008e36:	bf00      	nop
 8008e38:	20002448 	.word	0x20002448

08008e3c <__malloc_unlock>:
 8008e3c:	4801      	ldr	r0, [pc, #4]	; (8008e44 <__malloc_unlock+0x8>)
 8008e3e:	f000 b858 	b.w	8008ef2 <__retarget_lock_release_recursive>
 8008e42:	bf00      	nop
 8008e44:	20002448 	.word	0x20002448

08008e48 <_free_r>:
 8008e48:	b538      	push	{r3, r4, r5, lr}
 8008e4a:	4605      	mov	r5, r0
 8008e4c:	2900      	cmp	r1, #0
 8008e4e:	d043      	beq.n	8008ed8 <_free_r+0x90>
 8008e50:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008e54:	1f0c      	subs	r4, r1, #4
 8008e56:	2b00      	cmp	r3, #0
 8008e58:	bfb8      	it	lt
 8008e5a:	18e4      	addlt	r4, r4, r3
 8008e5c:	f7ff ffe8 	bl	8008e30 <__malloc_lock>
 8008e60:	4a1e      	ldr	r2, [pc, #120]	; (8008edc <_free_r+0x94>)
 8008e62:	6813      	ldr	r3, [r2, #0]
 8008e64:	4610      	mov	r0, r2
 8008e66:	b933      	cbnz	r3, 8008e76 <_free_r+0x2e>
 8008e68:	6063      	str	r3, [r4, #4]
 8008e6a:	6014      	str	r4, [r2, #0]
 8008e6c:	4628      	mov	r0, r5
 8008e6e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008e72:	f7ff bfe3 	b.w	8008e3c <__malloc_unlock>
 8008e76:	42a3      	cmp	r3, r4
 8008e78:	d90a      	bls.n	8008e90 <_free_r+0x48>
 8008e7a:	6821      	ldr	r1, [r4, #0]
 8008e7c:	1862      	adds	r2, r4, r1
 8008e7e:	4293      	cmp	r3, r2
 8008e80:	bf01      	itttt	eq
 8008e82:	681a      	ldreq	r2, [r3, #0]
 8008e84:	685b      	ldreq	r3, [r3, #4]
 8008e86:	1852      	addeq	r2, r2, r1
 8008e88:	6022      	streq	r2, [r4, #0]
 8008e8a:	6063      	str	r3, [r4, #4]
 8008e8c:	6004      	str	r4, [r0, #0]
 8008e8e:	e7ed      	b.n	8008e6c <_free_r+0x24>
 8008e90:	461a      	mov	r2, r3
 8008e92:	685b      	ldr	r3, [r3, #4]
 8008e94:	b10b      	cbz	r3, 8008e9a <_free_r+0x52>
 8008e96:	42a3      	cmp	r3, r4
 8008e98:	d9fa      	bls.n	8008e90 <_free_r+0x48>
 8008e9a:	6811      	ldr	r1, [r2, #0]
 8008e9c:	1850      	adds	r0, r2, r1
 8008e9e:	42a0      	cmp	r0, r4
 8008ea0:	d10b      	bne.n	8008eba <_free_r+0x72>
 8008ea2:	6820      	ldr	r0, [r4, #0]
 8008ea4:	4401      	add	r1, r0
 8008ea6:	1850      	adds	r0, r2, r1
 8008ea8:	4283      	cmp	r3, r0
 8008eaa:	6011      	str	r1, [r2, #0]
 8008eac:	d1de      	bne.n	8008e6c <_free_r+0x24>
 8008eae:	6818      	ldr	r0, [r3, #0]
 8008eb0:	685b      	ldr	r3, [r3, #4]
 8008eb2:	4401      	add	r1, r0
 8008eb4:	6011      	str	r1, [r2, #0]
 8008eb6:	6053      	str	r3, [r2, #4]
 8008eb8:	e7d8      	b.n	8008e6c <_free_r+0x24>
 8008eba:	d902      	bls.n	8008ec2 <_free_r+0x7a>
 8008ebc:	230c      	movs	r3, #12
 8008ebe:	602b      	str	r3, [r5, #0]
 8008ec0:	e7d4      	b.n	8008e6c <_free_r+0x24>
 8008ec2:	6820      	ldr	r0, [r4, #0]
 8008ec4:	1821      	adds	r1, r4, r0
 8008ec6:	428b      	cmp	r3, r1
 8008ec8:	bf01      	itttt	eq
 8008eca:	6819      	ldreq	r1, [r3, #0]
 8008ecc:	685b      	ldreq	r3, [r3, #4]
 8008ece:	1809      	addeq	r1, r1, r0
 8008ed0:	6021      	streq	r1, [r4, #0]
 8008ed2:	6063      	str	r3, [r4, #4]
 8008ed4:	6054      	str	r4, [r2, #4]
 8008ed6:	e7c9      	b.n	8008e6c <_free_r+0x24>
 8008ed8:	bd38      	pop	{r3, r4, r5, pc}
 8008eda:	bf00      	nop
 8008edc:	20002434 	.word	0x20002434

08008ee0 <_malloc_usable_size_r>:
 8008ee0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008ee4:	1f18      	subs	r0, r3, #4
 8008ee6:	2b00      	cmp	r3, #0
 8008ee8:	bfbc      	itt	lt
 8008eea:	580b      	ldrlt	r3, [r1, r0]
 8008eec:	18c0      	addlt	r0, r0, r3
 8008eee:	4770      	bx	lr

08008ef0 <__retarget_lock_acquire_recursive>:
 8008ef0:	4770      	bx	lr

08008ef2 <__retarget_lock_release_recursive>:
 8008ef2:	4770      	bx	lr

08008ef4 <_init>:
 8008ef4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008ef6:	bf00      	nop
 8008ef8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008efa:	bc08      	pop	{r3}
 8008efc:	469e      	mov	lr, r3
 8008efe:	4770      	bx	lr

08008f00 <_fini>:
 8008f00:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008f02:	bf00      	nop
 8008f04:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008f06:	bc08      	pop	{r3}
 8008f08:	469e      	mov	lr, r3
 8008f0a:	4770      	bx	lr
